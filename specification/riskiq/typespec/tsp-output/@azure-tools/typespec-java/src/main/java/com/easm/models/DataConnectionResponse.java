// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.easm.models;

import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.OffsetDateTime;

/** DataConnectionResponse. */
@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        include = JsonTypeInfo.As.PROPERTY,
        property = "kind",
        defaultImpl = DataConnectionResponse.class)
@JsonTypeName("DataConnectionResponse")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "logAnalytics", value = LogAnalyticsDataConnectionResponse.class),
    @JsonSubTypes.Type(name = "azureDataExplorer", value = AzureDataExplorerDataConnectionResponse.class)
})
@Immutable
public class DataConnectionResponse {
    /*
     * The system generated unique id for the resource.
     */
    @JsonProperty(value = "id")
    private String id;

    /*
     * The caller provided unique name for the resource.
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * The name that can be used for display purposes.
     */
    @JsonProperty(value = "displayName")
    private String displayName;

    /*
     * The type of data the data connection will transfer
     */
    @JsonProperty(value = "content")
    private DataConnectionContent content;

    /*
     * The properties property.
     */
    @JsonProperty(value = "properties", required = true)
    private Object properties;

    /*
     * The date the data connection was created.
     */
    @JsonProperty(value = "createdDate")
    private OffsetDateTime createdDate;

    /*
     * The rate at which the data connection will receive updates.
     */
    @JsonProperty(value = "frequency")
    private DataConnectionFrequency frequency;

    /*
     * The day to update the data connection on.
     */
    @JsonProperty(value = "frequencyOffset")
    private Integer frequencyOffset;

    /*
     * The date the data connection was last updated.
     */
    @JsonProperty(value = "updatedDate")
    private OffsetDateTime updatedDate;

    /*
     * The date the data connection was last updated by user.
     */
    @JsonProperty(value = "userUpdatedAt")
    private OffsetDateTime userUpdatedAt;

    /*
     * An indicator of whether the data connection is active.
     */
    @JsonProperty(value = "active")
    private Boolean active;

    /*
     * A message that specifies details about data connection if inactive.
     */
    @JsonProperty(value = "inactiveMessage")
    private String inactiveMessage;

    /**
     * Creates an instance of DataConnectionResponse class.
     *
     * @param properties the properties value to set.
     */
    @JsonCreator
    protected DataConnectionResponse(@JsonProperty(value = "properties", required = true) Object properties) {
        this.properties = properties;
    }

    /**
     * Get the id property: The system generated unique id for the resource.
     *
     * @return the id value.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Get the name property: The caller provided unique name for the resource.
     *
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Get the displayName property: The name that can be used for display purposes.
     *
     * @return the displayName value.
     */
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Get the content property: The type of data the data connection will transfer.
     *
     * @return the content value.
     */
    public DataConnectionContent getContent() {
        return this.content;
    }

    /**
     * Get the properties property: The properties property.
     *
     * @return the properties value.
     */
    public Object getProperties() {
        return this.properties;
    }

    /**
     * Get the createdDate property: The date the data connection was created.
     *
     * @return the createdDate value.
     */
    public OffsetDateTime getCreatedDate() {
        return this.createdDate;
    }

    /**
     * Get the frequency property: The rate at which the data connection will receive updates.
     *
     * @return the frequency value.
     */
    public DataConnectionFrequency getFrequency() {
        return this.frequency;
    }

    /**
     * Get the frequencyOffset property: The day to update the data connection on.
     *
     * @return the frequencyOffset value.
     */
    public Integer getFrequencyOffset() {
        return this.frequencyOffset;
    }

    /**
     * Get the updatedDate property: The date the data connection was last updated.
     *
     * @return the updatedDate value.
     */
    public OffsetDateTime getUpdatedDate() {
        return this.updatedDate;
    }

    /**
     * Get the userUpdatedAt property: The date the data connection was last updated by user.
     *
     * @return the userUpdatedAt value.
     */
    public OffsetDateTime getUserUpdatedAt() {
        return this.userUpdatedAt;
    }

    /**
     * Get the active property: An indicator of whether the data connection is active.
     *
     * @return the active value.
     */
    public Boolean isActive() {
        return this.active;
    }

    /**
     * Get the inactiveMessage property: A message that specifies details about data connection if inactive.
     *
     * @return the inactiveMessage value.
     */
    public String getInactiveMessage() {
        return this.inactiveMessage;
    }
}
