# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import json
import sys
from typing import Any, Callable, Dict, IO, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ... import models as _models
from ..._model_base import AzureJSONEncoder, _deserialize
from ..._operations._operations import (
    build_easm_assets__get_request,
    build_easm_assets__list_request,
    build_easm_assets__update_request,
    build_easm_data_connections__delete_request,
    build_easm_data_connections__get_request,
    build_easm_data_connections__list_request,
    build_easm_data_connections__put_request,
    build_easm_data_connections__validate_request,
    build_easm_discovery_groups__get_request,
    build_easm_discovery_groups__list_request,
    build_easm_discovery_groups__list_runs_request,
    build_easm_discovery_groups__put_request,
    build_easm_discovery_groups__run_request,
    build_easm_discovery_groups__validate_request,
    build_easm_discovery_templates__get_request,
    build_easm_discovery_templates__list_request,
    build_easm_reports__billable_request,
    build_easm_reports__snapshot__export_request,
    build_easm_reports__snapshot_request,
    build_easm_reports__summary_request,
    build_easm_saved_filters__delete_request,
    build_easm_saved_filters__get_request,
    build_easm_saved_filters__list_request,
    build_easm_saved_filters__put_request,
    build_easm_tasks__cancel_request,
    build_easm_tasks__get_request,
    build_easm_tasks__list_request,
)
from .._vendor import EASMClientMixinABC

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class EASMClientOperationsMixin(EASMClientMixinABC):  # pylint: disable=too-many-public-methods
    @distributed_trace_async
    async def assets__list(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        *,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        skip: Optional[int] = None,
        maxpagesize: Optional[int] = None,
        mark: Optional[str] = None,
        **kwargs: Any
    ) -> _models.AssetPageResponse:
        """Retrieve a list of assets for the provided search parameters.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :keyword filter: Default value is None.
        :paramtype filter: str
        :keyword orderby: Default value is None.
        :paramtype orderby: str
        :keyword skip: Default value is None.
        :paramtype skip: int
        :keyword maxpagesize: Default value is None.
        :paramtype maxpagesize: int
        :keyword mark: Default value is None.
        :paramtype mark: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: AssetPageResponse. The AssetPageResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.AssetPageResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.AssetPageResponse] = kwargs.pop("cls", None)

        request = build_easm_assets__list_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            apiversion=self._config.apiversion,
            filter=filter,
            orderby=orderby,
            skip=skip,
            maxpagesize=maxpagesize,
            mark=mark,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.AssetPageResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def assets__update(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        asset_update_request: _models.AssetUpdateRequest,
        *,
        filter: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.TaskResponse:
        """Update labels on assets matching the provided filter.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param asset_update_request: Required.
        :type asset_update_request: ~azure.defender.easm.models.AssetUpdateRequest
        :keyword filter: Default value is None.
        :paramtype filter: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: TaskResponse. The TaskResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.TaskResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def assets__update(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        asset_update_request: JSON,
        *,
        filter: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.TaskResponse:
        """Update labels on assets matching the provided filter.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param asset_update_request: Required.
        :type asset_update_request: JSON
        :keyword filter: Default value is None.
        :paramtype filter: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: TaskResponse. The TaskResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.TaskResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def assets__update(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        asset_update_request: IO,
        *,
        filter: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.TaskResponse:
        """Update labels on assets matching the provided filter.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param asset_update_request: Required.
        :type asset_update_request: IO
        :keyword filter: Default value is None.
        :paramtype filter: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: TaskResponse. The TaskResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.TaskResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def assets__update(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        asset_update_request: Union[_models.AssetUpdateRequest, JSON, IO],
        *,
        filter: Optional[str] = None,
        **kwargs: Any
    ) -> _models.TaskResponse:
        """Update labels on assets matching the provided filter.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param asset_update_request: Is one of the following types: AssetUpdateRequest, JSON, IO
         Required.
        :type asset_update_request: ~azure.defender.easm.models.AssetUpdateRequest or JSON or IO
        :keyword filter: Default value is None.
        :paramtype filter: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: TaskResponse. The TaskResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.TaskResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.TaskResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(asset_update_request, (IOBase, bytes)):
            _content = asset_update_request
        else:
            _content = json.dumps(asset_update_request, cls=AzureJSONEncoder)  # type: ignore

        request = build_easm_assets__update_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            apiversion=self._config.apiversion,
            filter=filter,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.TaskResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def assets__get(
        self, subscription_id: str, resource_group_name: str, workspace_name: str, asset_id: str, **kwargs: Any
    ) -> _models.AssetResponse:
        """Retrieve an asset by assetId.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param asset_id: Required.
        :type asset_id: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: AssetResponse. The AssetResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.AssetResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.AssetResponse] = kwargs.pop("cls", None)

        request = build_easm_assets__get_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            asset_id=asset_id,
            apiversion=self._config.apiversion,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.AssetResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def data_connections__list(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        *,
        skip: Optional[int] = None,
        maxpagesize: Optional[int] = None,
        **kwargs: Any
    ) -> _models.DataConnectionPageResponse:
        """Retrieve a list of data connections.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :keyword skip: Default value is None.
        :paramtype skip: int
        :keyword maxpagesize: Default value is None.
        :paramtype maxpagesize: int
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: DataConnectionPageResponse. The DataConnectionPageResponse is compatible with
         MutableMapping
        :rtype: ~azure.defender.easm.models.DataConnectionPageResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.DataConnectionPageResponse] = kwargs.pop("cls", None)

        request = build_easm_data_connections__list_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            apiversion=self._config.apiversion,
            skip=skip,
            maxpagesize=maxpagesize,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.DataConnectionPageResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def data_connections__validate(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        data_connection_request: _models.DataConnectionRequest,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.ValidateResponse:
        """Validate a data connection with a given dataConnectionName.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param data_connection_request: Required.
        :type data_connection_request: ~azure.defender.easm.models.DataConnectionRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: ValidateResponse. The ValidateResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.ValidateResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def data_connections__validate(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        data_connection_request: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.ValidateResponse:
        """Validate a data connection with a given dataConnectionName.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param data_connection_request: Required.
        :type data_connection_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: ValidateResponse. The ValidateResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.ValidateResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def data_connections__validate(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        data_connection_request: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.ValidateResponse:
        """Validate a data connection with a given dataConnectionName.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param data_connection_request: Required.
        :type data_connection_request: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: ValidateResponse. The ValidateResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.ValidateResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def data_connections__validate(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        data_connection_request: Union[_models.DataConnectionRequest, JSON, IO],
        **kwargs: Any
    ) -> _models.ValidateResponse:
        """Validate a data connection with a given dataConnectionName.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param data_connection_request: Is one of the following types: DataConnectionRequest, JSON, IO
         Required.
        :type data_connection_request: ~azure.defender.easm.models.DataConnectionRequest or JSON or IO
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: ValidateResponse. The ValidateResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.ValidateResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.ValidateResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(data_connection_request, (IOBase, bytes)):
            _content = data_connection_request
        else:
            _content = json.dumps(data_connection_request, cls=AzureJSONEncoder)  # type: ignore

        request = build_easm_data_connections__validate_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            apiversion=self._config.apiversion,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.ValidateResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def data_connections__get(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        data_connection_name: str,
        **kwargs: Any
    ) -> _models.DataConnectionResponse:
        """Retrieve a data connection with a given dataConnectionName.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param data_connection_name: Required.
        :type data_connection_name: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: DataConnectionResponse. The DataConnectionResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.DataConnectionResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.DataConnectionResponse] = kwargs.pop("cls", None)

        request = build_easm_data_connections__get_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            data_connection_name=data_connection_name,
            apiversion=self._config.apiversion,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.DataConnectionResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def data_connections__put(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        data_connection_name: str,
        data_connection_request: _models.DataConnectionRequest,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.DataConnectionResponse:
        """Create or update a data connection with a given dataConnectionName.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param data_connection_name: Required.
        :type data_connection_name: str
        :param data_connection_request: Required.
        :type data_connection_request: ~azure.defender.easm.models.DataConnectionRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: DataConnectionResponse. The DataConnectionResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.DataConnectionResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def data_connections__put(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        data_connection_name: str,
        data_connection_request: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.DataConnectionResponse:
        """Create or update a data connection with a given dataConnectionName.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param data_connection_name: Required.
        :type data_connection_name: str
        :param data_connection_request: Required.
        :type data_connection_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: DataConnectionResponse. The DataConnectionResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.DataConnectionResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def data_connections__put(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        data_connection_name: str,
        data_connection_request: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.DataConnectionResponse:
        """Create or update a data connection with a given dataConnectionName.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param data_connection_name: Required.
        :type data_connection_name: str
        :param data_connection_request: Required.
        :type data_connection_request: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: DataConnectionResponse. The DataConnectionResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.DataConnectionResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def data_connections__put(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        data_connection_name: str,
        data_connection_request: Union[_models.DataConnectionRequest, JSON, IO],
        **kwargs: Any
    ) -> _models.DataConnectionResponse:
        """Create or update a data connection with a given dataConnectionName.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param data_connection_name: Required.
        :type data_connection_name: str
        :param data_connection_request: Is one of the following types: DataConnectionRequest, JSON, IO
         Required.
        :type data_connection_request: ~azure.defender.easm.models.DataConnectionRequest or JSON or IO
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: DataConnectionResponse. The DataConnectionResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.DataConnectionResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.DataConnectionResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(data_connection_request, (IOBase, bytes)):
            _content = data_connection_request
        else:
            _content = json.dumps(data_connection_request, cls=AzureJSONEncoder)  # type: ignore

        request = build_easm_data_connections__put_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            data_connection_name=data_connection_name,
            apiversion=self._config.apiversion,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.DataConnectionResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def data_connections__delete(  # pylint: disable=inconsistent-return-statements
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        data_connection_name: str,
        **kwargs: Any
    ) -> None:
        """Delete a data connection with a given dataConnectionName.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param data_connection_name: Required.
        :type data_connection_name: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        request = build_easm_data_connections__delete_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            data_connection_name=data_connection_name,
            apiversion=self._config.apiversion,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def discovery_groups__list(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        *,
        filter: Optional[str] = None,
        skip: Optional[int] = None,
        maxpagesize: Optional[int] = None,
        **kwargs: Any
    ) -> _models.DiscoGroupPageResponse:
        """Retrieve a list of discovery group for the provided search parameters.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :keyword filter: Default value is None.
        :paramtype filter: str
        :keyword skip: Default value is None.
        :paramtype skip: int
        :keyword maxpagesize: Default value is None.
        :paramtype maxpagesize: int
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: DiscoGroupPageResponse. The DiscoGroupPageResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.DiscoGroupPageResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.DiscoGroupPageResponse] = kwargs.pop("cls", None)

        request = build_easm_discovery_groups__list_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            apiversion=self._config.apiversion,
            filter=filter,
            skip=skip,
            maxpagesize=maxpagesize,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.DiscoGroupPageResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def discovery_groups__validate(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        group_name: str,
        disco_group_request: _models.DiscoGroupRequest,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.ValidateResponse:
        """Validate a discovery group with a given groupName.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param group_name: Required.
        :type group_name: str
        :param disco_group_request: Required.
        :type disco_group_request: ~azure.defender.easm.models.DiscoGroupRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: ValidateResponse. The ValidateResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.ValidateResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def discovery_groups__validate(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        group_name: str,
        disco_group_request: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.ValidateResponse:
        """Validate a discovery group with a given groupName.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param group_name: Required.
        :type group_name: str
        :param disco_group_request: Required.
        :type disco_group_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: ValidateResponse. The ValidateResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.ValidateResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def discovery_groups__validate(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        group_name: str,
        disco_group_request: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.ValidateResponse:
        """Validate a discovery group with a given groupName.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param group_name: Required.
        :type group_name: str
        :param disco_group_request: Required.
        :type disco_group_request: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: ValidateResponse. The ValidateResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.ValidateResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def discovery_groups__validate(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        group_name: str,
        disco_group_request: Union[_models.DiscoGroupRequest, JSON, IO],
        **kwargs: Any
    ) -> _models.ValidateResponse:
        """Validate a discovery group with a given groupName.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param group_name: Required.
        :type group_name: str
        :param disco_group_request: Is one of the following types: DiscoGroupRequest, JSON, IO
         Required.
        :type disco_group_request: ~azure.defender.easm.models.DiscoGroupRequest or JSON or IO
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: ValidateResponse. The ValidateResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.ValidateResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.ValidateResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(disco_group_request, (IOBase, bytes)):
            _content = disco_group_request
        else:
            _content = json.dumps(disco_group_request, cls=AzureJSONEncoder)  # type: ignore

        request = build_easm_discovery_groups__validate_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            group_name=group_name,
            apiversion=self._config.apiversion,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.ValidateResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def discovery_groups__get(
        self, subscription_id: str, resource_group_name: str, workspace_name: str, group_name: str, **kwargs: Any
    ) -> _models.DiscoGroupResponse:
        """Retrieve a discovery group with a given groupName.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param group_name: Required.
        :type group_name: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: DiscoGroupResponse. The DiscoGroupResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.DiscoGroupResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.DiscoGroupResponse] = kwargs.pop("cls", None)

        request = build_easm_discovery_groups__get_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            group_name=group_name,
            apiversion=self._config.apiversion,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.DiscoGroupResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def discovery_groups__put(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        group_name: str,
        disco_group_request: _models.DiscoGroupRequest,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.DiscoGroupResponse:
        """Create a discovery group with a given groupName.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param group_name: Required.
        :type group_name: str
        :param disco_group_request: Required.
        :type disco_group_request: ~azure.defender.easm.models.DiscoGroupRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: DiscoGroupResponse. The DiscoGroupResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.DiscoGroupResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def discovery_groups__put(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        group_name: str,
        disco_group_request: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.DiscoGroupResponse:
        """Create a discovery group with a given groupName.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param group_name: Required.
        :type group_name: str
        :param disco_group_request: Required.
        :type disco_group_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: DiscoGroupResponse. The DiscoGroupResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.DiscoGroupResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def discovery_groups__put(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        group_name: str,
        disco_group_request: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.DiscoGroupResponse:
        """Create a discovery group with a given groupName.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param group_name: Required.
        :type group_name: str
        :param disco_group_request: Required.
        :type disco_group_request: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: DiscoGroupResponse. The DiscoGroupResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.DiscoGroupResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def discovery_groups__put(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        group_name: str,
        disco_group_request: Union[_models.DiscoGroupRequest, JSON, IO],
        **kwargs: Any
    ) -> _models.DiscoGroupResponse:
        """Create a discovery group with a given groupName.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param group_name: Required.
        :type group_name: str
        :param disco_group_request: Is one of the following types: DiscoGroupRequest, JSON, IO
         Required.
        :type disco_group_request: ~azure.defender.easm.models.DiscoGroupRequest or JSON or IO
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: DiscoGroupResponse. The DiscoGroupResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.DiscoGroupResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.DiscoGroupResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(disco_group_request, (IOBase, bytes)):
            _content = disco_group_request
        else:
            _content = json.dumps(disco_group_request, cls=AzureJSONEncoder)  # type: ignore

        request = build_easm_discovery_groups__put_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            group_name=group_name,
            apiversion=self._config.apiversion,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.DiscoGroupResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def discovery_groups__run(  # pylint: disable=inconsistent-return-statements
        self, subscription_id: str, resource_group_name: str, workspace_name: str, group_name: str, **kwargs: Any
    ) -> None:
        """Run a discovery group with a given groupName.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param group_name: Required.
        :type group_name: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        request = build_easm_discovery_groups__run_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            group_name=group_name,
            apiversion=self._config.apiversion,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def discovery_groups__list_runs(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        group_name: str,
        *,
        filter: Optional[str] = None,
        skip: Optional[int] = None,
        maxpagesize: Optional[int] = None,
        **kwargs: Any
    ) -> _models.DiscoRunPageResponse:
        """Retrieve a collection of discovery run results for a discovery group with a given groupName.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param group_name: Required.
        :type group_name: str
        :keyword filter: Default value is None.
        :paramtype filter: str
        :keyword skip: Default value is None.
        :paramtype skip: int
        :keyword maxpagesize: Default value is None.
        :paramtype maxpagesize: int
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: DiscoRunPageResponse. The DiscoRunPageResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.DiscoRunPageResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.DiscoRunPageResponse] = kwargs.pop("cls", None)

        request = build_easm_discovery_groups__list_runs_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            group_name=group_name,
            apiversion=self._config.apiversion,
            filter=filter,
            skip=skip,
            maxpagesize=maxpagesize,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.DiscoRunPageResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def discovery_templates__list(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        *,
        filter: Optional[str] = None,
        skip: Optional[int] = None,
        maxpagesize: Optional[int] = None,
        **kwargs: Any
    ) -> _models.DiscoTemplatePageResponse:
        """Retrieve a list of disco templates for the provided search parameters.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :keyword filter: Default value is None.
        :paramtype filter: str
        :keyword skip: Default value is None.
        :paramtype skip: int
        :keyword maxpagesize: Default value is None.
        :paramtype maxpagesize: int
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: DiscoTemplatePageResponse. The DiscoTemplatePageResponse is compatible with
         MutableMapping
        :rtype: ~azure.defender.easm.models.DiscoTemplatePageResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.DiscoTemplatePageResponse] = kwargs.pop("cls", None)

        request = build_easm_discovery_templates__list_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            apiversion=self._config.apiversion,
            filter=filter,
            skip=skip,
            maxpagesize=maxpagesize,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.DiscoTemplatePageResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def discovery_templates__get(
        self, subscription_id: str, resource_group_name: str, workspace_name: str, template_id: str, **kwargs: Any
    ) -> _models.DiscoTemplateResponse:
        """Retrieve a disco template with a given templateId.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param template_id: Required.
        :type template_id: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: DiscoTemplateResponse. The DiscoTemplateResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.DiscoTemplateResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.DiscoTemplateResponse] = kwargs.pop("cls", None)

        request = build_easm_discovery_templates__get_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            template_id=template_id,
            apiversion=self._config.apiversion,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.DiscoTemplateResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def reports__billable(
        self, subscription_id: str, resource_group_name: str, workspace_name: str, **kwargs: Any
    ) -> _models.ReportBillableAssetSummaryResponse:
        """Get billable assets summary for the workspace.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: ReportBillableAssetSummaryResponse. The ReportBillableAssetSummaryResponse is
         compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.ReportBillableAssetSummaryResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.ReportBillableAssetSummaryResponse] = kwargs.pop("cls", None)

        request = build_easm_reports__billable_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            apiversion=self._config.apiversion,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.ReportBillableAssetSummaryResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def reports__snapshot(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        report_asset_snapshot_request: _models.ReportAssetSnapshotRequest,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.ReportAssetSnapshotResponse:
        """Get the most recent snapshot of asset summary values for the snapshot request.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param report_asset_snapshot_request: Required.
        :type report_asset_snapshot_request: ~azure.defender.easm.models.ReportAssetSnapshotRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: ReportAssetSnapshotResponse. The ReportAssetSnapshotResponse is compatible with
         MutableMapping
        :rtype: ~azure.defender.easm.models.ReportAssetSnapshotResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def reports__snapshot(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        report_asset_snapshot_request: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.ReportAssetSnapshotResponse:
        """Get the most recent snapshot of asset summary values for the snapshot request.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param report_asset_snapshot_request: Required.
        :type report_asset_snapshot_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: ReportAssetSnapshotResponse. The ReportAssetSnapshotResponse is compatible with
         MutableMapping
        :rtype: ~azure.defender.easm.models.ReportAssetSnapshotResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def reports__snapshot(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        report_asset_snapshot_request: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.ReportAssetSnapshotResponse:
        """Get the most recent snapshot of asset summary values for the snapshot request.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param report_asset_snapshot_request: Required.
        :type report_asset_snapshot_request: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: ReportAssetSnapshotResponse. The ReportAssetSnapshotResponse is compatible with
         MutableMapping
        :rtype: ~azure.defender.easm.models.ReportAssetSnapshotResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def reports__snapshot(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        report_asset_snapshot_request: Union[_models.ReportAssetSnapshotRequest, JSON, IO],
        **kwargs: Any
    ) -> _models.ReportAssetSnapshotResponse:
        """Get the most recent snapshot of asset summary values for the snapshot request.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param report_asset_snapshot_request: Is one of the following types:
         ReportAssetSnapshotRequest, JSON, IO Required.
        :type report_asset_snapshot_request: ~azure.defender.easm.models.ReportAssetSnapshotRequest or
         JSON or IO
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: ReportAssetSnapshotResponse. The ReportAssetSnapshotResponse is compatible with
         MutableMapping
        :rtype: ~azure.defender.easm.models.ReportAssetSnapshotResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.ReportAssetSnapshotResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(report_asset_snapshot_request, (IOBase, bytes)):
            _content = report_asset_snapshot_request
        else:
            _content = json.dumps(report_asset_snapshot_request, cls=AzureJSONEncoder)  # type: ignore

        request = build_easm_reports__snapshot_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            apiversion=self._config.apiversion,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.ReportAssetSnapshotResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def reports__snapshot__export(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        report_asset_snapshot_export_request: _models.ReportAssetSnapshotExportRequest,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.TaskResponse:
        """Queue an export of the most recent snapshot of asset summary values to a file.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param report_asset_snapshot_export_request: Required.
        :type report_asset_snapshot_export_request:
         ~azure.defender.easm.models.ReportAssetSnapshotExportRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: TaskResponse. The TaskResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.TaskResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def reports__snapshot__export(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        report_asset_snapshot_export_request: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.TaskResponse:
        """Queue an export of the most recent snapshot of asset summary values to a file.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param report_asset_snapshot_export_request: Required.
        :type report_asset_snapshot_export_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: TaskResponse. The TaskResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.TaskResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def reports__snapshot__export(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        report_asset_snapshot_export_request: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.TaskResponse:
        """Queue an export of the most recent snapshot of asset summary values to a file.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param report_asset_snapshot_export_request: Required.
        :type report_asset_snapshot_export_request: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: TaskResponse. The TaskResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.TaskResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def reports__snapshot__export(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        report_asset_snapshot_export_request: Union[_models.ReportAssetSnapshotExportRequest, JSON, IO],
        **kwargs: Any
    ) -> _models.TaskResponse:
        """Queue an export of the most recent snapshot of asset summary values to a file.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param report_asset_snapshot_export_request: Is one of the following types:
         ReportAssetSnapshotExportRequest, JSON, IO Required.
        :type report_asset_snapshot_export_request:
         ~azure.defender.easm.models.ReportAssetSnapshotExportRequest or JSON or IO
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: TaskResponse. The TaskResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.TaskResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.TaskResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(report_asset_snapshot_export_request, (IOBase, bytes)):
            _content = report_asset_snapshot_export_request
        else:
            _content = json.dumps(report_asset_snapshot_export_request, cls=AzureJSONEncoder)  # type: ignore

        request = build_easm_reports__snapshot__export_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            apiversion=self._config.apiversion,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.TaskResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def reports__summary(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        report_asset_summary_request: _models.ReportAssetSummaryRequest,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.ReportAssetSummaryResponse:
        """Get asset summary details for the summary request.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param report_asset_summary_request: Required.
        :type report_asset_summary_request: ~azure.defender.easm.models.ReportAssetSummaryRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: ReportAssetSummaryResponse. The ReportAssetSummaryResponse is compatible with
         MutableMapping
        :rtype: ~azure.defender.easm.models.ReportAssetSummaryResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def reports__summary(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        report_asset_summary_request: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.ReportAssetSummaryResponse:
        """Get asset summary details for the summary request.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param report_asset_summary_request: Required.
        :type report_asset_summary_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: ReportAssetSummaryResponse. The ReportAssetSummaryResponse is compatible with
         MutableMapping
        :rtype: ~azure.defender.easm.models.ReportAssetSummaryResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def reports__summary(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        report_asset_summary_request: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.ReportAssetSummaryResponse:
        """Get asset summary details for the summary request.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param report_asset_summary_request: Required.
        :type report_asset_summary_request: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: ReportAssetSummaryResponse. The ReportAssetSummaryResponse is compatible with
         MutableMapping
        :rtype: ~azure.defender.easm.models.ReportAssetSummaryResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def reports__summary(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        report_asset_summary_request: Union[_models.ReportAssetSummaryRequest, JSON, IO],
        **kwargs: Any
    ) -> _models.ReportAssetSummaryResponse:
        """Get asset summary details for the summary request.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param report_asset_summary_request: Is one of the following types: ReportAssetSummaryRequest,
         JSON, IO Required.
        :type report_asset_summary_request: ~azure.defender.easm.models.ReportAssetSummaryRequest or
         JSON or IO
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: ReportAssetSummaryResponse. The ReportAssetSummaryResponse is compatible with
         MutableMapping
        :rtype: ~azure.defender.easm.models.ReportAssetSummaryResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.ReportAssetSummaryResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(report_asset_summary_request, (IOBase, bytes)):
            _content = report_asset_summary_request
        else:
            _content = json.dumps(report_asset_summary_request, cls=AzureJSONEncoder)  # type: ignore

        request = build_easm_reports__summary_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            apiversion=self._config.apiversion,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.ReportAssetSummaryResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def saved_filters__list(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        *,
        filter: Optional[str] = None,
        skip: Optional[int] = None,
        maxpagesize: Optional[int] = None,
        **kwargs: Any
    ) -> _models.SavedFilterPageResponse:
        """Retrieve a list of saved filters for the provided search parameters.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :keyword filter: Default value is None.
        :paramtype filter: str
        :keyword skip: Default value is None.
        :paramtype skip: int
        :keyword maxpagesize: Default value is None.
        :paramtype maxpagesize: int
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: SavedFilterPageResponse. The SavedFilterPageResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.SavedFilterPageResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.SavedFilterPageResponse] = kwargs.pop("cls", None)

        request = build_easm_saved_filters__list_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            apiversion=self._config.apiversion,
            filter=filter,
            skip=skip,
            maxpagesize=maxpagesize,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.SavedFilterPageResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def saved_filters__get(
        self, subscription_id: str, resource_group_name: str, workspace_name: str, filter_name: str, **kwargs: Any
    ) -> _models.SavedFilterResponse:
        """Retrieve a saved filter by filterName.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param filter_name: Required.
        :type filter_name: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: SavedFilterResponse. The SavedFilterResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.SavedFilterResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.SavedFilterResponse] = kwargs.pop("cls", None)

        request = build_easm_saved_filters__get_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            filter_name=filter_name,
            apiversion=self._config.apiversion,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.SavedFilterResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def saved_filters__put(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        filter_name: str,
        saved_filter_request: _models.SavedFilterRequest,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SavedFilterResponse:
        """Create or update a saved filter with a given filterName.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param filter_name: Required.
        :type filter_name: str
        :param saved_filter_request: Required.
        :type saved_filter_request: ~azure.defender.easm.models.SavedFilterRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: SavedFilterResponse. The SavedFilterResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.SavedFilterResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def saved_filters__put(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        filter_name: str,
        saved_filter_request: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SavedFilterResponse:
        """Create or update a saved filter with a given filterName.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param filter_name: Required.
        :type filter_name: str
        :param saved_filter_request: Required.
        :type saved_filter_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: SavedFilterResponse. The SavedFilterResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.SavedFilterResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def saved_filters__put(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        filter_name: str,
        saved_filter_request: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SavedFilterResponse:
        """Create or update a saved filter with a given filterName.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param filter_name: Required.
        :type filter_name: str
        :param saved_filter_request: Required.
        :type saved_filter_request: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: SavedFilterResponse. The SavedFilterResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.SavedFilterResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def saved_filters__put(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        filter_name: str,
        saved_filter_request: Union[_models.SavedFilterRequest, JSON, IO],
        **kwargs: Any
    ) -> _models.SavedFilterResponse:
        """Create or update a saved filter with a given filterName.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param filter_name: Required.
        :type filter_name: str
        :param saved_filter_request: Is one of the following types: SavedFilterRequest, JSON, IO
         Required.
        :type saved_filter_request: ~azure.defender.easm.models.SavedFilterRequest or JSON or IO
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: SavedFilterResponse. The SavedFilterResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.SavedFilterResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.SavedFilterResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(saved_filter_request, (IOBase, bytes)):
            _content = saved_filter_request
        else:
            _content = json.dumps(saved_filter_request, cls=AzureJSONEncoder)  # type: ignore

        request = build_easm_saved_filters__put_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            filter_name=filter_name,
            apiversion=self._config.apiversion,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.SavedFilterResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def saved_filters__delete(  # pylint: disable=inconsistent-return-statements
        self, subscription_id: str, resource_group_name: str, workspace_name: str, filter_name: str, **kwargs: Any
    ) -> None:
        """Delete a saved filter with a given filterName.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param filter_name: Required.
        :type filter_name: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        request = build_easm_saved_filters__delete_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            filter_name=filter_name,
            apiversion=self._config.apiversion,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def tasks__list(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        *,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        skip: Optional[int] = None,
        maxpagesize: Optional[int] = None,
        **kwargs: Any
    ) -> _models.TaskPageResponse:
        """Retrieve a list of tasks for the provided search parameters.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :keyword filter: Default value is None.
        :paramtype filter: str
        :keyword orderby: Default value is None.
        :paramtype orderby: str
        :keyword skip: Default value is None.
        :paramtype skip: int
        :keyword maxpagesize: Default value is None.
        :paramtype maxpagesize: int
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: TaskPageResponse. The TaskPageResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.TaskPageResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.TaskPageResponse] = kwargs.pop("cls", None)

        request = build_easm_tasks__list_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            apiversion=self._config.apiversion,
            filter=filter,
            orderby=orderby,
            skip=skip,
            maxpagesize=maxpagesize,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.TaskPageResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def tasks__get(
        self, subscription_id: str, resource_group_name: str, workspace_name: str, task_id: str, **kwargs: Any
    ) -> _models.TaskResponse:
        """Retrieve a task by taskId.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param task_id: Required.
        :type task_id: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: TaskResponse. The TaskResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.TaskResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.TaskResponse] = kwargs.pop("cls", None)

        request = build_easm_tasks__get_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            task_id=task_id,
            apiversion=self._config.apiversion,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.TaskResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def tasks__cancel(
        self, subscription_id: str, resource_group_name: str, workspace_name: str, task_id: str, **kwargs: Any
    ) -> _models.TaskResponse:
        """Cancel a task by taskId.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param task_id: Required.
        :type task_id: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: TaskResponse. The TaskResponse is compatible with MutableMapping
        :rtype: ~azure.defender.easm.models.TaskResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.TaskResponse] = kwargs.pop("cls", None)

        request = build_easm_tasks__cancel_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            task_id=task_id,
            apiversion=self._config.apiversion,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.TaskResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore
