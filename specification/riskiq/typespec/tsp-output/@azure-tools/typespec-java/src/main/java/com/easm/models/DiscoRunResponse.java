// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.easm.models;

import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** DiscoRunResponse. */
@Immutable
public final class DiscoRunResponse {
    /*
     * The date for when the disco run was created in the system.
     */
    @JsonProperty(value = "submittedDate")
    private OffsetDateTime submittedDate;

    /*
     * The date for when the disco run was actually started by the system.
     */
    @JsonProperty(value = "startedDate")
    private OffsetDateTime startedDate;

    /*
     * The date for when the disco run was completed by the system.
     */
    @JsonProperty(value = "completedDate")
    private OffsetDateTime completedDate;

    /*
     * The tier which will affect the algorithm used for the disco run.
     */
    @JsonProperty(value = "tier")
    private String tier;

    /*
     * The State of the disco run.
     */
    @JsonProperty(value = "state")
    private DiscoRunState state;

    /*
     * The total count of assets that were found this disco run.
     */
    @JsonProperty(value = "totalAssetsFoundCount")
    private Long totalAssetsFoundCount;

    /*
     * The list of seeds used for the disco run.
     */
    @JsonProperty(value = "seeds")
    private List<DiscoSource> seeds;

    /*
     * The list of excludes used for the disco run, aka assets to exclude from the discovery algorithm.
     */
    @JsonProperty(value = "excludes")
    private List<DiscoSource> excludes;

    /*
     * The list of names used for the disco run.
     */
    @JsonProperty(value = "names")
    private List<String> names;

    /** Creates an instance of DiscoRunResponse class. */
    private DiscoRunResponse() {}

    /**
     * Get the submittedDate property: The date for when the disco run was created in the system.
     *
     * @return the submittedDate value.
     */
    public OffsetDateTime getSubmittedDate() {
        return this.submittedDate;
    }

    /**
     * Get the startedDate property: The date for when the disco run was actually started by the system.
     *
     * @return the startedDate value.
     */
    public OffsetDateTime getStartedDate() {
        return this.startedDate;
    }

    /**
     * Get the completedDate property: The date for when the disco run was completed by the system.
     *
     * @return the completedDate value.
     */
    public OffsetDateTime getCompletedDate() {
        return this.completedDate;
    }

    /**
     * Get the tier property: The tier which will affect the algorithm used for the disco run.
     *
     * @return the tier value.
     */
    public String getTier() {
        return this.tier;
    }

    /**
     * Get the state property: The State of the disco run.
     *
     * @return the state value.
     */
    public DiscoRunState getState() {
        return this.state;
    }

    /**
     * Get the totalAssetsFoundCount property: The total count of assets that were found this disco run.
     *
     * @return the totalAssetsFoundCount value.
     */
    public Long getTotalAssetsFoundCount() {
        return this.totalAssetsFoundCount;
    }

    /**
     * Get the seeds property: The list of seeds used for the disco run.
     *
     * @return the seeds value.
     */
    public List<DiscoSource> getSeeds() {
        return this.seeds;
    }

    /**
     * Get the excludes property: The list of excludes used for the disco run, aka assets to exclude from the discovery
     * algorithm.
     *
     * @return the excludes value.
     */
    public List<DiscoSource> getExcludes() {
        return this.excludes;
    }

    /**
     * Get the names property: The list of names used for the disco run.
     *
     * @return the names value.
     */
    public List<String> getNames() {
        return this.names;
    }
}
