# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
import sys
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_discriminator, rest_field

if sys.version_info >= (3, 8):
    from typing import Literal  # pylint: disable=no-name-in-module, ungrouped-imports
else:
    from typing_extensions import Literal  # type: ignore  # pylint: disable=ungrouped-imports

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class AlexaInfo(_model_base.Model):
    """AlexaInfo.

    :ivar alexa_rank:
    :vartype alexa_rank: int
    :ivar category:
    :vartype category: str
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar count:
    :vartype count: int
    :ivar recent:
    :vartype recent: bool
    """

    alexa_rank: Optional[int] = rest_field(name="alexaRank")
    category: Optional[str] = rest_field()
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    count: Optional[int] = rest_field()
    recent: Optional[bool] = rest_field()

    @overload
    def __init__(
        self,
        *,
        alexa_rank: Optional[int] = None,
        category: Optional[str] = None,
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        count: Optional[int] = None,
        recent: Optional[bool] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AsAsset(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """AsAsset.

    :ivar asn:
    :vartype asn: int
    :ivar as_names:
    :vartype as_names: list[~azure.defender.easm.models.ObservedString]
    :ivar org_names:
    :vartype org_names: list[~azure.defender.easm.models.ObservedString]
    :ivar org_ids:
    :vartype org_ids: list[~azure.defender.easm.models.ObservedString]
    :ivar countries:
    :vartype countries: list[~azure.defender.easm.models.ObservedString]
    :ivar registries:
    :vartype registries: list[~azure.defender.easm.models.ObservedString]
    :ivar sources:
    :vartype sources: list[~azure.defender.easm.models.Source]
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar count:
    :vartype count: int
    :ivar registrar_created_at:
    :vartype registrar_created_at: list[~azure.defender.easm.models.ObservedLong]
    :ivar registrar_updated_at:
    :vartype registrar_updated_at: list[~azure.defender.easm.models.ObservedLong]
    :ivar registrant_contacts:
    :vartype registrant_contacts: list[~azure.defender.easm.models.ObservedString]
    :ivar admin_contacts:
    :vartype admin_contacts: list[~azure.defender.easm.models.ObservedString]
    :ivar technical_contacts:
    :vartype technical_contacts: list[~azure.defender.easm.models.ObservedString]
    :ivar registrar_names:
    :vartype registrar_names: list[~azure.defender.easm.models.ObservedString]
    :ivar registrant_names:
    :vartype registrant_names: list[~azure.defender.easm.models.ObservedString]
    :ivar admin_names:
    :vartype admin_names: list[~azure.defender.easm.models.ObservedString]
    :ivar technical_names:
    :vartype technical_names: list[~azure.defender.easm.models.ObservedString]
    :ivar admin_orgs:
    :vartype admin_orgs: list[~azure.defender.easm.models.ObservedString]
    :ivar technical_orgs:
    :vartype technical_orgs: list[~azure.defender.easm.models.ObservedString]
    :ivar registrant_phones:
    :vartype registrant_phones: list[~azure.defender.easm.models.ObservedString]
    :ivar admin_phones:
    :vartype admin_phones: list[~azure.defender.easm.models.ObservedString]
    :ivar technical_phones:
    :vartype technical_phones: list[~azure.defender.easm.models.ObservedString]
    :ivar detailed_from_whois_at:
    :vartype detailed_from_whois_at: ~datetime.datetime
    """

    asn: Optional[int] = rest_field()
    as_names: Optional[List["_models.ObservedString"]] = rest_field(name="asNames")
    org_names: Optional[List["_models.ObservedString"]] = rest_field(name="orgNames")
    org_ids: Optional[List["_models.ObservedString"]] = rest_field(name="orgIds")
    countries: Optional[List["_models.ObservedString"]] = rest_field()
    registries: Optional[List["_models.ObservedString"]] = rest_field()
    sources: Optional[List["_models.Source"]] = rest_field()
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    count: Optional[int] = rest_field()
    registrar_created_at: Optional[List["_models.ObservedLong"]] = rest_field(name="registrarCreatedAt")
    registrar_updated_at: Optional[List["_models.ObservedLong"]] = rest_field(name="registrarUpdatedAt")
    registrant_contacts: Optional[List["_models.ObservedString"]] = rest_field(name="registrantContacts")
    admin_contacts: Optional[List["_models.ObservedString"]] = rest_field(name="adminContacts")
    technical_contacts: Optional[List["_models.ObservedString"]] = rest_field(name="technicalContacts")
    registrar_names: Optional[List["_models.ObservedString"]] = rest_field(name="registrarNames")
    registrant_names: Optional[List["_models.ObservedString"]] = rest_field(name="registrantNames")
    admin_names: Optional[List["_models.ObservedString"]] = rest_field(name="adminNames")
    technical_names: Optional[List["_models.ObservedString"]] = rest_field(name="technicalNames")
    admin_orgs: Optional[List["_models.ObservedString"]] = rest_field(name="adminOrgs")
    technical_orgs: Optional[List["_models.ObservedString"]] = rest_field(name="technicalOrgs")
    registrant_phones: Optional[List["_models.ObservedString"]] = rest_field(name="registrantPhones")
    admin_phones: Optional[List["_models.ObservedString"]] = rest_field(name="adminPhones")
    technical_phones: Optional[List["_models.ObservedString"]] = rest_field(name="technicalPhones")
    detailed_from_whois_at: Optional[datetime.datetime] = rest_field(name="detailedFromWhoisAt")

    @overload
    def __init__(
        self,
        *,
        asn: Optional[int] = None,
        as_names: Optional[List["_models.ObservedString"]] = None,
        org_names: Optional[List["_models.ObservedString"]] = None,
        org_ids: Optional[List["_models.ObservedString"]] = None,
        countries: Optional[List["_models.ObservedString"]] = None,
        registries: Optional[List["_models.ObservedString"]] = None,
        sources: Optional[List["_models.Source"]] = None,
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        count: Optional[int] = None,
        registrar_created_at: Optional[List["_models.ObservedLong"]] = None,
        registrar_updated_at: Optional[List["_models.ObservedLong"]] = None,
        registrant_contacts: Optional[List["_models.ObservedString"]] = None,
        admin_contacts: Optional[List["_models.ObservedString"]] = None,
        technical_contacts: Optional[List["_models.ObservedString"]] = None,
        registrar_names: Optional[List["_models.ObservedString"]] = None,
        registrant_names: Optional[List["_models.ObservedString"]] = None,
        admin_names: Optional[List["_models.ObservedString"]] = None,
        technical_names: Optional[List["_models.ObservedString"]] = None,
        admin_orgs: Optional[List["_models.ObservedString"]] = None,
        technical_orgs: Optional[List["_models.ObservedString"]] = None,
        registrant_phones: Optional[List["_models.ObservedString"]] = None,
        admin_phones: Optional[List["_models.ObservedString"]] = None,
        technical_phones: Optional[List["_models.ObservedString"]] = None,
        detailed_from_whois_at: Optional[datetime.datetime] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AssetResponse(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """AssetResponse.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AsAssetResponse, ContactAssetResponse, DomainAssetResponse, HostAssetResponse,
    IpAddressAssetResponse, IpBlockAssetResponse, PageAssetResponse, SslCertAssetResponse

    All required parameters must be populated in order to send to Azure.

    :ivar id: The system generated unique id for the resource.
    :vartype id: str
    :ivar name: The caller provided unique name for the resource.
    :vartype name: str
    :ivar display_name: The name that can be used for display purposes.
    :vartype display_name: str
    :ivar uuid: Global UUID for the asset.
    :vartype uuid: str
    :ivar asset: Required.
    :vartype asset: any
    :ivar created_date: The date this asset was first added to this workspace.
    :vartype created_date: ~datetime.datetime
    :ivar updated_date: The date this asset was last updated for this workspace.
    :vartype updated_date: ~datetime.datetime
    :ivar state: Known values are: "candidate", "confirmed", "dismissed", "candidateInvestigate",
     "associatedPartner", "associatedThirdparty", and "archived".
    :vartype state: str or ~azure.defender.easm.models.AssetState
    :ivar external_id: An optional customer provided identifier for this asset.
    :vartype external_id: str
    :ivar labels: Customer labels assigned to this asset.
    :vartype labels: list[str]
    :ivar wildcard: An indicator of whether this asset represents a wildcard rollup of assets on
     this domain.
    :vartype wildcard: bool
    :ivar disco_group_name: The name of the DiscoveryGroup that brought added this asset to the
     workspace.
    :vartype disco_group_name: str
    :ivar audit_trail: The history of how this asset was pulled into the workspace through the
     discovery process.
    :vartype audit_trail: list[~azure.defender.easm.models.AuditTrailItem]
    :ivar reason:
    :vartype reason: str
    :ivar kind: Required. Default value is None.
    :vartype kind: str
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    id: Optional[str] = rest_field()
    """The system generated unique id for the resource."""
    name: Optional[str] = rest_field()
    """The caller provided unique name for the resource."""
    display_name: Optional[str] = rest_field(name="displayName")
    """The name that can be used for display purposes."""
    uuid: Optional[str] = rest_field()
    """Global UUID for the asset."""
    asset: Any = rest_field()
    """Required."""
    created_date: Optional[datetime.datetime] = rest_field(name="createdDate")
    """The date this asset was first added to this workspace."""
    updated_date: Optional[datetime.datetime] = rest_field(name="updatedDate")
    """The date this asset was last updated for this workspace."""
    state: Optional[Union[str, "_models.AssetState"]] = rest_field()
    """Known values are: \"candidate\", \"confirmed\", \"dismissed\", \"candidateInvestigate\",
     \"associatedPartner\", \"associatedThirdparty\", and \"archived\"."""
    external_id: Optional[str] = rest_field(name="externalId")
    """An optional customer provided identifier for this asset."""
    labels: Optional[List[str]] = rest_field()
    """Customer labels assigned to this asset."""
    wildcard: Optional[bool] = rest_field()
    """An indicator of whether this asset represents a wildcard rollup of assets on this domain."""
    disco_group_name: Optional[str] = rest_field(name="discoGroupName")
    """The name of the DiscoveryGroup that brought added this asset to the workspace."""
    audit_trail: Optional[List["_models.AuditTrailItem"]] = rest_field(name="auditTrail")
    """The history of how this asset was pulled into the workspace through the discovery process."""
    reason: Optional[str] = rest_field()
    kind: Literal[None] = rest_discriminator(name="kind")
    """Required. Default value is None."""

    @overload
    def __init__(
        self,
        *,
        asset: Any,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        display_name: Optional[str] = None,
        uuid: Optional[str] = None,
        created_date: Optional[datetime.datetime] = None,
        updated_date: Optional[datetime.datetime] = None,
        state: Optional[Union[str, "_models.AssetState"]] = None,
        external_id: Optional[str] = None,
        labels: Optional[List[str]] = None,
        wildcard: Optional[bool] = None,
        disco_group_name: Optional[str] = None,
        audit_trail: Optional[List["_models.AuditTrailItem"]] = None,
        reason: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.kind: Literal[None] = None


class AsAssetResponse(AssetResponse, discriminator="as"):  # pylint: disable=too-many-instance-attributes
    """AsAssetResponse.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The system generated unique id for the resource.
    :vartype id: str
    :ivar name: The caller provided unique name for the resource.
    :vartype name: str
    :ivar display_name: The name that can be used for display purposes.
    :vartype display_name: str
    :ivar uuid: Global UUID for the asset.
    :vartype uuid: str
    :ivar created_date: The date this asset was first added to this workspace.
    :vartype created_date: ~datetime.datetime
    :ivar updated_date: The date this asset was last updated for this workspace.
    :vartype updated_date: ~datetime.datetime
    :ivar state: Known values are: "candidate", "confirmed", "dismissed", "candidateInvestigate",
     "associatedPartner", "associatedThirdparty", and "archived".
    :vartype state: str or ~azure.defender.easm.models.AssetState
    :ivar external_id: An optional customer provided identifier for this asset.
    :vartype external_id: str
    :ivar labels: Customer labels assigned to this asset.
    :vartype labels: list[str]
    :ivar wildcard: An indicator of whether this asset represents a wildcard rollup of assets on
     this domain.
    :vartype wildcard: bool
    :ivar disco_group_name: The name of the DiscoveryGroup that brought added this asset to the
     workspace.
    :vartype disco_group_name: str
    :ivar audit_trail: The history of how this asset was pulled into the workspace through the
     discovery process.
    :vartype audit_trail: list[~azure.defender.easm.models.AuditTrailItem]
    :ivar reason:
    :vartype reason: str
    :ivar kind: Required. Default value is "as".
    :vartype kind: str
    :ivar asset: Required.
    :vartype asset: ~azure.defender.easm.models.AsAsset
    """

    kind: Literal["as"] = rest_discriminator(name="kind")  # type: ignore
    """Required. Default value is \"as\"."""
    asset: "_models.AsAsset" = rest_field()
    """Required."""

    @overload
    def __init__(
        self,
        *,
        asset: "_models.AsAsset",
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        display_name: Optional[str] = None,
        uuid: Optional[str] = None,
        created_date: Optional[datetime.datetime] = None,
        updated_date: Optional[datetime.datetime] = None,
        state: Optional[Union[str, "_models.AssetState"]] = None,
        external_id: Optional[str] = None,
        labels: Optional[List[str]] = None,
        wildcard: Optional[bool] = None,
        disco_group_name: Optional[str] = None,
        audit_trail: Optional[List["_models.AuditTrailItem"]] = None,
        reason: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.kind: Literal["as"] = "as"


class AssetPageResponse(_model_base.Model):
    """AssetPageResponse.

    All required parameters must be populated in order to send to Azure.

    :ivar total_elements: The total number of items available in the full result set.
    :vartype total_elements: int
    :ivar mark: The cursor mark to be used on the next request.  Not set if using paging.
    :vartype mark: str
    :ivar next_link: The link to access the next page of results.  Not set if at the end of the
     result set.
    :vartype next_link: str
    :ivar value: The items in the current page of results. Required.
    :vartype value: list[~azure.defender.easm.models.AssetResponse]
    """

    total_elements: Optional[int] = rest_field(name="totalElements")
    """The total number of items available in the full result set."""
    mark: Optional[str] = rest_field()
    """The cursor mark to be used on the next request.  Not set if using paging."""
    next_link: Optional[str] = rest_field(name="nextLink")
    """The link to access the next page of results.  Not set if at the end of the result set."""
    value: List["_models.AssetResponse"] = rest_field()
    """The items in the current page of results. Required."""

    @overload
    def __init__(
        self,
        *,
        value: List["_models.AssetResponse"],
        total_elements: Optional[int] = None,
        mark: Optional[str] = None,
        next_link: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AssetSecurityPolicy(_model_base.Model):
    """AssetSecurityPolicy.

    :ivar policy_name:
    :vartype policy_name: str
    :ivar is_affected:
    :vartype is_affected: bool
    :ivar description:
    :vartype description: str
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar count:
    :vartype count: int
    :ivar recent:
    :vartype recent: bool
    :ivar sources:
    :vartype sources: list[~azure.defender.easm.models.Source]
    """

    policy_name: Optional[str] = rest_field(name="policyName")
    is_affected: Optional[bool] = rest_field(name="isAffected")
    description: Optional[str] = rest_field()
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    count: Optional[int] = rest_field()
    recent: Optional[bool] = rest_field()
    sources: Optional[List["_models.Source"]] = rest_field()

    @overload
    def __init__(
        self,
        *,
        policy_name: Optional[str] = None,
        is_affected: Optional[bool] = None,
        description: Optional[str] = None,
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        count: Optional[int] = None,
        recent: Optional[bool] = None,
        sources: Optional[List["_models.Source"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AssetSummaryResponse(_model_base.Model):
    """AssetSummaryResponse.

    :ivar display_name: The name of the summary response.  Depending on the request time this will
     either be the asset filter, risk category, or risk metric.
    :vartype display_name: str
    :ivar description: The description of the summary response.  Filters don't have a description.
    :vartype description: str
    :ivar updated_at: The last time risk categories or risk metrics were captured. Set to the
     current time for asset filter requests, which always pull the live asset data.
    :vartype updated_at: ~datetime.datetime
    :ivar metric_category: If the request is for a metric category, this will contain the requested
     unique category name.
    :vartype metric_category: str
    :ivar metric: If the request is for a metric, this will contain the requested unique metric
     name.
    :vartype metric: str
    :ivar filter: If the request is for an asset filter, this will contain the corresponding
     filter.
    :vartype filter: str
    :ivar label_name: An optional label used to filter requests results.
    :vartype label_name: str
    :ivar count: The count of assets matching the request parameters.
    :vartype count: int
    :ivar link: The link to the corresponding asset details.
    :vartype link: str
    :ivar children: The corresponding child entities.  For metric categories this will contain
     metrics.  For filters with groupBy and segmentBy this will contain facets.
    :vartype children: list[~azure.defender.easm.models.AssetSummaryResponse]
    """

    display_name: Optional[str] = rest_field(name="displayName")
    """The name of the summary response.  Depending on the request time this will either be the asset
     filter, risk category, or risk metric."""
    description: Optional[str] = rest_field()
    """The description of the summary response.  Filters don't have a description."""
    updated_at: Optional[datetime.datetime] = rest_field(name="updatedAt")
    """The last time risk categories or risk metrics were captured. Set to the current time for asset
     filter requests, which always pull the live asset data."""
    metric_category: Optional[str] = rest_field(name="metricCategory")
    """If the request is for a metric category, this will contain the requested unique category name."""
    metric: Optional[str] = rest_field()
    """If the request is for a metric, this will contain the requested unique metric name."""
    filter: Optional[str] = rest_field()
    """If the request is for an asset filter, this will contain the corresponding filter."""
    label_name: Optional[str] = rest_field(name="labelName")
    """An optional label used to filter requests results."""
    count: Optional[int] = rest_field()
    """The count of assets matching the request parameters."""
    link: Optional[str] = rest_field()
    """The link to the corresponding asset details."""
    children: Optional[List["_models.AssetSummaryResponse"]] = rest_field()
    """The corresponding child entities.  For metric categories this will contain metrics.  For
     filters with groupBy and segmentBy this will contain facets."""

    @overload
    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        updated_at: Optional[datetime.datetime] = None,
        metric_category: Optional[str] = None,
        metric: Optional[str] = None,
        filter: Optional[str] = None,  # pylint: disable=redefined-builtin
        label_name: Optional[str] = None,
        count: Optional[int] = None,
        link: Optional[str] = None,
        children: Optional[List["_models.AssetSummaryResponse"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AssetUpdateRequest(_model_base.Model):
    """AssetUpdateRequest.

    :ivar state: The state to update the asset to. Known values are: "candidate", "confirmed",
     "dismissed", "candidateInvestigate", "associatedPartner", and "associatedThirdparty".
    :vartype state: str or ~azure.defender.easm.models.AssetUpdateState
    :ivar external_id: A string which can be used to identify the asset in external systems.
    :vartype external_id: str
    :ivar labels: Any Labels to update the asset with.
    :vartype labels: any
    :ivar transfers: A list of asset types to cascade the updates to. Known values are: "as",
     "contact", "domain", "host", "ipAddress", "ipBlock", "page", and "sslCert".
    :vartype transfers: str or ~azure.defender.easm.models.AssetUpdateTransfers
    """

    state: Optional[Union[str, "_models.AssetUpdateState"]] = rest_field()
    """The state to update the asset to. Known values are: \"candidate\", \"confirmed\",
     \"dismissed\", \"candidateInvestigate\", \"associatedPartner\", and \"associatedThirdparty\"."""
    external_id: Optional[str] = rest_field(name="externalId")
    """A string which can be used to identify the asset in external systems."""
    labels: Optional[Any] = rest_field()
    """Any Labels to update the asset with."""
    transfers: Optional[Union[str, "_models.AssetUpdateTransfers"]] = rest_field()
    """A list of asset types to cascade the updates to. Known values are: \"as\", \"contact\",
     \"domain\", \"host\", \"ipAddress\", \"ipBlock\", \"page\", and \"sslCert\"."""

    @overload
    def __init__(
        self,
        *,
        state: Optional[Union[str, "_models.AssetUpdateState"]] = None,
        external_id: Optional[str] = None,
        labels: Optional[Any] = None,
        transfers: Optional[Union[str, "_models.AssetUpdateTransfers"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Attribute(_model_base.Model):
    """Attribute.

    :ivar attribute_type:
    :vartype attribute_type: str
    :ivar attribute_value:
    :vartype attribute_value: str
    :ivar sources:
    :vartype sources: list[~azure.defender.easm.models.Source]
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar count:
    :vartype count: int
    :ivar recent:
    :vartype recent: bool
    """

    attribute_type: Optional[str] = rest_field(name="attributeType")
    attribute_value: Optional[str] = rest_field(name="attributeValue")
    sources: Optional[List["_models.Source"]] = rest_field()
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    count: Optional[int] = rest_field()
    recent: Optional[bool] = rest_field()

    @overload
    def __init__(
        self,
        *,
        attribute_type: Optional[str] = None,
        attribute_value: Optional[str] = None,
        sources: Optional[List["_models.Source"]] = None,
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        count: Optional[int] = None,
        recent: Optional[bool] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AuditTrailItem(_model_base.Model):
    """AuditTrailItem.

    :ivar id: The system generated unique id for the resource.
    :vartype id: str
    :ivar name: The caller provided unique name for the resource.
    :vartype name: str
    :ivar display_name: The name that can be used for display purposes.
    :vartype display_name: str
    :ivar kind: The kind of asset. Known values are: "as", "contact", "domain", "host",
     "ipAddress", "ipBlock", "page", and "sslCert".
    :vartype kind: str or ~azure.defender.easm.models.AuditTrailItemKind
    :ivar reason: An explanation of why this audit trail node was discovered from the previous
     node.
    :vartype reason: str
    """

    id: Optional[str] = rest_field()
    """The system generated unique id for the resource."""
    name: Optional[str] = rest_field()
    """The caller provided unique name for the resource."""
    display_name: Optional[str] = rest_field(name="displayName")
    """The name that can be used for display purposes."""
    kind: Optional[Union[str, "_models.AuditTrailItemKind"]] = rest_field()
    """The kind of asset. Known values are: \"as\", \"contact\", \"domain\", \"host\", \"ipAddress\",
     \"ipBlock\", \"page\", and \"sslCert\"."""
    reason: Optional[str] = rest_field()
    """An explanation of why this audit trail node was discovered from the previous node."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        display_name: Optional[str] = None,
        kind: Optional[Union[str, "_models.AuditTrailItemKind"]] = None,
        reason: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AzureDataExplorerDataConnectionProperties(_model_base.Model):
    """AzureDataExplorerDataConnectionProperties.

    :ivar cluster_name: The azure data explorer cluster name.
    :vartype cluster_name: str
    :ivar region: The azure data explorer region.
    :vartype region: str
    :ivar database_name: The azure data explorer database name.
    :vartype database_name: str
    """

    cluster_name: Optional[str] = rest_field(name="clusterName")
    """The azure data explorer cluster name."""
    region: Optional[str] = rest_field()
    """The azure data explorer region."""
    database_name: Optional[str] = rest_field(name="databaseName")
    """The azure data explorer database name."""

    @overload
    def __init__(
        self,
        *,
        cluster_name: Optional[str] = None,
        region: Optional[str] = None,
        database_name: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DataConnectionRequest(_model_base.Model):
    """DataConnectionRequest.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AzureDataExplorerDataConnectionRequest, LogAnalyticsDataConnectionRequest

    All required parameters must be populated in order to send to Azure.

    :ivar name: The name of data connection.
    :vartype name: str
    :ivar content: The type of data the data connection will transfer. Known values are: "assets"
     and "attackSurfaceInsights".
    :vartype content: str or ~azure.defender.easm.models.DataConnectionContent
    :ivar properties: Required.
    :vartype properties: any
    :ivar frequency: The rate at which the data connection will receive updates. Known values are:
     "daily", "weekly", and "monthly".
    :vartype frequency: str or ~azure.defender.easm.models.DataConnectionFrequency
    :ivar frequency_offset: The day to update the data connection on. (1-7 for weekly, 1-31 for
     monthly).
    :vartype frequency_offset: int
    :ivar kind: Required. Default value is None.
    :vartype kind: str
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    name: Optional[str] = rest_field()
    """The name of data connection."""
    content: Optional[Union[str, "_models.DataConnectionContent"]] = rest_field()
    """The type of data the data connection will transfer. Known values are: \"assets\" and
     \"attackSurfaceInsights\"."""
    properties: Any = rest_field()
    """Required."""
    frequency: Optional[Union[str, "_models.DataConnectionFrequency"]] = rest_field()
    """The rate at which the data connection will receive updates. Known values are: \"daily\",
     \"weekly\", and \"monthly\"."""
    frequency_offset: Optional[int] = rest_field(name="frequencyOffset")
    """The day to update the data connection on. (1-7 for weekly, 1-31 for monthly)."""
    kind: Literal[None] = rest_discriminator(name="kind")
    """Required. Default value is None."""

    @overload
    def __init__(
        self,
        *,
        properties: Any,
        name: Optional[str] = None,
        content: Optional[Union[str, "_models.DataConnectionContent"]] = None,
        frequency: Optional[Union[str, "_models.DataConnectionFrequency"]] = None,
        frequency_offset: Optional[int] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.kind: Literal[None] = None


class AzureDataExplorerDataConnectionRequest(DataConnectionRequest, discriminator="azureDataExplorer"):
    """AzureDataExplorerDataConnectionRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar name: The name of data connection.
    :vartype name: str
    :ivar content: The type of data the data connection will transfer. Known values are: "assets"
     and "attackSurfaceInsights".
    :vartype content: str or ~azure.defender.easm.models.DataConnectionContent
    :ivar frequency: The rate at which the data connection will receive updates. Known values are:
     "daily", "weekly", and "monthly".
    :vartype frequency: str or ~azure.defender.easm.models.DataConnectionFrequency
    :ivar frequency_offset: The day to update the data connection on. (1-7 for weekly, 1-31 for
     monthly).
    :vartype frequency_offset: int
    :ivar kind: Required. Default value is "azureDataExplorer".
    :vartype kind: str
    :ivar properties: Required.
    :vartype properties: ~azure.defender.easm.models.AzureDataExplorerDataConnectionProperties
    """

    kind: Literal["azureDataExplorer"] = rest_discriminator(name="kind")  # type: ignore
    """Required. Default value is \"azureDataExplorer\"."""
    properties: "_models.AzureDataExplorerDataConnectionProperties" = rest_field()
    """Required."""

    @overload
    def __init__(
        self,
        *,
        properties: "_models.AzureDataExplorerDataConnectionProperties",
        name: Optional[str] = None,
        content: Optional[Union[str, "_models.DataConnectionContent"]] = None,
        frequency: Optional[Union[str, "_models.DataConnectionFrequency"]] = None,
        frequency_offset: Optional[int] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.kind: Literal["azureDataExplorer"] = "azureDataExplorer"


class DataConnectionResponse(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """DataConnectionResponse.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AzureDataExplorerDataConnectionResponse, LogAnalyticsDataConnectionResponse

    All required parameters must be populated in order to send to Azure.

    :ivar id: The system generated unique id for the resource.
    :vartype id: str
    :ivar name: The caller provided unique name for the resource.
    :vartype name: str
    :ivar display_name: The name that can be used for display purposes.
    :vartype display_name: str
    :ivar content: The type of data the data connection will transfer. Known values are: "assets"
     and "attackSurfaceInsights".
    :vartype content: str or ~azure.defender.easm.models.DataConnectionContent
    :ivar properties: Required.
    :vartype properties: any
    :ivar created_date: The date the data connection was created.
    :vartype created_date: ~datetime.datetime
    :ivar frequency: The rate at which the data connection will receive updates. Known values are:
     "daily", "weekly", and "monthly".
    :vartype frequency: str or ~azure.defender.easm.models.DataConnectionFrequency
    :ivar frequency_offset: The day to update the data connection on.
    :vartype frequency_offset: int
    :ivar updated_date: The date the data connection was last updated.
    :vartype updated_date: ~datetime.datetime
    :ivar user_updated_at: The date the data connection was last updated by user.
    :vartype user_updated_at: ~datetime.datetime
    :ivar active: An indicator of whether the data connection is active.
    :vartype active: bool
    :ivar inactive_message: A message that specifies details about data connection if inactive.
    :vartype inactive_message: str
    :ivar kind: Required. Default value is None.
    :vartype kind: str
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    id: Optional[str] = rest_field()
    """The system generated unique id for the resource."""
    name: Optional[str] = rest_field()
    """The caller provided unique name for the resource."""
    display_name: Optional[str] = rest_field(name="displayName")
    """The name that can be used for display purposes."""
    content: Optional[Union[str, "_models.DataConnectionContent"]] = rest_field()
    """The type of data the data connection will transfer. Known values are: \"assets\" and
     \"attackSurfaceInsights\"."""
    properties: Any = rest_field()
    """Required."""
    created_date: Optional[datetime.datetime] = rest_field(name="createdDate")
    """The date the data connection was created."""
    frequency: Optional[Union[str, "_models.DataConnectionFrequency"]] = rest_field()
    """The rate at which the data connection will receive updates. Known values are: \"daily\",
     \"weekly\", and \"monthly\"."""
    frequency_offset: Optional[int] = rest_field(name="frequencyOffset")
    """The day to update the data connection on."""
    updated_date: Optional[datetime.datetime] = rest_field(name="updatedDate")
    """The date the data connection was last updated."""
    user_updated_at: Optional[datetime.datetime] = rest_field(name="userUpdatedAt")
    """The date the data connection was last updated by user."""
    active: Optional[bool] = rest_field()
    """An indicator of whether the data connection is active."""
    inactive_message: Optional[str] = rest_field(name="inactiveMessage")
    """A message that specifies details about data connection if inactive."""
    kind: Literal[None] = rest_discriminator(name="kind")
    """Required. Default value is None."""

    @overload
    def __init__(
        self,
        *,
        properties: Any,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        display_name: Optional[str] = None,
        content: Optional[Union[str, "_models.DataConnectionContent"]] = None,
        created_date: Optional[datetime.datetime] = None,
        frequency: Optional[Union[str, "_models.DataConnectionFrequency"]] = None,
        frequency_offset: Optional[int] = None,
        updated_date: Optional[datetime.datetime] = None,
        user_updated_at: Optional[datetime.datetime] = None,
        active: Optional[bool] = None,
        inactive_message: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.kind: Literal[None] = None


class AzureDataExplorerDataConnectionResponse(
    DataConnectionResponse, discriminator="azureDataExplorer"
):  # pylint: disable=too-many-instance-attributes
    """AzureDataExplorerDataConnectionResponse.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The system generated unique id for the resource.
    :vartype id: str
    :ivar name: The caller provided unique name for the resource.
    :vartype name: str
    :ivar display_name: The name that can be used for display purposes.
    :vartype display_name: str
    :ivar content: The type of data the data connection will transfer. Known values are: "assets"
     and "attackSurfaceInsights".
    :vartype content: str or ~azure.defender.easm.models.DataConnectionContent
    :ivar created_date: The date the data connection was created.
    :vartype created_date: ~datetime.datetime
    :ivar frequency: The rate at which the data connection will receive updates. Known values are:
     "daily", "weekly", and "monthly".
    :vartype frequency: str or ~azure.defender.easm.models.DataConnectionFrequency
    :ivar frequency_offset: The day to update the data connection on.
    :vartype frequency_offset: int
    :ivar updated_date: The date the data connection was last updated.
    :vartype updated_date: ~datetime.datetime
    :ivar user_updated_at: The date the data connection was last updated by user.
    :vartype user_updated_at: ~datetime.datetime
    :ivar active: An indicator of whether the data connection is active.
    :vartype active: bool
    :ivar inactive_message: A message that specifies details about data connection if inactive.
    :vartype inactive_message: str
    :ivar kind: Required. Default value is "azureDataExplorer".
    :vartype kind: str
    :ivar properties: Required.
    :vartype properties: ~azure.defender.easm.models.AzureDataExplorerDataConnectionProperties
    """

    kind: Literal["azureDataExplorer"] = rest_discriminator(name="kind")  # type: ignore
    """Required. Default value is \"azureDataExplorer\"."""
    properties: "_models.AzureDataExplorerDataConnectionProperties" = rest_field()
    """Required."""

    @overload
    def __init__(
        self,
        *,
        properties: "_models.AzureDataExplorerDataConnectionProperties",
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        display_name: Optional[str] = None,
        content: Optional[Union[str, "_models.DataConnectionContent"]] = None,
        created_date: Optional[datetime.datetime] = None,
        frequency: Optional[Union[str, "_models.DataConnectionFrequency"]] = None,
        frequency_offset: Optional[int] = None,
        updated_date: Optional[datetime.datetime] = None,
        user_updated_at: Optional[datetime.datetime] = None,
        active: Optional[bool] = None,
        inactive_message: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.kind: Literal["azureDataExplorer"] = "azureDataExplorer"


class Banner(_model_base.Model):
    """Banner.

    :ivar port:
    :vartype port: int
    :ivar banner:
    :vartype banner: str
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar count:
    :vartype count: int
    :ivar scan_type:
    :vartype scan_type: str
    :ivar banner_metadata:
    :vartype banner_metadata: str
    :ivar recent:
    :vartype recent: bool
    :ivar sha256:
    :vartype sha256: str
    :ivar sources:
    :vartype sources: list[~azure.defender.easm.models.Source]
    """

    port: Optional[int] = rest_field()
    banner: Optional[str] = rest_field()
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    count: Optional[int] = rest_field()
    scan_type: Optional[str] = rest_field(name="scanType")
    banner_metadata: Optional[str] = rest_field(name="bannerMetadata")
    recent: Optional[bool] = rest_field()
    sha256: Optional[str] = rest_field()
    sources: Optional[List["_models.Source"]] = rest_field()

    @overload
    def __init__(
        self,
        *,
        port: Optional[int] = None,
        banner: Optional[str] = None,
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        count: Optional[int] = None,
        scan_type: Optional[str] = None,
        banner_metadata: Optional[str] = None,
        recent: Optional[bool] = None,
        sha256: Optional[str] = None,
        sources: Optional[List["_models.Source"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ContactAsset(_model_base.Model):
    """ContactAsset.

    :ivar email:
    :vartype email: str
    :ivar names:
    :vartype names: list[~azure.defender.easm.models.ObservedString]
    :ivar organizations:
    :vartype organizations: list[~azure.defender.easm.models.ObservedString]
    :ivar sources:
    :vartype sources: list[~azure.defender.easm.models.Source]
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar count:
    :vartype count: int
    """

    email: Optional[str] = rest_field()
    names: Optional[List["_models.ObservedString"]] = rest_field()
    organizations: Optional[List["_models.ObservedString"]] = rest_field()
    sources: Optional[List["_models.Source"]] = rest_field()
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    count: Optional[int] = rest_field()

    @overload
    def __init__(
        self,
        *,
        email: Optional[str] = None,
        names: Optional[List["_models.ObservedString"]] = None,
        organizations: Optional[List["_models.ObservedString"]] = None,
        sources: Optional[List["_models.Source"]] = None,
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        count: Optional[int] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ContactAssetResponse(AssetResponse, discriminator="contact"):  # pylint: disable=too-many-instance-attributes
    """ContactAssetResponse.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The system generated unique id for the resource.
    :vartype id: str
    :ivar name: The caller provided unique name for the resource.
    :vartype name: str
    :ivar display_name: The name that can be used for display purposes.
    :vartype display_name: str
    :ivar uuid: Global UUID for the asset.
    :vartype uuid: str
    :ivar created_date: The date this asset was first added to this workspace.
    :vartype created_date: ~datetime.datetime
    :ivar updated_date: The date this asset was last updated for this workspace.
    :vartype updated_date: ~datetime.datetime
    :ivar state: Known values are: "candidate", "confirmed", "dismissed", "candidateInvestigate",
     "associatedPartner", "associatedThirdparty", and "archived".
    :vartype state: str or ~azure.defender.easm.models.AssetState
    :ivar external_id: An optional customer provided identifier for this asset.
    :vartype external_id: str
    :ivar labels: Customer labels assigned to this asset.
    :vartype labels: list[str]
    :ivar wildcard: An indicator of whether this asset represents a wildcard rollup of assets on
     this domain.
    :vartype wildcard: bool
    :ivar disco_group_name: The name of the DiscoveryGroup that brought added this asset to the
     workspace.
    :vartype disco_group_name: str
    :ivar audit_trail: The history of how this asset was pulled into the workspace through the
     discovery process.
    :vartype audit_trail: list[~azure.defender.easm.models.AuditTrailItem]
    :ivar reason:
    :vartype reason: str
    :ivar kind: Required. Default value is "contact".
    :vartype kind: str
    :ivar asset: Required.
    :vartype asset: ~azure.defender.easm.models.ContactAsset
    """

    kind: Literal["contact"] = rest_discriminator(name="kind")  # type: ignore
    """Required. Default value is \"contact\"."""
    asset: "_models.ContactAsset" = rest_field()
    """Required."""

    @overload
    def __init__(
        self,
        *,
        asset: "_models.ContactAsset",
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        display_name: Optional[str] = None,
        uuid: Optional[str] = None,
        created_date: Optional[datetime.datetime] = None,
        updated_date: Optional[datetime.datetime] = None,
        state: Optional[Union[str, "_models.AssetState"]] = None,
        external_id: Optional[str] = None,
        labels: Optional[List[str]] = None,
        wildcard: Optional[bool] = None,
        disco_group_name: Optional[str] = None,
        audit_trail: Optional[List["_models.AuditTrailItem"]] = None,
        reason: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.kind: Literal["contact"] = "contact"


class Cookie(_model_base.Model):
    """Cookie.

    :ivar cookie_name:
    :vartype cookie_name: str
    :ivar cookie_domain:
    :vartype cookie_domain: str
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar count:
    :vartype count: int
    :ivar recent:
    :vartype recent: bool
    :ivar cookie_expiry_date:
    :vartype cookie_expiry_date: ~datetime.datetime
    """

    cookie_name: Optional[str] = rest_field(name="cookieName")
    cookie_domain: Optional[str] = rest_field(name="cookieDomain")
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    count: Optional[int] = rest_field()
    recent: Optional[bool] = rest_field()
    cookie_expiry_date: Optional[datetime.datetime] = rest_field(name="cookieExpiryDate")

    @overload
    def __init__(
        self,
        *,
        cookie_name: Optional[str] = None,
        cookie_domain: Optional[str] = None,
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        count: Optional[int] = None,
        recent: Optional[bool] = None,
        cookie_expiry_date: Optional[datetime.datetime] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Cve(_model_base.Model):
    """Cve.

    All required parameters must be populated in order to send to Azure.

    :ivar name:
    :vartype name: str
    :ivar cwe_id:
    :vartype cwe_id: str
    :ivar cvss_score:
    :vartype cvss_score: float
    :ivar cvss3_summary: Required.
    :vartype cvss3_summary: ~azure.defender.easm.models.CVSS3Summary
    """

    name: Optional[str] = rest_field()
    cwe_id: Optional[str] = rest_field(name="cweId")
    cvss_score: Optional[float] = rest_field(name="cvssScore")
    cvss3_summary: "_models.CVSS3Summary" = rest_field(name="cvss3Summary")
    """Required."""

    @overload
    def __init__(
        self,
        *,
        cvss3_summary: "_models.CVSS3Summary",
        name: Optional[str] = None,
        cwe_id: Optional[str] = None,
        cvss_score: Optional[float] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class CVSS3Summary(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """CVSS3Summary.

    :ivar version:
    :vartype version: str
    :ivar vector_string:
    :vartype vector_string: str
    :ivar attack_vector:
    :vartype attack_vector: str
    :ivar attack_complexity:
    :vartype attack_complexity: str
    :ivar privileges_required:
    :vartype privileges_required: str
    :ivar user_interaction:
    :vartype user_interaction: str
    :ivar scope:
    :vartype scope: str
    :ivar confidentiality_impact:
    :vartype confidentiality_impact: str
    :ivar integrity_impact:
    :vartype integrity_impact: str
    :ivar availability_impact:
    :vartype availability_impact: str
    :ivar base_score:
    :vartype base_score: float
    :ivar base_severity:
    :vartype base_severity: str
    :ivar exploit_code_maturity:
    :vartype exploit_code_maturity: str
    :ivar remediation_level:
    :vartype remediation_level: str
    :ivar report_confidence:
    :vartype report_confidence: str
    :ivar exploitability_score:
    :vartype exploitability_score: float
    :ivar impact_score:
    :vartype impact_score: float
    """

    version: Optional[str] = rest_field()
    vector_string: Optional[str] = rest_field(name="vectorString")
    attack_vector: Optional[str] = rest_field(name="attackVector")
    attack_complexity: Optional[str] = rest_field(name="attackComplexity")
    privileges_required: Optional[str] = rest_field(name="privilegesRequired")
    user_interaction: Optional[str] = rest_field(name="userInteraction")
    scope: Optional[str] = rest_field()
    confidentiality_impact: Optional[str] = rest_field(name="confidentialityImpact")
    integrity_impact: Optional[str] = rest_field(name="integrityImpact")
    availability_impact: Optional[str] = rest_field(name="availabilityImpact")
    base_score: Optional[float] = rest_field(name="baseScore")
    base_severity: Optional[str] = rest_field(name="baseSeverity")
    exploit_code_maturity: Optional[str] = rest_field(name="exploitCodeMaturity")
    remediation_level: Optional[str] = rest_field(name="remediationLevel")
    report_confidence: Optional[str] = rest_field(name="reportConfidence")
    exploitability_score: Optional[float] = rest_field(name="exploitabilityScore")
    impact_score: Optional[float] = rest_field(name="impactScore")

    @overload
    def __init__(
        self,
        *,
        version: Optional[str] = None,
        vector_string: Optional[str] = None,
        attack_vector: Optional[str] = None,
        attack_complexity: Optional[str] = None,
        privileges_required: Optional[str] = None,
        user_interaction: Optional[str] = None,
        scope: Optional[str] = None,
        confidentiality_impact: Optional[str] = None,
        integrity_impact: Optional[str] = None,
        availability_impact: Optional[str] = None,
        base_score: Optional[float] = None,
        base_severity: Optional[str] = None,
        exploit_code_maturity: Optional[str] = None,
        remediation_level: Optional[str] = None,
        report_confidence: Optional[str] = None,
        exploitability_score: Optional[float] = None,
        impact_score: Optional[float] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DataConnectionPageResponse(_model_base.Model):
    """DataConnectionPageResponse.

    All required parameters must be populated in order to send to Azure.

    :ivar total_elements: The total number of items available in the full result set.
    :vartype total_elements: int
    :ivar next_link: The link to access the next page of results.  Not set if at the end of the
     result set.
    :vartype next_link: str
    :ivar value: The items in the current page of results. Required.
    :vartype value: list[~azure.defender.easm.models.DataConnectionResponse]
    """

    total_elements: Optional[int] = rest_field(name="totalElements")
    """The total number of items available in the full result set."""
    next_link: Optional[str] = rest_field(name="nextLink")
    """The link to access the next page of results.  Not set if at the end of the result set."""
    value: List["_models.DataConnectionResponse"] = rest_field()
    """The items in the current page of results. Required."""

    @overload
    def __init__(
        self,
        *,
        value: List["_models.DataConnectionResponse"],
        total_elements: Optional[int] = None,
        next_link: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DependentResource(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """DependentResource.

    :ivar md5:
    :vartype md5: str
    :ivar response_body_size:
    :vartype response_body_size: int
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar count:
    :vartype count: int
    :ivar first_seen_crawl_guid:
    :vartype first_seen_crawl_guid: str
    :ivar first_seen_page_guid:
    :vartype first_seen_page_guid: str
    :ivar first_seen_resource_guid:
    :vartype first_seen_resource_guid: str
    :ivar last_seen_crawl_guid:
    :vartype last_seen_crawl_guid: str
    :ivar last_seen_page_guid:
    :vartype last_seen_page_guid: str
    :ivar last_seen_resource_guid:
    :vartype last_seen_resource_guid: str
    :ivar response_body_minhash:
    :vartype response_body_minhash: list[int]
    :ivar content_type:
    :vartype content_type: str
    :ivar sha256:
    :vartype sha256: str
    :ivar sha384:
    :vartype sha384: str
    :ivar sha512:
    :vartype sha512: str
    :ivar url:
    :vartype url: str
    :ivar cached:
    :vartype cached: bool
    :ivar sri_checks:
    :vartype sri_checks: list[~azure.defender.easm.models.SubResourceIntegrityCheck]
    :ivar host:
    :vartype host: str
    :ivar last_observed_violation:
    :vartype last_observed_violation: ~datetime.datetime
    :ivar last_observed_validation:
    :vartype last_observed_validation: ~datetime.datetime
    :ivar last_observed_actual_sri_hash:
    :vartype last_observed_actual_sri_hash: str
    :ivar last_observed_expected_sri_hash:
    :vartype last_observed_expected_sri_hash: str
    """

    md5: Optional[str] = rest_field()
    response_body_size: Optional[int] = rest_field(name="responseBodySize")
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    count: Optional[int] = rest_field()
    first_seen_crawl_guid: Optional[str] = rest_field(name="firstSeenCrawlGuid")
    first_seen_page_guid: Optional[str] = rest_field(name="firstSeenPageGuid")
    first_seen_resource_guid: Optional[str] = rest_field(name="firstSeenResourceGuid")
    last_seen_crawl_guid: Optional[str] = rest_field(name="lastSeenCrawlGuid")
    last_seen_page_guid: Optional[str] = rest_field(name="lastSeenPageGuid")
    last_seen_resource_guid: Optional[str] = rest_field(name="lastSeenResourceGuid")
    response_body_minhash: Optional[List[int]] = rest_field(name="responseBodyMinhash")
    content_type: Optional[str] = rest_field(name="contentType")
    sha256: Optional[str] = rest_field()
    sha384: Optional[str] = rest_field()
    sha512: Optional[str] = rest_field()
    url: Optional[str] = rest_field()
    cached: Optional[bool] = rest_field()
    sri_checks: Optional[List["_models.SubResourceIntegrityCheck"]] = rest_field(name="sriChecks")
    host: Optional[str] = rest_field()
    last_observed_violation: Optional[datetime.datetime] = rest_field(name="lastObservedViolation")
    last_observed_validation: Optional[datetime.datetime] = rest_field(name="lastObservedValidation")
    last_observed_actual_sri_hash: Optional[str] = rest_field(name="lastObservedActualSriHash")
    last_observed_expected_sri_hash: Optional[str] = rest_field(name="lastObservedExpectedSriHash")

    @overload
    def __init__(
        self,
        *,
        md5: Optional[str] = None,
        response_body_size: Optional[int] = None,
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        count: Optional[int] = None,
        first_seen_crawl_guid: Optional[str] = None,
        first_seen_page_guid: Optional[str] = None,
        first_seen_resource_guid: Optional[str] = None,
        last_seen_crawl_guid: Optional[str] = None,
        last_seen_page_guid: Optional[str] = None,
        last_seen_resource_guid: Optional[str] = None,
        response_body_minhash: Optional[List[int]] = None,
        content_type: Optional[str] = None,
        sha256: Optional[str] = None,
        sha384: Optional[str] = None,
        sha512: Optional[str] = None,
        url: Optional[str] = None,
        cached: Optional[bool] = None,
        sri_checks: Optional[List["_models.SubResourceIntegrityCheck"]] = None,
        host: Optional[str] = None,
        last_observed_violation: Optional[datetime.datetime] = None,
        last_observed_validation: Optional[datetime.datetime] = None,
        last_observed_actual_sri_hash: Optional[str] = None,
        last_observed_expected_sri_hash: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DiscoGroupPageResponse(_model_base.Model):
    """DiscoGroupPageResponse.

    All required parameters must be populated in order to send to Azure.

    :ivar total_elements: The total number of items available in the full result set.
    :vartype total_elements: int
    :ivar next_link: The link to access the next page of results.  Not set if at the end of the
     result set.
    :vartype next_link: str
    :ivar value: The items in the current page of results. Required.
    :vartype value: list[~azure.defender.easm.models.DiscoGroupResponse]
    """

    total_elements: Optional[int] = rest_field(name="totalElements")
    """The total number of items available in the full result set."""
    next_link: Optional[str] = rest_field(name="nextLink")
    """The link to access the next page of results.  Not set if at the end of the result set."""
    value: List["_models.DiscoGroupResponse"] = rest_field()
    """The items in the current page of results. Required."""

    @overload
    def __init__(
        self,
        *,
        value: List["_models.DiscoGroupResponse"],
        total_elements: Optional[int] = None,
        next_link: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DiscoGroupRequest(_model_base.Model):
    """DiscoGroupRequest.

    :ivar name: The name for a disco group.
    :vartype name: str
    :ivar description: The description for a disco group.
    :vartype description: str
    :ivar tier: The tier for the disco group which will affect the algorithm used for the disco
     runs in this group.
    :vartype tier: str
    :ivar frequency_milliseconds: The frequency at which the disco group is supposed to be rerun in
     milliseconds.
    :vartype frequency_milliseconds: int
    :ivar seeds: The list of seeds used for the disco group runs.
    :vartype seeds: list[~azure.defender.easm.models.DiscoSource]
    :ivar names: The list of names used for the disco group runs.
    :vartype names: list[str]
    :ivar excludes: The list of excludes used for the disco group runs, aka assets to exclude from
     the discovery algorithm.
    :vartype excludes: list[~azure.defender.easm.models.DiscoSource]
    :ivar template_id: The unique identifier for the disco template used for the disco group
     creation.
    :vartype template_id: str
    """

    name: Optional[str] = rest_field()
    """The name for a disco group."""
    description: Optional[str] = rest_field()
    """The description for a disco group."""
    tier: Optional[str] = rest_field()
    """The tier for the disco group which will affect the algorithm used for the disco runs in this
     group."""
    frequency_milliseconds: Optional[int] = rest_field(name="frequencyMilliseconds")
    """The frequency at which the disco group is supposed to be rerun in milliseconds."""
    seeds: Optional[List["_models.DiscoSource"]] = rest_field()
    """The list of seeds used for the disco group runs."""
    names: Optional[List[str]] = rest_field()
    """The list of names used for the disco group runs."""
    excludes: Optional[List["_models.DiscoSource"]] = rest_field()
    """The list of excludes used for the disco group runs, aka assets to exclude from the discovery
     algorithm."""
    template_id: Optional[str] = rest_field(name="templateId")
    """The unique identifier for the disco template used for the disco group creation."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        description: Optional[str] = None,
        tier: Optional[str] = None,
        frequency_milliseconds: Optional[int] = None,
        seeds: Optional[List["_models.DiscoSource"]] = None,
        names: Optional[List[str]] = None,
        excludes: Optional[List["_models.DiscoSource"]] = None,
        template_id: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DiscoGroupResponse(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """DiscoGroupResponse.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The system generated unique id for the resource.
    :vartype id: str
    :ivar name: The caller provided unique name for the resource.
    :vartype name: str
    :ivar display_name: The name that can be used for display purposes.
    :vartype display_name: str
    :ivar description: The description for a disco group.
    :vartype description: str
    :ivar tier: The tier for the disco group which will affect the algorithm used for the disco
     runs in this group.
    :vartype tier: str
    :ivar frequency_milliseconds: The frequency at which the disco group is supposed to be rerun in
     milliseconds.
    :vartype frequency_milliseconds: int
    :ivar seeds: The list of seeds used for the disco group runs.
    :vartype seeds: list[~azure.defender.easm.models.DiscoSource]
    :ivar names: The list of names used for the disco group runs.
    :vartype names: list[str]
    :ivar excludes: The list of excludes used for the disco group runs, aka assets to exclude from
     the discovery algorithm.
    :vartype excludes: list[~azure.defender.easm.models.DiscoSource]
    :ivar latest_run: Required.
    :vartype latest_run: ~azure.defender.easm.models.DiscoRunResponse
    :ivar created_date: The date for the disco group was created.
    :vartype created_date: ~datetime.datetime
    :ivar template_id: The unique identifier for the disco template used for the disco group
     creation.
    :vartype template_id: str
    """

    id: Optional[str] = rest_field()
    """The system generated unique id for the resource."""
    name: Optional[str] = rest_field()
    """The caller provided unique name for the resource."""
    display_name: Optional[str] = rest_field(name="displayName")
    """The name that can be used for display purposes."""
    description: Optional[str] = rest_field()
    """The description for a disco group."""
    tier: Optional[str] = rest_field()
    """The tier for the disco group which will affect the algorithm used for the disco runs in this
     group."""
    frequency_milliseconds: Optional[int] = rest_field(name="frequencyMilliseconds")
    """The frequency at which the disco group is supposed to be rerun in milliseconds."""
    seeds: Optional[List["_models.DiscoSource"]] = rest_field()
    """The list of seeds used for the disco group runs."""
    names: Optional[List[str]] = rest_field()
    """The list of names used for the disco group runs."""
    excludes: Optional[List["_models.DiscoSource"]] = rest_field()
    """The list of excludes used for the disco group runs, aka assets to exclude from the discovery
     algorithm."""
    latest_run: "_models.DiscoRunResponse" = rest_field(name="latestRun")
    """Required."""
    created_date: Optional[datetime.datetime] = rest_field(name="createdDate")
    """The date for the disco group was created."""
    template_id: Optional[str] = rest_field(name="templateId")
    """The unique identifier for the disco template used for the disco group creation."""

    @overload
    def __init__(
        self,
        *,
        latest_run: "_models.DiscoRunResponse",
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        tier: Optional[str] = None,
        frequency_milliseconds: Optional[int] = None,
        seeds: Optional[List["_models.DiscoSource"]] = None,
        names: Optional[List[str]] = None,
        excludes: Optional[List["_models.DiscoSource"]] = None,
        created_date: Optional[datetime.datetime] = None,
        template_id: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DiscoRunPageResponse(_model_base.Model):
    """DiscoRunPageResponse.

    All required parameters must be populated in order to send to Azure.

    :ivar total_elements: The total number of items available in the full result set.
    :vartype total_elements: int
    :ivar next_link: The link to access the next page of results.  Not set if at the end of the
     result set.
    :vartype next_link: str
    :ivar value: The items in the current page of results. Required.
    :vartype value: list[~azure.defender.easm.models.DiscoRunResponse]
    """

    total_elements: Optional[int] = rest_field(name="totalElements")
    """The total number of items available in the full result set."""
    next_link: Optional[str] = rest_field(name="nextLink")
    """The link to access the next page of results.  Not set if at the end of the result set."""
    value: List["_models.DiscoRunResponse"] = rest_field()
    """The items in the current page of results. Required."""

    @overload
    def __init__(
        self,
        *,
        value: List["_models.DiscoRunResponse"],
        total_elements: Optional[int] = None,
        next_link: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DiscoRunResponse(_model_base.Model):
    """DiscoRunResponse.

    :ivar submitted_date: The date for when the disco run was created in the system.
    :vartype submitted_date: ~datetime.datetime
    :ivar started_date: The date for when the disco run was actually started by the system.
    :vartype started_date: ~datetime.datetime
    :ivar completed_date: The date for when the disco run was completed by the system.
    :vartype completed_date: ~datetime.datetime
    :ivar tier: The tier which will affect the algorithm used for the disco run.
    :vartype tier: str
    :ivar state: The State of the disco run. Known values are: "pending", "running", "completed",
     and "failed".
    :vartype state: str or ~azure.defender.easm.models.DiscoRunState
    :ivar total_assets_found_count: The total count of assets that were found this disco run.
    :vartype total_assets_found_count: int
    :ivar seeds: The list of seeds used for the disco run.
    :vartype seeds: list[~azure.defender.easm.models.DiscoSource]
    :ivar excludes: The list of excludes used for the disco run, aka assets to exclude from the
     discovery algorithm.
    :vartype excludes: list[~azure.defender.easm.models.DiscoSource]
    :ivar names: The list of names used for the disco run.
    :vartype names: list[str]
    """

    submitted_date: Optional[datetime.datetime] = rest_field(name="submittedDate")
    """The date for when the disco run was created in the system."""
    started_date: Optional[datetime.datetime] = rest_field(name="startedDate")
    """The date for when the disco run was actually started by the system."""
    completed_date: Optional[datetime.datetime] = rest_field(name="completedDate")
    """The date for when the disco run was completed by the system."""
    tier: Optional[str] = rest_field()
    """The tier which will affect the algorithm used for the disco run."""
    state: Optional[Union[str, "_models.DiscoRunState"]] = rest_field()
    """The State of the disco run. Known values are: \"pending\", \"running\", \"completed\", and
     \"failed\"."""
    total_assets_found_count: Optional[int] = rest_field(name="totalAssetsFoundCount")
    """The total count of assets that were found this disco run."""
    seeds: Optional[List["_models.DiscoSource"]] = rest_field()
    """The list of seeds used for the disco run."""
    excludes: Optional[List["_models.DiscoSource"]] = rest_field()
    """The list of excludes used for the disco run, aka assets to exclude from the discovery
     algorithm."""
    names: Optional[List[str]] = rest_field()
    """The list of names used for the disco run."""

    @overload
    def __init__(
        self,
        *,
        submitted_date: Optional[datetime.datetime] = None,
        started_date: Optional[datetime.datetime] = None,
        completed_date: Optional[datetime.datetime] = None,
        tier: Optional[str] = None,
        state: Optional[Union[str, "_models.DiscoRunState"]] = None,
        total_assets_found_count: Optional[int] = None,
        seeds: Optional[List["_models.DiscoSource"]] = None,
        excludes: Optional[List["_models.DiscoSource"]] = None,
        names: Optional[List[str]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DiscoSource(_model_base.Model):
    """DiscoSource.

    :ivar kind: The kind of disco source. Known values are: "as", "attribute", "contact", "domain",
     "host", and "ipBlock".
    :vartype kind: str or ~azure.defender.easm.models.DiscoSourceKind
    :ivar name: The name for the disco source.
    :vartype name: str
    """

    kind: Optional[Union[str, "_models.DiscoSourceKind"]] = rest_field()
    """The kind of disco source. Known values are: \"as\", \"attribute\", \"contact\", \"domain\",
     \"host\", and \"ipBlock\"."""
    name: Optional[str] = rest_field()
    """The name for the disco source."""

    @overload
    def __init__(
        self,
        *,
        kind: Optional[Union[str, "_models.DiscoSourceKind"]] = None,
        name: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DiscoTemplatePageResponse(_model_base.Model):
    """DiscoTemplatePageResponse.

    All required parameters must be populated in order to send to Azure.

    :ivar total_elements: The total number of items available in the full result set.
    :vartype total_elements: int
    :ivar next_link: The link to access the next page of results.  Not set if at the end of the
     result set.
    :vartype next_link: str
    :ivar value: The items in the current page of results. Required.
    :vartype value: list[~azure.defender.easm.models.DiscoTemplateResponse]
    """

    total_elements: Optional[int] = rest_field(name="totalElements")
    """The total number of items available in the full result set."""
    next_link: Optional[str] = rest_field(name="nextLink")
    """The link to access the next page of results.  Not set if at the end of the result set."""
    value: List["_models.DiscoTemplateResponse"] = rest_field()
    """The items in the current page of results. Required."""

    @overload
    def __init__(
        self,
        *,
        value: List["_models.DiscoTemplateResponse"],
        total_elements: Optional[int] = None,
        next_link: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DiscoTemplateResponse(_model_base.Model):
    """DiscoTemplateResponse.

    :ivar id: The system generated unique id for the resource.
    :vartype id: str
    :ivar name: The caller provided unique name for the resource.
    :vartype name: str
    :ivar display_name: The name that can be used for display purposes.
    :vartype display_name: str
    :ivar industry: The name of the industry.
    :vartype industry: str
    :ivar region: The name of the region.
    :vartype region: str
    :ivar country_code: The country code.
    :vartype country_code: str
    :ivar state_code: The state code.
    :vartype state_code: str
    :ivar city: The name of the city.
    :vartype city: str
    :ivar seeds: The list of disco template seeds.
    :vartype seeds: list[~azure.defender.easm.models.DiscoSource]
    :ivar names: The list of disco template names.
    :vartype names: list[str]
    """

    id: Optional[str] = rest_field()
    """The system generated unique id for the resource."""
    name: Optional[str] = rest_field()
    """The caller provided unique name for the resource."""
    display_name: Optional[str] = rest_field(name="displayName")
    """The name that can be used for display purposes."""
    industry: Optional[str] = rest_field()
    """The name of the industry."""
    region: Optional[str] = rest_field()
    """The name of the region."""
    country_code: Optional[str] = rest_field(name="countryCode")
    """The country code."""
    state_code: Optional[str] = rest_field(name="stateCode")
    """The state code."""
    city: Optional[str] = rest_field()
    """The name of the city."""
    seeds: Optional[List["_models.DiscoSource"]] = rest_field()
    """The list of disco template seeds."""
    names: Optional[List[str]] = rest_field()
    """The list of disco template names."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        display_name: Optional[str] = None,
        industry: Optional[str] = None,
        region: Optional[str] = None,
        country_code: Optional[str] = None,
        state_code: Optional[str] = None,
        city: Optional[str] = None,
        seeds: Optional[List["_models.DiscoSource"]] = None,
        names: Optional[List[str]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DomainAsset(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """DomainAsset.

    :ivar domain:
    :vartype domain: str
    :ivar whois_id:
    :vartype whois_id: int
    :ivar registrar_iana_ids:
    :vartype registrar_iana_ids: list[~azure.defender.easm.models.ObservedInteger]
    :ivar registrant_contacts:
    :vartype registrant_contacts: list[~azure.defender.easm.models.ObservedString]
    :ivar registrant_orgs:
    :vartype registrant_orgs: list[~azure.defender.easm.models.ObservedString]
    :ivar admin_contacts:
    :vartype admin_contacts: list[~azure.defender.easm.models.ObservedString]
    :ivar technical_contacts:
    :vartype technical_contacts: list[~azure.defender.easm.models.ObservedString]
    :ivar alexa_infos:
    :vartype alexa_infos: list[~azure.defender.easm.models.AlexaInfo]
    :ivar name_servers:
    :vartype name_servers: list[~azure.defender.easm.models.ObservedString]
    :ivar mail_servers:
    :vartype mail_servers: list[~azure.defender.easm.models.ObservedString]
    :ivar whois_servers:
    :vartype whois_servers: list[~azure.defender.easm.models.ObservedString]
    :ivar domain_statuses:
    :vartype domain_statuses: list[~azure.defender.easm.models.ObservedString]
    :ivar registrar_created_at:
    :vartype registrar_created_at: list[~azure.defender.easm.models.ObservedLong]
    :ivar registrar_updated_at:
    :vartype registrar_updated_at: list[~azure.defender.easm.models.ObservedLong]
    :ivar registrar_expires_at:
    :vartype registrar_expires_at: list[~azure.defender.easm.models.ObservedLong]
    :ivar soa_records:
    :vartype soa_records: list[~azure.defender.easm.models.SoaRecord]
    :ivar detailed_from_whois_at:
    :vartype detailed_from_whois_at: ~datetime.datetime
    :ivar registrar_names:
    :vartype registrar_names: list[~azure.defender.easm.models.ObservedString]
    :ivar sources:
    :vartype sources: list[~azure.defender.easm.models.Source]
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar count:
    :vartype count: int
    :ivar parked_domain:
    :vartype parked_domain: list[~azure.defender.easm.models.ObservedBoolean]
    :ivar registrant_names:
    :vartype registrant_names: list[~azure.defender.easm.models.ObservedString]
    :ivar admin_names:
    :vartype admin_names: list[~azure.defender.easm.models.ObservedString]
    :ivar technical_names:
    :vartype technical_names: list[~azure.defender.easm.models.ObservedString]
    :ivar admin_orgs:
    :vartype admin_orgs: list[~azure.defender.easm.models.ObservedString]
    :ivar technical_orgs:
    :vartype technical_orgs: list[~azure.defender.easm.models.ObservedString]
    :ivar registrant_phones:
    :vartype registrant_phones: list[~azure.defender.easm.models.ObservedString]
    :ivar admin_phones:
    :vartype admin_phones: list[~azure.defender.easm.models.ObservedString]
    :ivar technical_phones:
    :vartype technical_phones: list[~azure.defender.easm.models.ObservedString]
    """

    domain: Optional[str] = rest_field()
    whois_id: Optional[int] = rest_field(name="whoisId")
    registrar_iana_ids: Optional[List["_models.ObservedInteger"]] = rest_field(name="registrarIanaIds")
    registrant_contacts: Optional[List["_models.ObservedString"]] = rest_field(name="registrantContacts")
    registrant_orgs: Optional[List["_models.ObservedString"]] = rest_field(name="registrantOrgs")
    admin_contacts: Optional[List["_models.ObservedString"]] = rest_field(name="adminContacts")
    technical_contacts: Optional[List["_models.ObservedString"]] = rest_field(name="technicalContacts")
    alexa_infos: Optional[List["_models.AlexaInfo"]] = rest_field(name="alexaInfos")
    name_servers: Optional[List["_models.ObservedString"]] = rest_field(name="nameServers")
    mail_servers: Optional[List["_models.ObservedString"]] = rest_field(name="mailServers")
    whois_servers: Optional[List["_models.ObservedString"]] = rest_field(name="whoisServers")
    domain_statuses: Optional[List["_models.ObservedString"]] = rest_field(name="domainStatuses")
    registrar_created_at: Optional[List["_models.ObservedLong"]] = rest_field(name="registrarCreatedAt")
    registrar_updated_at: Optional[List["_models.ObservedLong"]] = rest_field(name="registrarUpdatedAt")
    registrar_expires_at: Optional[List["_models.ObservedLong"]] = rest_field(name="registrarExpiresAt")
    soa_records: Optional[List["_models.SoaRecord"]] = rest_field(name="soaRecords")
    detailed_from_whois_at: Optional[datetime.datetime] = rest_field(name="detailedFromWhoisAt")
    registrar_names: Optional[List["_models.ObservedString"]] = rest_field(name="registrarNames")
    sources: Optional[List["_models.Source"]] = rest_field()
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    count: Optional[int] = rest_field()
    parked_domain: Optional[List["_models.ObservedBoolean"]] = rest_field(name="parkedDomain")
    registrant_names: Optional[List["_models.ObservedString"]] = rest_field(name="registrantNames")
    admin_names: Optional[List["_models.ObservedString"]] = rest_field(name="adminNames")
    technical_names: Optional[List["_models.ObservedString"]] = rest_field(name="technicalNames")
    admin_orgs: Optional[List["_models.ObservedString"]] = rest_field(name="adminOrgs")
    technical_orgs: Optional[List["_models.ObservedString"]] = rest_field(name="technicalOrgs")
    registrant_phones: Optional[List["_models.ObservedString"]] = rest_field(name="registrantPhones")
    admin_phones: Optional[List["_models.ObservedString"]] = rest_field(name="adminPhones")
    technical_phones: Optional[List["_models.ObservedString"]] = rest_field(name="technicalPhones")

    @overload
    def __init__(
        self,
        *,
        domain: Optional[str] = None,
        whois_id: Optional[int] = None,
        registrar_iana_ids: Optional[List["_models.ObservedInteger"]] = None,
        registrant_contacts: Optional[List["_models.ObservedString"]] = None,
        registrant_orgs: Optional[List["_models.ObservedString"]] = None,
        admin_contacts: Optional[List["_models.ObservedString"]] = None,
        technical_contacts: Optional[List["_models.ObservedString"]] = None,
        alexa_infos: Optional[List["_models.AlexaInfo"]] = None,
        name_servers: Optional[List["_models.ObservedString"]] = None,
        mail_servers: Optional[List["_models.ObservedString"]] = None,
        whois_servers: Optional[List["_models.ObservedString"]] = None,
        domain_statuses: Optional[List["_models.ObservedString"]] = None,
        registrar_created_at: Optional[List["_models.ObservedLong"]] = None,
        registrar_updated_at: Optional[List["_models.ObservedLong"]] = None,
        registrar_expires_at: Optional[List["_models.ObservedLong"]] = None,
        soa_records: Optional[List["_models.SoaRecord"]] = None,
        detailed_from_whois_at: Optional[datetime.datetime] = None,
        registrar_names: Optional[List["_models.ObservedString"]] = None,
        sources: Optional[List["_models.Source"]] = None,
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        count: Optional[int] = None,
        parked_domain: Optional[List["_models.ObservedBoolean"]] = None,
        registrant_names: Optional[List["_models.ObservedString"]] = None,
        admin_names: Optional[List["_models.ObservedString"]] = None,
        technical_names: Optional[List["_models.ObservedString"]] = None,
        admin_orgs: Optional[List["_models.ObservedString"]] = None,
        technical_orgs: Optional[List["_models.ObservedString"]] = None,
        registrant_phones: Optional[List["_models.ObservedString"]] = None,
        admin_phones: Optional[List["_models.ObservedString"]] = None,
        technical_phones: Optional[List["_models.ObservedString"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DomainAssetResponse(AssetResponse, discriminator="domain"):  # pylint: disable=too-many-instance-attributes
    """DomainAssetResponse.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The system generated unique id for the resource.
    :vartype id: str
    :ivar name: The caller provided unique name for the resource.
    :vartype name: str
    :ivar display_name: The name that can be used for display purposes.
    :vartype display_name: str
    :ivar uuid: Global UUID for the asset.
    :vartype uuid: str
    :ivar created_date: The date this asset was first added to this workspace.
    :vartype created_date: ~datetime.datetime
    :ivar updated_date: The date this asset was last updated for this workspace.
    :vartype updated_date: ~datetime.datetime
    :ivar state: Known values are: "candidate", "confirmed", "dismissed", "candidateInvestigate",
     "associatedPartner", "associatedThirdparty", and "archived".
    :vartype state: str or ~azure.defender.easm.models.AssetState
    :ivar external_id: An optional customer provided identifier for this asset.
    :vartype external_id: str
    :ivar labels: Customer labels assigned to this asset.
    :vartype labels: list[str]
    :ivar wildcard: An indicator of whether this asset represents a wildcard rollup of assets on
     this domain.
    :vartype wildcard: bool
    :ivar disco_group_name: The name of the DiscoveryGroup that brought added this asset to the
     workspace.
    :vartype disco_group_name: str
    :ivar audit_trail: The history of how this asset was pulled into the workspace through the
     discovery process.
    :vartype audit_trail: list[~azure.defender.easm.models.AuditTrailItem]
    :ivar reason:
    :vartype reason: str
    :ivar kind: Required. Default value is "domain".
    :vartype kind: str
    :ivar asset: Required.
    :vartype asset: ~azure.defender.easm.models.DomainAsset
    """

    kind: Literal["domain"] = rest_discriminator(name="kind")  # type: ignore
    """Required. Default value is \"domain\"."""
    asset: "_models.DomainAsset" = rest_field()
    """Required."""

    @overload
    def __init__(
        self,
        *,
        asset: "_models.DomainAsset",
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        display_name: Optional[str] = None,
        uuid: Optional[str] = None,
        created_date: Optional[datetime.datetime] = None,
        updated_date: Optional[datetime.datetime] = None,
        state: Optional[Union[str, "_models.AssetState"]] = None,
        external_id: Optional[str] = None,
        labels: Optional[List[str]] = None,
        wildcard: Optional[bool] = None,
        disco_group_name: Optional[str] = None,
        audit_trail: Optional[List["_models.AuditTrailItem"]] = None,
        reason: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.kind: Literal["domain"] = "domain"


class ErrorDetail(_model_base.Model):
    """ErrorDetail.

    All required parameters must be populated in order to send to Azure.

    :ivar code: This is one of a server-defined set of error codes. Required.
    :vartype code: str
    :ivar message: This is a human-readable representation of the error. Required.
    :vartype message: str
    :ivar target: This is the error target.
    :vartype target: str
    :ivar details: This is an array of details about specific errors that led to this reported
     error.
    :vartype details: list[~azure.defender.easm.models.ErrorDetail]
    :ivar innererror: Required.
    :vartype innererror: ~azure.defender.easm.models.InnerError
    """

    code: str = rest_field()
    """This is one of a server-defined set of error codes. Required."""
    message: str = rest_field()
    """This is a human-readable representation of the error. Required."""
    target: Optional[str] = rest_field()
    """This is the error target."""
    details: Optional[List["_models.ErrorDetail"]] = rest_field()
    """This is an array of details about specific errors that led to this reported error."""
    innererror: "_models.InnerError" = rest_field()
    """Required."""

    @overload
    def __init__(
        self,
        *,
        code: str,
        message: str,
        innererror: "_models.InnerError",
        target: Optional[str] = None,
        details: Optional[List["_models.ErrorDetail"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ErrorResponse(_model_base.Model):
    """ErrorResponse.

    All required parameters must be populated in order to send to Azure.

    :ivar error: Required.
    :vartype error: ~azure.defender.easm.models.ErrorDetail
    """

    error: "_models.ErrorDetail" = rest_field()
    """Required."""

    @overload
    def __init__(
        self,
        *,
        error: "_models.ErrorDetail",
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class GuidPair(_model_base.Model):
    """GuidPair.

    :ivar page_guid:
    :vartype page_guid: str
    :ivar crawl_state_guid:
    :vartype crawl_state_guid: str
    :ivar load_date:
    :vartype load_date: ~datetime.datetime
    :ivar recent:
    :vartype recent: bool
    """

    page_guid: Optional[str] = rest_field(name="pageGuid")
    crawl_state_guid: Optional[str] = rest_field(name="crawlStateGuid")
    load_date: Optional[datetime.datetime] = rest_field(name="loadDate")
    recent: Optional[bool] = rest_field()

    @overload
    def __init__(
        self,
        *,
        page_guid: Optional[str] = None,
        crawl_state_guid: Optional[str] = None,
        load_date: Optional[datetime.datetime] = None,
        recent: Optional[bool] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class HostAsset(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """HostAsset.

    All required parameters must be populated in order to send to Azure.

    :ivar host:
    :vartype host: str
    :ivar domain:
    :vartype domain: str
    :ivar ip_addresses:
    :vartype ip_addresses: list[~azure.defender.easm.models.ObservedString]
    :ivar web_components:
    :vartype web_components: list[~azure.defender.easm.models.WebComponent]
    :ivar headers:
    :vartype headers: list[~azure.defender.easm.models.ObservedHeader]
    :ivar attributes:
    :vartype attributes: list[~azure.defender.easm.models.Attribute]
    :ivar cookies:
    :vartype cookies: list[~azure.defender.easm.models.Cookie]
    :ivar ssl_certs:
    :vartype ssl_certs: list[~azure.defender.easm.models.SslCertAsset]
    :ivar parent_hosts:
    :vartype parent_hosts: list[~azure.defender.easm.models.ObservedString]
    :ivar child_hosts:
    :vartype child_hosts: list[~azure.defender.easm.models.ObservedString]
    :ivar host_core: Required.
    :vartype host_core: ~azure.defender.easm.models.HostCore
    :ivar services:
    :vartype services: list[~azure.defender.easm.models.Service]
    :ivar cnames:
    :vartype cnames: list[~azure.defender.easm.models.ObservedString]
    :ivar sources:
    :vartype sources: list[~azure.defender.easm.models.Source]
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar count:
    :vartype count: int
    :ivar resource_urls:
    :vartype resource_urls: list[~azure.defender.easm.models.ResourceUrl]
    :ivar scan_metadata:
    :vartype scan_metadata: list[~azure.defender.easm.models.ScanMetadata]
    :ivar asns:
    :vartype asns: list[~azure.defender.easm.models.ObservedLong]
    :ivar ip_blocks:
    :vartype ip_blocks: list[~azure.defender.easm.models.IpBlock]
    :ivar response_bodies:
    :vartype response_bodies: list[~azure.defender.easm.models.ObservedString]
    :ivar domain_asset: Required.
    :vartype domain_asset: ~azure.defender.easm.models.DomainAsset
    :ivar ns_record:
    :vartype ns_record: list[~azure.defender.easm.models.ObservedBoolean]
    :ivar mx_record:
    :vartype mx_record: list[~azure.defender.easm.models.ObservedBoolean]
    :ivar webserver:
    :vartype webserver: list[~azure.defender.easm.models.ObservedBoolean]
    :ivar location:
    :vartype location: list[~azure.defender.easm.models.ObservedLocation]
    :ivar nxdomain:
    :vartype nxdomain: list[~azure.defender.easm.models.ObservedBoolean]
    :ivar ssl_server_config:
    :vartype ssl_server_config: list[~azure.defender.easm.models.SslServerConfig]
    :ivar is_wildcard:
    :vartype is_wildcard: list[~azure.defender.easm.models.ObservedBoolean]
    :ivar banners:
    :vartype banners: list[~azure.defender.easm.models.Banner]
    :ivar ipv4:
    :vartype ipv4: list[~azure.defender.easm.models.ObservedBoolean]
    :ivar ipv6:
    :vartype ipv6: list[~azure.defender.easm.models.ObservedBoolean]
    """

    host: Optional[str] = rest_field()
    domain: Optional[str] = rest_field()
    ip_addresses: Optional[List["_models.ObservedString"]] = rest_field(name="ipAddresses")
    web_components: Optional[List["_models.WebComponent"]] = rest_field(name="webComponents")
    headers: Optional[List["_models.ObservedHeader"]] = rest_field()
    attributes: Optional[List["_models.Attribute"]] = rest_field()
    cookies: Optional[List["_models.Cookie"]] = rest_field()
    ssl_certs: Optional[List["_models.SslCertAsset"]] = rest_field(name="sslCerts")
    parent_hosts: Optional[List["_models.ObservedString"]] = rest_field(name="parentHosts")
    child_hosts: Optional[List["_models.ObservedString"]] = rest_field(name="childHosts")
    host_core: "_models.HostCore" = rest_field(name="hostCore")
    """Required."""
    services: Optional[List["_models.Service"]] = rest_field()
    cnames: Optional[List["_models.ObservedString"]] = rest_field()
    sources: Optional[List["_models.Source"]] = rest_field()
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    count: Optional[int] = rest_field()
    resource_urls: Optional[List["_models.ResourceUrl"]] = rest_field(name="resourceUrls")
    scan_metadata: Optional[List["_models.ScanMetadata"]] = rest_field(name="scanMetadata")
    asns: Optional[List["_models.ObservedLong"]] = rest_field()
    ip_blocks: Optional[List["_models.IpBlock"]] = rest_field(name="ipBlocks")
    response_bodies: Optional[List["_models.ObservedString"]] = rest_field(name="responseBodies")
    domain_asset: "_models.DomainAsset" = rest_field(name="domainAsset")
    """Required."""
    ns_record: Optional[List["_models.ObservedBoolean"]] = rest_field(name="nsRecord")
    mx_record: Optional[List["_models.ObservedBoolean"]] = rest_field(name="mxRecord")
    webserver: Optional[List["_models.ObservedBoolean"]] = rest_field()
    location: Optional[List["_models.ObservedLocation"]] = rest_field()
    nxdomain: Optional[List["_models.ObservedBoolean"]] = rest_field()
    ssl_server_config: Optional[List["_models.SslServerConfig"]] = rest_field(name="sslServerConfig")
    is_wildcard: Optional[List["_models.ObservedBoolean"]] = rest_field(name="isWildcard")
    banners: Optional[List["_models.Banner"]] = rest_field()
    ipv4: Optional[List["_models.ObservedBoolean"]] = rest_field()
    ipv6: Optional[List["_models.ObservedBoolean"]] = rest_field()

    @overload
    def __init__(
        self,
        *,
        host_core: "_models.HostCore",
        domain_asset: "_models.DomainAsset",
        host: Optional[str] = None,
        domain: Optional[str] = None,
        ip_addresses: Optional[List["_models.ObservedString"]] = None,
        web_components: Optional[List["_models.WebComponent"]] = None,
        headers: Optional[List["_models.ObservedHeader"]] = None,
        attributes: Optional[List["_models.Attribute"]] = None,
        cookies: Optional[List["_models.Cookie"]] = None,
        ssl_certs: Optional[List["_models.SslCertAsset"]] = None,
        parent_hosts: Optional[List["_models.ObservedString"]] = None,
        child_hosts: Optional[List["_models.ObservedString"]] = None,
        services: Optional[List["_models.Service"]] = None,
        cnames: Optional[List["_models.ObservedString"]] = None,
        sources: Optional[List["_models.Source"]] = None,
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        count: Optional[int] = None,
        resource_urls: Optional[List["_models.ResourceUrl"]] = None,
        scan_metadata: Optional[List["_models.ScanMetadata"]] = None,
        asns: Optional[List["_models.ObservedLong"]] = None,
        ip_blocks: Optional[List["_models.IpBlock"]] = None,
        response_bodies: Optional[List["_models.ObservedString"]] = None,
        ns_record: Optional[List["_models.ObservedBoolean"]] = None,
        mx_record: Optional[List["_models.ObservedBoolean"]] = None,
        webserver: Optional[List["_models.ObservedBoolean"]] = None,
        location: Optional[List["_models.ObservedLocation"]] = None,
        nxdomain: Optional[List["_models.ObservedBoolean"]] = None,
        ssl_server_config: Optional[List["_models.SslServerConfig"]] = None,
        is_wildcard: Optional[List["_models.ObservedBoolean"]] = None,
        banners: Optional[List["_models.Banner"]] = None,
        ipv4: Optional[List["_models.ObservedBoolean"]] = None,
        ipv6: Optional[List["_models.ObservedBoolean"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class HostAssetResponse(AssetResponse, discriminator="host"):  # pylint: disable=too-many-instance-attributes
    """HostAssetResponse.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The system generated unique id for the resource.
    :vartype id: str
    :ivar name: The caller provided unique name for the resource.
    :vartype name: str
    :ivar display_name: The name that can be used for display purposes.
    :vartype display_name: str
    :ivar uuid: Global UUID for the asset.
    :vartype uuid: str
    :ivar created_date: The date this asset was first added to this workspace.
    :vartype created_date: ~datetime.datetime
    :ivar updated_date: The date this asset was last updated for this workspace.
    :vartype updated_date: ~datetime.datetime
    :ivar state: Known values are: "candidate", "confirmed", "dismissed", "candidateInvestigate",
     "associatedPartner", "associatedThirdparty", and "archived".
    :vartype state: str or ~azure.defender.easm.models.AssetState
    :ivar external_id: An optional customer provided identifier for this asset.
    :vartype external_id: str
    :ivar labels: Customer labels assigned to this asset.
    :vartype labels: list[str]
    :ivar wildcard: An indicator of whether this asset represents a wildcard rollup of assets on
     this domain.
    :vartype wildcard: bool
    :ivar disco_group_name: The name of the DiscoveryGroup that brought added this asset to the
     workspace.
    :vartype disco_group_name: str
    :ivar audit_trail: The history of how this asset was pulled into the workspace through the
     discovery process.
    :vartype audit_trail: list[~azure.defender.easm.models.AuditTrailItem]
    :ivar reason:
    :vartype reason: str
    :ivar kind: Required. Default value is "host".
    :vartype kind: str
    :ivar asset: Required.
    :vartype asset: ~azure.defender.easm.models.HostAsset
    """

    kind: Literal["host"] = rest_discriminator(name="kind")  # type: ignore
    """Required. Default value is \"host\"."""
    asset: "_models.HostAsset" = rest_field()
    """Required."""

    @overload
    def __init__(
        self,
        *,
        asset: "_models.HostAsset",
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        display_name: Optional[str] = None,
        uuid: Optional[str] = None,
        created_date: Optional[datetime.datetime] = None,
        updated_date: Optional[datetime.datetime] = None,
        state: Optional[Union[str, "_models.AssetState"]] = None,
        external_id: Optional[str] = None,
        labels: Optional[List[str]] = None,
        wildcard: Optional[bool] = None,
        disco_group_name: Optional[str] = None,
        audit_trail: Optional[List["_models.AuditTrailItem"]] = None,
        reason: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.kind: Literal["host"] = "host"


class HostCore(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """HostCore.

    :ivar host:
    :vartype host: str
    :ivar domain:
    :vartype domain: str
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar count:
    :vartype count: int
    :ivar blacklist_cause_first_seen:
    :vartype blacklist_cause_first_seen: ~datetime.datetime
    :ivar blacklist_cause_last_seen:
    :vartype blacklist_cause_last_seen: ~datetime.datetime
    :ivar blacklist_cause_count:
    :vartype blacklist_cause_count: int
    :ivar blacklist_resource_first_seen:
    :vartype blacklist_resource_first_seen: ~datetime.datetime
    :ivar blacklist_resource_last_seen:
    :vartype blacklist_resource_last_seen: ~datetime.datetime
    :ivar blacklist_resource_count:
    :vartype blacklist_resource_count: int
    :ivar blacklist_sequence_first_seen:
    :vartype blacklist_sequence_first_seen: ~datetime.datetime
    :ivar blacklist_sequence_last_seen:
    :vartype blacklist_sequence_last_seen: ~datetime.datetime
    :ivar blacklist_sequence_count:
    :vartype blacklist_sequence_count: int
    :ivar phish_cause_count:
    :vartype phish_cause_count: int
    :ivar malware_cause_count:
    :vartype malware_cause_count: int
    :ivar spam_cause_count:
    :vartype spam_cause_count: int
    :ivar scam_cause_count:
    :vartype scam_cause_count: int
    :ivar phish_resource_count:
    :vartype phish_resource_count: int
    :ivar malware_resource_count:
    :vartype malware_resource_count: int
    :ivar spam_resource_count:
    :vartype spam_resource_count: int
    :ivar scam_resource_count:
    :vartype scam_resource_count: int
    :ivar phish_sequence_count:
    :vartype phish_sequence_count: int
    :ivar malware_sequence_count:
    :vartype malware_sequence_count: int
    :ivar spam_sequence_count:
    :vartype spam_sequence_count: int
    :ivar scam_sequence_count:
    :vartype scam_sequence_count: int
    :ivar alexa_rank:
    :vartype alexa_rank: int
    :ivar host_reputation_score:
    :vartype host_reputation_score: int
    :ivar host_phish_reputation_score:
    :vartype host_phish_reputation_score: int
    :ivar host_malware_reputation_score:
    :vartype host_malware_reputation_score: int
    :ivar host_spam_reputation_score:
    :vartype host_spam_reputation_score: int
    :ivar host_scam_reputation_score:
    :vartype host_scam_reputation_score: int
    :ivar domain_reputation_score:
    :vartype domain_reputation_score: int
    :ivar domain_phish_reputation_score:
    :vartype domain_phish_reputation_score: int
    :ivar domain_malware_reputation_score:
    :vartype domain_malware_reputation_score: int
    :ivar domain_spam_reputation_score:
    :vartype domain_spam_reputation_score: int
    :ivar domain_scam_reputation_score:
    :vartype domain_scam_reputation_score: int
    :ivar uuid:
    :vartype uuid: str
    """

    host: Optional[str] = rest_field()
    domain: Optional[str] = rest_field()
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    count: Optional[int] = rest_field()
    blacklist_cause_first_seen: Optional[datetime.datetime] = rest_field(name="blacklistCauseFirstSeen")
    blacklist_cause_last_seen: Optional[datetime.datetime] = rest_field(name="blacklistCauseLastSeen")
    blacklist_cause_count: Optional[int] = rest_field(name="blacklistCauseCount")
    blacklist_resource_first_seen: Optional[datetime.datetime] = rest_field(name="blacklistResourceFirstSeen")
    blacklist_resource_last_seen: Optional[datetime.datetime] = rest_field(name="blacklistResourceLastSeen")
    blacklist_resource_count: Optional[int] = rest_field(name="blacklistResourceCount")
    blacklist_sequence_first_seen: Optional[datetime.datetime] = rest_field(name="blacklistSequenceFirstSeen")
    blacklist_sequence_last_seen: Optional[datetime.datetime] = rest_field(name="blacklistSequenceLastSeen")
    blacklist_sequence_count: Optional[int] = rest_field(name="blacklistSequenceCount")
    phish_cause_count: Optional[int] = rest_field(name="phishCauseCount")
    malware_cause_count: Optional[int] = rest_field(name="malwareCauseCount")
    spam_cause_count: Optional[int] = rest_field(name="spamCauseCount")
    scam_cause_count: Optional[int] = rest_field(name="scamCauseCount")
    phish_resource_count: Optional[int] = rest_field(name="phishResourceCount")
    malware_resource_count: Optional[int] = rest_field(name="malwareResourceCount")
    spam_resource_count: Optional[int] = rest_field(name="spamResourceCount")
    scam_resource_count: Optional[int] = rest_field(name="scamResourceCount")
    phish_sequence_count: Optional[int] = rest_field(name="phishSequenceCount")
    malware_sequence_count: Optional[int] = rest_field(name="malwareSequenceCount")
    spam_sequence_count: Optional[int] = rest_field(name="spamSequenceCount")
    scam_sequence_count: Optional[int] = rest_field(name="scamSequenceCount")
    alexa_rank: Optional[int] = rest_field(name="alexaRank")
    host_reputation_score: Optional[int] = rest_field(name="hostReputationScore")
    host_phish_reputation_score: Optional[int] = rest_field(name="hostPhishReputationScore")
    host_malware_reputation_score: Optional[int] = rest_field(name="hostMalwareReputationScore")
    host_spam_reputation_score: Optional[int] = rest_field(name="hostSpamReputationScore")
    host_scam_reputation_score: Optional[int] = rest_field(name="hostScamReputationScore")
    domain_reputation_score: Optional[int] = rest_field(name="domainReputationScore")
    domain_phish_reputation_score: Optional[int] = rest_field(name="domainPhishReputationScore")
    domain_malware_reputation_score: Optional[int] = rest_field(name="domainMalwareReputationScore")
    domain_spam_reputation_score: Optional[int] = rest_field(name="domainSpamReputationScore")
    domain_scam_reputation_score: Optional[int] = rest_field(name="domainScamReputationScore")
    uuid: Optional[str] = rest_field()

    @overload
    def __init__(
        self,
        *,
        host: Optional[str] = None,
        domain: Optional[str] = None,
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        count: Optional[int] = None,
        blacklist_cause_first_seen: Optional[datetime.datetime] = None,
        blacklist_cause_last_seen: Optional[datetime.datetime] = None,
        blacklist_cause_count: Optional[int] = None,
        blacklist_resource_first_seen: Optional[datetime.datetime] = None,
        blacklist_resource_last_seen: Optional[datetime.datetime] = None,
        blacklist_resource_count: Optional[int] = None,
        blacklist_sequence_first_seen: Optional[datetime.datetime] = None,
        blacklist_sequence_last_seen: Optional[datetime.datetime] = None,
        blacklist_sequence_count: Optional[int] = None,
        phish_cause_count: Optional[int] = None,
        malware_cause_count: Optional[int] = None,
        spam_cause_count: Optional[int] = None,
        scam_cause_count: Optional[int] = None,
        phish_resource_count: Optional[int] = None,
        malware_resource_count: Optional[int] = None,
        spam_resource_count: Optional[int] = None,
        scam_resource_count: Optional[int] = None,
        phish_sequence_count: Optional[int] = None,
        malware_sequence_count: Optional[int] = None,
        spam_sequence_count: Optional[int] = None,
        scam_sequence_count: Optional[int] = None,
        alexa_rank: Optional[int] = None,
        host_reputation_score: Optional[int] = None,
        host_phish_reputation_score: Optional[int] = None,
        host_malware_reputation_score: Optional[int] = None,
        host_spam_reputation_score: Optional[int] = None,
        host_scam_reputation_score: Optional[int] = None,
        domain_reputation_score: Optional[int] = None,
        domain_phish_reputation_score: Optional[int] = None,
        domain_malware_reputation_score: Optional[int] = None,
        domain_spam_reputation_score: Optional[int] = None,
        domain_scam_reputation_score: Optional[int] = None,
        uuid: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class InnerError(_model_base.Model):
    """InnerError.

    :ivar code: This is a more specific error code than was provided by the containing error.
    :vartype code: str
    :ivar value: This is an additional field representing the value that caused the error to help
     with debugging.
    :vartype value: any
    """

    code: Optional[str] = rest_field()
    """This is a more specific error code than was provided by the containing error."""
    value: Optional[Any] = rest_field()
    """This is an additional field representing the value that caused the error to help with
     debugging."""

    @overload
    def __init__(
        self,
        *,
        code: Optional[str] = None,
        value: Optional[Any] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class IpAddressAsset(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """IpAddressAsset.

    :ivar ip_address:
    :vartype ip_address: str
    :ivar asns:
    :vartype asns: list[~azure.defender.easm.models.ObservedLong]
    :ivar reputations:
    :vartype reputations: list[~azure.defender.easm.models.Reputation]
    :ivar web_components:
    :vartype web_components: list[~azure.defender.easm.models.WebComponent]
    :ivar net_ranges:
    :vartype net_ranges: list[~azure.defender.easm.models.ObservedString]
    :ivar headers:
    :vartype headers: list[~azure.defender.easm.models.ObservedHeader]
    :ivar attributes:
    :vartype attributes: list[~azure.defender.easm.models.Attribute]
    :ivar cookies:
    :vartype cookies: list[~azure.defender.easm.models.Cookie]
    :ivar ssl_certs:
    :vartype ssl_certs: list[~azure.defender.easm.models.SslCertAsset]
    :ivar services:
    :vartype services: list[~azure.defender.easm.models.Service]
    :ivar ip_blocks:
    :vartype ip_blocks: list[~azure.defender.easm.models.IpBlock]
    :ivar sources:
    :vartype sources: list[~azure.defender.easm.models.Source]
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar count:
    :vartype count: int
    :ivar banners:
    :vartype banners: list[~azure.defender.easm.models.Banner]
    :ivar scan_metadata:
    :vartype scan_metadata: list[~azure.defender.easm.models.ScanMetadata]
    :ivar ns_record:
    :vartype ns_record: list[~azure.defender.easm.models.ObservedBoolean]
    :ivar mx_record:
    :vartype mx_record: list[~azure.defender.easm.models.ObservedBoolean]
    :ivar location:
    :vartype location: list[~azure.defender.easm.models.ObservedLocation]
    :ivar hosts:
    :vartype hosts: list[~azure.defender.easm.models.ObservedString]
    :ivar nxdomain:
    :vartype nxdomain: list[~azure.defender.easm.models.ObservedBoolean]
    :ivar ssl_server_config:
    :vartype ssl_server_config: list[~azure.defender.easm.models.SslServerConfig]
    :ivar ipv4:
    :vartype ipv4: bool
    :ivar ipv6:
    :vartype ipv6: bool
    """

    ip_address: Optional[str] = rest_field(name="ipAddress")
    asns: Optional[List["_models.ObservedLong"]] = rest_field()
    reputations: Optional[List["_models.Reputation"]] = rest_field()
    web_components: Optional[List["_models.WebComponent"]] = rest_field(name="webComponents")
    net_ranges: Optional[List["_models.ObservedString"]] = rest_field(name="netRanges")
    headers: Optional[List["_models.ObservedHeader"]] = rest_field()
    attributes: Optional[List["_models.Attribute"]] = rest_field()
    cookies: Optional[List["_models.Cookie"]] = rest_field()
    ssl_certs: Optional[List["_models.SslCertAsset"]] = rest_field(name="sslCerts")
    services: Optional[List["_models.Service"]] = rest_field()
    ip_blocks: Optional[List["_models.IpBlock"]] = rest_field(name="ipBlocks")
    sources: Optional[List["_models.Source"]] = rest_field()
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    count: Optional[int] = rest_field()
    banners: Optional[List["_models.Banner"]] = rest_field()
    scan_metadata: Optional[List["_models.ScanMetadata"]] = rest_field(name="scanMetadata")
    ns_record: Optional[List["_models.ObservedBoolean"]] = rest_field(name="nsRecord")
    mx_record: Optional[List["_models.ObservedBoolean"]] = rest_field(name="mxRecord")
    location: Optional[List["_models.ObservedLocation"]] = rest_field()
    hosts: Optional[List["_models.ObservedString"]] = rest_field()
    nxdomain: Optional[List["_models.ObservedBoolean"]] = rest_field()
    ssl_server_config: Optional[List["_models.SslServerConfig"]] = rest_field(name="sslServerConfig")
    ipv4: Optional[bool] = rest_field()
    ipv6: Optional[bool] = rest_field()

    @overload
    def __init__(
        self,
        *,
        ip_address: Optional[str] = None,
        asns: Optional[List["_models.ObservedLong"]] = None,
        reputations: Optional[List["_models.Reputation"]] = None,
        web_components: Optional[List["_models.WebComponent"]] = None,
        net_ranges: Optional[List["_models.ObservedString"]] = None,
        headers: Optional[List["_models.ObservedHeader"]] = None,
        attributes: Optional[List["_models.Attribute"]] = None,
        cookies: Optional[List["_models.Cookie"]] = None,
        ssl_certs: Optional[List["_models.SslCertAsset"]] = None,
        services: Optional[List["_models.Service"]] = None,
        ip_blocks: Optional[List["_models.IpBlock"]] = None,
        sources: Optional[List["_models.Source"]] = None,
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        count: Optional[int] = None,
        banners: Optional[List["_models.Banner"]] = None,
        scan_metadata: Optional[List["_models.ScanMetadata"]] = None,
        ns_record: Optional[List["_models.ObservedBoolean"]] = None,
        mx_record: Optional[List["_models.ObservedBoolean"]] = None,
        location: Optional[List["_models.ObservedLocation"]] = None,
        hosts: Optional[List["_models.ObservedString"]] = None,
        nxdomain: Optional[List["_models.ObservedBoolean"]] = None,
        ssl_server_config: Optional[List["_models.SslServerConfig"]] = None,
        ipv4: Optional[bool] = None,
        ipv6: Optional[bool] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class IpAddressAssetResponse(AssetResponse, discriminator="ipAddress"):  # pylint: disable=too-many-instance-attributes
    """IpAddressAssetResponse.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The system generated unique id for the resource.
    :vartype id: str
    :ivar name: The caller provided unique name for the resource.
    :vartype name: str
    :ivar display_name: The name that can be used for display purposes.
    :vartype display_name: str
    :ivar uuid: Global UUID for the asset.
    :vartype uuid: str
    :ivar created_date: The date this asset was first added to this workspace.
    :vartype created_date: ~datetime.datetime
    :ivar updated_date: The date this asset was last updated for this workspace.
    :vartype updated_date: ~datetime.datetime
    :ivar state: Known values are: "candidate", "confirmed", "dismissed", "candidateInvestigate",
     "associatedPartner", "associatedThirdparty", and "archived".
    :vartype state: str or ~azure.defender.easm.models.AssetState
    :ivar external_id: An optional customer provided identifier for this asset.
    :vartype external_id: str
    :ivar labels: Customer labels assigned to this asset.
    :vartype labels: list[str]
    :ivar wildcard: An indicator of whether this asset represents a wildcard rollup of assets on
     this domain.
    :vartype wildcard: bool
    :ivar disco_group_name: The name of the DiscoveryGroup that brought added this asset to the
     workspace.
    :vartype disco_group_name: str
    :ivar audit_trail: The history of how this asset was pulled into the workspace through the
     discovery process.
    :vartype audit_trail: list[~azure.defender.easm.models.AuditTrailItem]
    :ivar reason:
    :vartype reason: str
    :ivar kind: Required. Default value is "ipAddress".
    :vartype kind: str
    :ivar asset: Required.
    :vartype asset: ~azure.defender.easm.models.IpAddressAsset
    """

    kind: Literal["ipAddress"] = rest_discriminator(name="kind")  # type: ignore
    """Required. Default value is \"ipAddress\"."""
    asset: "_models.IpAddressAsset" = rest_field()
    """Required."""

    @overload
    def __init__(
        self,
        *,
        asset: "_models.IpAddressAsset",
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        display_name: Optional[str] = None,
        uuid: Optional[str] = None,
        created_date: Optional[datetime.datetime] = None,
        updated_date: Optional[datetime.datetime] = None,
        state: Optional[Union[str, "_models.AssetState"]] = None,
        external_id: Optional[str] = None,
        labels: Optional[List[str]] = None,
        wildcard: Optional[bool] = None,
        disco_group_name: Optional[str] = None,
        audit_trail: Optional[List["_models.AuditTrailItem"]] = None,
        reason: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.kind: Literal["ipAddress"] = "ipAddress"


class IpBlock(_model_base.Model):
    """IpBlock.

    :ivar ip_block:
    :vartype ip_block: str
    :ivar sources:
    :vartype sources: list[~azure.defender.easm.models.Source]
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar count:
    :vartype count: int
    :ivar recent:
    :vartype recent: bool
    """

    ip_block: Optional[str] = rest_field(name="ipBlock")
    sources: Optional[List["_models.Source"]] = rest_field()
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    count: Optional[int] = rest_field()
    recent: Optional[bool] = rest_field()

    @overload
    def __init__(
        self,
        *,
        ip_block: Optional[str] = None,
        sources: Optional[List["_models.Source"]] = None,
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        count: Optional[int] = None,
        recent: Optional[bool] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class IpBlockAsset(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """IpBlockAsset.

    :ivar ip_block:
    :vartype ip_block: str
    :ivar asns:
    :vartype asns: list[~azure.defender.easm.models.ObservedLong]
    :ivar bgp_prefixes:
    :vartype bgp_prefixes: list[~azure.defender.easm.models.ObservedString]
    :ivar net_names:
    :vartype net_names: list[~azure.defender.easm.models.ObservedString]
    :ivar registrant_contacts:
    :vartype registrant_contacts: list[~azure.defender.easm.models.ObservedString]
    :ivar registrant_orgs:
    :vartype registrant_orgs: list[~azure.defender.easm.models.ObservedString]
    :ivar admin_contacts:
    :vartype admin_contacts: list[~azure.defender.easm.models.ObservedString]
    :ivar technical_contacts:
    :vartype technical_contacts: list[~azure.defender.easm.models.ObservedString]
    :ivar registrar_created_at:
    :vartype registrar_created_at: list[~azure.defender.easm.models.ObservedLong]
    :ivar registrar_updated_at:
    :vartype registrar_updated_at: list[~azure.defender.easm.models.ObservedLong]
    :ivar net_ranges:
    :vartype net_ranges: list[~azure.defender.easm.models.ObservedString]
    :ivar start_ip:
    :vartype start_ip: str
    :ivar end_ip:
    :vartype end_ip: str
    :ivar reputations:
    :vartype reputations: list[~azure.defender.easm.models.Reputation]
    :ivar detailed_from_whois_at:
    :vartype detailed_from_whois_at: ~datetime.datetime
    :ivar sources:
    :vartype sources: list[~azure.defender.easm.models.Source]
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar count:
    :vartype count: int
    :ivar location:
    :vartype location: list[~azure.defender.easm.models.ObservedLocation]
    :ivar registrar_expires_at:
    :vartype registrar_expires_at: list[~azure.defender.easm.models.ObservedLong]
    :ivar registrant_names:
    :vartype registrant_names: list[~azure.defender.easm.models.ObservedString]
    :ivar admin_names:
    :vartype admin_names: list[~azure.defender.easm.models.ObservedString]
    :ivar technical_names:
    :vartype technical_names: list[~azure.defender.easm.models.ObservedString]
    :ivar admin_orgs:
    :vartype admin_orgs: list[~azure.defender.easm.models.ObservedString]
    :ivar technical_orgs:
    :vartype technical_orgs: list[~azure.defender.easm.models.ObservedString]
    :ivar registrant_phones:
    :vartype registrant_phones: list[~azure.defender.easm.models.ObservedString]
    :ivar admin_phones:
    :vartype admin_phones: list[~azure.defender.easm.models.ObservedString]
    :ivar technical_phones:
    :vartype technical_phones: list[~azure.defender.easm.models.ObservedString]
    :ivar ipv4:
    :vartype ipv4: bool
    :ivar ipv6:
    :vartype ipv6: bool
    """

    ip_block: Optional[str] = rest_field(name="ipBlock")
    asns: Optional[List["_models.ObservedLong"]] = rest_field()
    bgp_prefixes: Optional[List["_models.ObservedString"]] = rest_field(name="bgpPrefixes")
    net_names: Optional[List["_models.ObservedString"]] = rest_field(name="netNames")
    registrant_contacts: Optional[List["_models.ObservedString"]] = rest_field(name="registrantContacts")
    registrant_orgs: Optional[List["_models.ObservedString"]] = rest_field(name="registrantOrgs")
    admin_contacts: Optional[List["_models.ObservedString"]] = rest_field(name="adminContacts")
    technical_contacts: Optional[List["_models.ObservedString"]] = rest_field(name="technicalContacts")
    registrar_created_at: Optional[List["_models.ObservedLong"]] = rest_field(name="registrarCreatedAt")
    registrar_updated_at: Optional[List["_models.ObservedLong"]] = rest_field(name="registrarUpdatedAt")
    net_ranges: Optional[List["_models.ObservedString"]] = rest_field(name="netRanges")
    start_ip: Optional[str] = rest_field(name="startIp")
    end_ip: Optional[str] = rest_field(name="endIp")
    reputations: Optional[List["_models.Reputation"]] = rest_field()
    detailed_from_whois_at: Optional[datetime.datetime] = rest_field(name="detailedFromWhoisAt")
    sources: Optional[List["_models.Source"]] = rest_field()
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    count: Optional[int] = rest_field()
    location: Optional[List["_models.ObservedLocation"]] = rest_field()
    registrar_expires_at: Optional[List["_models.ObservedLong"]] = rest_field(name="registrarExpiresAt")
    registrant_names: Optional[List["_models.ObservedString"]] = rest_field(name="registrantNames")
    admin_names: Optional[List["_models.ObservedString"]] = rest_field(name="adminNames")
    technical_names: Optional[List["_models.ObservedString"]] = rest_field(name="technicalNames")
    admin_orgs: Optional[List["_models.ObservedString"]] = rest_field(name="adminOrgs")
    technical_orgs: Optional[List["_models.ObservedString"]] = rest_field(name="technicalOrgs")
    registrant_phones: Optional[List["_models.ObservedString"]] = rest_field(name="registrantPhones")
    admin_phones: Optional[List["_models.ObservedString"]] = rest_field(name="adminPhones")
    technical_phones: Optional[List["_models.ObservedString"]] = rest_field(name="technicalPhones")
    ipv4: Optional[bool] = rest_field()
    ipv6: Optional[bool] = rest_field()

    @overload
    def __init__(
        self,
        *,
        ip_block: Optional[str] = None,
        asns: Optional[List["_models.ObservedLong"]] = None,
        bgp_prefixes: Optional[List["_models.ObservedString"]] = None,
        net_names: Optional[List["_models.ObservedString"]] = None,
        registrant_contacts: Optional[List["_models.ObservedString"]] = None,
        registrant_orgs: Optional[List["_models.ObservedString"]] = None,
        admin_contacts: Optional[List["_models.ObservedString"]] = None,
        technical_contacts: Optional[List["_models.ObservedString"]] = None,
        registrar_created_at: Optional[List["_models.ObservedLong"]] = None,
        registrar_updated_at: Optional[List["_models.ObservedLong"]] = None,
        net_ranges: Optional[List["_models.ObservedString"]] = None,
        start_ip: Optional[str] = None,
        end_ip: Optional[str] = None,
        reputations: Optional[List["_models.Reputation"]] = None,
        detailed_from_whois_at: Optional[datetime.datetime] = None,
        sources: Optional[List["_models.Source"]] = None,
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        count: Optional[int] = None,
        location: Optional[List["_models.ObservedLocation"]] = None,
        registrar_expires_at: Optional[List["_models.ObservedLong"]] = None,
        registrant_names: Optional[List["_models.ObservedString"]] = None,
        admin_names: Optional[List["_models.ObservedString"]] = None,
        technical_names: Optional[List["_models.ObservedString"]] = None,
        admin_orgs: Optional[List["_models.ObservedString"]] = None,
        technical_orgs: Optional[List["_models.ObservedString"]] = None,
        registrant_phones: Optional[List["_models.ObservedString"]] = None,
        admin_phones: Optional[List["_models.ObservedString"]] = None,
        technical_phones: Optional[List["_models.ObservedString"]] = None,
        ipv4: Optional[bool] = None,
        ipv6: Optional[bool] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class IpBlockAssetResponse(AssetResponse, discriminator="ipBlock"):  # pylint: disable=too-many-instance-attributes
    """IpBlockAssetResponse.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The system generated unique id for the resource.
    :vartype id: str
    :ivar name: The caller provided unique name for the resource.
    :vartype name: str
    :ivar display_name: The name that can be used for display purposes.
    :vartype display_name: str
    :ivar uuid: Global UUID for the asset.
    :vartype uuid: str
    :ivar created_date: The date this asset was first added to this workspace.
    :vartype created_date: ~datetime.datetime
    :ivar updated_date: The date this asset was last updated for this workspace.
    :vartype updated_date: ~datetime.datetime
    :ivar state: Known values are: "candidate", "confirmed", "dismissed", "candidateInvestigate",
     "associatedPartner", "associatedThirdparty", and "archived".
    :vartype state: str or ~azure.defender.easm.models.AssetState
    :ivar external_id: An optional customer provided identifier for this asset.
    :vartype external_id: str
    :ivar labels: Customer labels assigned to this asset.
    :vartype labels: list[str]
    :ivar wildcard: An indicator of whether this asset represents a wildcard rollup of assets on
     this domain.
    :vartype wildcard: bool
    :ivar disco_group_name: The name of the DiscoveryGroup that brought added this asset to the
     workspace.
    :vartype disco_group_name: str
    :ivar audit_trail: The history of how this asset was pulled into the workspace through the
     discovery process.
    :vartype audit_trail: list[~azure.defender.easm.models.AuditTrailItem]
    :ivar reason:
    :vartype reason: str
    :ivar kind: Required. Default value is "ipBlock".
    :vartype kind: str
    :ivar asset: Required.
    :vartype asset: ~azure.defender.easm.models.IpBlockAsset
    """

    kind: Literal["ipBlock"] = rest_discriminator(name="kind")  # type: ignore
    """Required. Default value is \"ipBlock\"."""
    asset: "_models.IpBlockAsset" = rest_field()
    """Required."""

    @overload
    def __init__(
        self,
        *,
        asset: "_models.IpBlockAsset",
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        display_name: Optional[str] = None,
        uuid: Optional[str] = None,
        created_date: Optional[datetime.datetime] = None,
        updated_date: Optional[datetime.datetime] = None,
        state: Optional[Union[str, "_models.AssetState"]] = None,
        external_id: Optional[str] = None,
        labels: Optional[List[str]] = None,
        wildcard: Optional[bool] = None,
        disco_group_name: Optional[str] = None,
        audit_trail: Optional[List["_models.AuditTrailItem"]] = None,
        reason: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.kind: Literal["ipBlock"] = "ipBlock"


class Location(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Location.

    :ivar country_code:
    :vartype country_code: str
    :ivar country_name:
    :vartype country_name: str
    :ivar region:
    :vartype region: str
    :ivar region_name:
    :vartype region_name: str
    :ivar city:
    :vartype city: str
    :ivar area_code:
    :vartype area_code: int
    :ivar postal_code:
    :vartype postal_code: str
    :ivar latitude:
    :vartype latitude: float
    :ivar longitude:
    :vartype longitude: float
    :ivar dma_code:
    :vartype dma_code: int
    :ivar metro_code_id:
    :vartype metro_code_id: int
    """

    country_code: Optional[str] = rest_field(name="countryCode")
    country_name: Optional[str] = rest_field(name="countryName")
    region: Optional[str] = rest_field()
    region_name: Optional[str] = rest_field(name="regionName")
    city: Optional[str] = rest_field()
    area_code: Optional[int] = rest_field(name="areaCode")
    postal_code: Optional[str] = rest_field(name="postalCode")
    latitude: Optional[float] = rest_field()
    longitude: Optional[float] = rest_field()
    dma_code: Optional[int] = rest_field(name="dmaCode")
    metro_code_id: Optional[int] = rest_field(name="metroCodeId")

    @overload
    def __init__(
        self,
        *,
        country_code: Optional[str] = None,
        country_name: Optional[str] = None,
        region: Optional[str] = None,
        region_name: Optional[str] = None,
        city: Optional[str] = None,
        area_code: Optional[int] = None,
        postal_code: Optional[str] = None,
        latitude: Optional[float] = None,
        longitude: Optional[float] = None,
        dma_code: Optional[int] = None,
        metro_code_id: Optional[int] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class LogAnalyticsDataConnectionProperties(_model_base.Model):
    """LogAnalyticsDataConnectionProperties.

    :ivar api_key: log analytics api key.
    :vartype api_key: str
    :ivar workspace_id: log analytics workspace id.
    :vartype workspace_id: str
    """

    api_key: Optional[str] = rest_field(name="apiKey")
    """log analytics api key."""
    workspace_id: Optional[str] = rest_field(name="workspaceId")
    """log analytics workspace id."""

    @overload
    def __init__(
        self,
        *,
        api_key: Optional[str] = None,
        workspace_id: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class LogAnalyticsDataConnectionRequest(DataConnectionRequest, discriminator="logAnalytics"):
    """LogAnalyticsDataConnectionRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar name: The name of data connection.
    :vartype name: str
    :ivar content: The type of data the data connection will transfer. Known values are: "assets"
     and "attackSurfaceInsights".
    :vartype content: str or ~azure.defender.easm.models.DataConnectionContent
    :ivar frequency: The rate at which the data connection will receive updates. Known values are:
     "daily", "weekly", and "monthly".
    :vartype frequency: str or ~azure.defender.easm.models.DataConnectionFrequency
    :ivar frequency_offset: The day to update the data connection on. (1-7 for weekly, 1-31 for
     monthly).
    :vartype frequency_offset: int
    :ivar kind: Required. Default value is "logAnalytics".
    :vartype kind: str
    :ivar properties: Required.
    :vartype properties: ~azure.defender.easm.models.LogAnalyticsDataConnectionProperties
    """

    kind: Literal["logAnalytics"] = rest_discriminator(name="kind")  # type: ignore
    """Required. Default value is \"logAnalytics\"."""
    properties: "_models.LogAnalyticsDataConnectionProperties" = rest_field()
    """Required."""

    @overload
    def __init__(
        self,
        *,
        properties: "_models.LogAnalyticsDataConnectionProperties",
        name: Optional[str] = None,
        content: Optional[Union[str, "_models.DataConnectionContent"]] = None,
        frequency: Optional[Union[str, "_models.DataConnectionFrequency"]] = None,
        frequency_offset: Optional[int] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.kind: Literal["logAnalytics"] = "logAnalytics"


class LogAnalyticsDataConnectionResponse(
    DataConnectionResponse, discriminator="logAnalytics"
):  # pylint: disable=too-many-instance-attributes
    """LogAnalyticsDataConnectionResponse.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The system generated unique id for the resource.
    :vartype id: str
    :ivar name: The caller provided unique name for the resource.
    :vartype name: str
    :ivar display_name: The name that can be used for display purposes.
    :vartype display_name: str
    :ivar content: The type of data the data connection will transfer. Known values are: "assets"
     and "attackSurfaceInsights".
    :vartype content: str or ~azure.defender.easm.models.DataConnectionContent
    :ivar created_date: The date the data connection was created.
    :vartype created_date: ~datetime.datetime
    :ivar frequency: The rate at which the data connection will receive updates. Known values are:
     "daily", "weekly", and "monthly".
    :vartype frequency: str or ~azure.defender.easm.models.DataConnectionFrequency
    :ivar frequency_offset: The day to update the data connection on.
    :vartype frequency_offset: int
    :ivar updated_date: The date the data connection was last updated.
    :vartype updated_date: ~datetime.datetime
    :ivar user_updated_at: The date the data connection was last updated by user.
    :vartype user_updated_at: ~datetime.datetime
    :ivar active: An indicator of whether the data connection is active.
    :vartype active: bool
    :ivar inactive_message: A message that specifies details about data connection if inactive.
    :vartype inactive_message: str
    :ivar kind: Required. Default value is "logAnalytics".
    :vartype kind: str
    :ivar properties: Required.
    :vartype properties: ~azure.defender.easm.models.LogAnalyticsDataConnectionProperties
    """

    kind: Literal["logAnalytics"] = rest_discriminator(name="kind")  # type: ignore
    """Required. Default value is \"logAnalytics\"."""
    properties: "_models.LogAnalyticsDataConnectionProperties" = rest_field()
    """Required."""

    @overload
    def __init__(
        self,
        *,
        properties: "_models.LogAnalyticsDataConnectionProperties",
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        display_name: Optional[str] = None,
        content: Optional[Union[str, "_models.DataConnectionContent"]] = None,
        created_date: Optional[datetime.datetime] = None,
        frequency: Optional[Union[str, "_models.DataConnectionFrequency"]] = None,
        frequency_offset: Optional[int] = None,
        updated_date: Optional[datetime.datetime] = None,
        user_updated_at: Optional[datetime.datetime] = None,
        active: Optional[bool] = None,
        inactive_message: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.kind: Literal["logAnalytics"] = "logAnalytics"


class ObservedBoolean(_model_base.Model):
    """ObservedBoolean.

    :ivar value:
    :vartype value: bool
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar count:
    :vartype count: int
    :ivar sources:
    :vartype sources: list[~azure.defender.easm.models.Source]
    :ivar recent:
    :vartype recent: bool
    """

    value: Optional[bool] = rest_field()
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    count: Optional[int] = rest_field()
    sources: Optional[List["_models.Source"]] = rest_field()
    recent: Optional[bool] = rest_field()

    @overload
    def __init__(
        self,
        *,
        value: Optional[bool] = None,
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        count: Optional[int] = None,
        sources: Optional[List["_models.Source"]] = None,
        recent: Optional[bool] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ObservedHeader(_model_base.Model):
    """ObservedHeader.

    :ivar header_name:
    :vartype header_name: str
    :ivar header_value:
    :vartype header_value: str
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar count:
    :vartype count: int
    :ivar recent:
    :vartype recent: bool
    """

    header_name: Optional[str] = rest_field(name="headerName")
    header_value: Optional[str] = rest_field(name="headerValue")
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    count: Optional[int] = rest_field()
    recent: Optional[bool] = rest_field()

    @overload
    def __init__(
        self,
        *,
        header_name: Optional[str] = None,
        header_value: Optional[str] = None,
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        count: Optional[int] = None,
        recent: Optional[bool] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ObservedInteger(_model_base.Model):
    """ObservedInteger.

    :ivar value:
    :vartype value: int
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar count:
    :vartype count: int
    :ivar sources:
    :vartype sources: list[~azure.defender.easm.models.Source]
    :ivar recent:
    :vartype recent: bool
    """

    value: Optional[int] = rest_field()
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    count: Optional[int] = rest_field()
    sources: Optional[List["_models.Source"]] = rest_field()
    recent: Optional[bool] = rest_field()

    @overload
    def __init__(
        self,
        *,
        value: Optional[int] = None,
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        count: Optional[int] = None,
        sources: Optional[List["_models.Source"]] = None,
        recent: Optional[bool] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ObservedIntegers(_model_base.Model):
    """ObservedIntegers.

    :ivar values:
    :vartype values: list[int]
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar count:
    :vartype count: int
    :ivar sources:
    :vartype sources: list[~azure.defender.easm.models.Source]
    :ivar recent:
    :vartype recent: bool
    """

    values: Optional[List[int]] = rest_field()
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    count: Optional[int] = rest_field()
    sources: Optional[List["_models.Source"]] = rest_field()
    recent: Optional[bool] = rest_field()

    @overload
    def __init__(
        self,
        *,
        values: Optional[List[int]] = None,
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        count: Optional[int] = None,
        sources: Optional[List["_models.Source"]] = None,
        recent: Optional[bool] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ObservedLocation(_model_base.Model):
    """ObservedLocation.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required.
    :vartype value: ~azure.defender.easm.models.Location
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar count:
    :vartype count: int
    :ivar recent:
    :vartype recent: bool
    :ivar sources:
    :vartype sources: list[~azure.defender.easm.models.Source]
    """

    value: "_models.Location" = rest_field()
    """Required."""
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    count: Optional[int] = rest_field()
    recent: Optional[bool] = rest_field()
    sources: Optional[List["_models.Source"]] = rest_field()

    @overload
    def __init__(
        self,
        *,
        value: "_models.Location",
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        count: Optional[int] = None,
        recent: Optional[bool] = None,
        sources: Optional[List["_models.Source"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ObservedLong(_model_base.Model):
    """ObservedLong.

    :ivar value:
    :vartype value: int
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar count:
    :vartype count: int
    :ivar sources:
    :vartype sources: list[~azure.defender.easm.models.Source]
    :ivar recent:
    :vartype recent: bool
    """

    value: Optional[int] = rest_field()
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    count: Optional[int] = rest_field()
    sources: Optional[List["_models.Source"]] = rest_field()
    recent: Optional[bool] = rest_field()

    @overload
    def __init__(
        self,
        *,
        value: Optional[int] = None,
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        count: Optional[int] = None,
        sources: Optional[List["_models.Source"]] = None,
        recent: Optional[bool] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ObservedPortState(_model_base.Model):
    """ObservedPortState.

    :ivar value: Known values are: "open", "closed", and "filtered".
    :vartype value: str or ~azure.defender.easm.models.ObservedPortStateValue
    :ivar port:
    :vartype port: int
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar count:
    :vartype count: int
    :ivar recent:
    :vartype recent: bool
    """

    value: Optional[Union[str, "_models.ObservedPortStateValue"]] = rest_field()
    """Known values are: \"open\", \"closed\", and \"filtered\"."""
    port: Optional[int] = rest_field()
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    count: Optional[int] = rest_field()
    recent: Optional[bool] = rest_field()

    @overload
    def __init__(
        self,
        *,
        value: Optional[Union[str, "_models.ObservedPortStateValue"]] = None,
        port: Optional[int] = None,
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        count: Optional[int] = None,
        recent: Optional[bool] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ObservedString(_model_base.Model):
    """ObservedString.

    :ivar value:
    :vartype value: str
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar count:
    :vartype count: int
    :ivar sources:
    :vartype sources: list[~azure.defender.easm.models.Source]
    :ivar recent:
    :vartype recent: bool
    """

    value: Optional[str] = rest_field()
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    count: Optional[int] = rest_field()
    sources: Optional[List["_models.Source"]] = rest_field()
    recent: Optional[bool] = rest_field()

    @overload
    def __init__(
        self,
        *,
        value: Optional[str] = None,
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        count: Optional[int] = None,
        sources: Optional[List["_models.Source"]] = None,
        recent: Optional[bool] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class PageAsset(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """PageAsset.

    All required parameters must be populated in order to send to Azure.

    :ivar url:
    :vartype url: str
    :ivar http_method:
    :vartype http_method: str
    :ivar service:
    :vartype service: str
    :ivar ip_addresses:
    :vartype ip_addresses: list[~azure.defender.easm.models.ObservedString]
    :ivar successful:
    :vartype successful: list[~azure.defender.easm.models.ObservedBoolean]
    :ivar http_response_codes:
    :vartype http_response_codes: list[~azure.defender.easm.models.ObservedInteger]
    :ivar http_response_messages:
    :vartype http_response_messages: list[~azure.defender.easm.models.ObservedString]
    :ivar response_times:
    :vartype response_times: list[~azure.defender.easm.models.ObservedLong]
    :ivar frames:
    :vartype frames: list[~azure.defender.easm.models.ObservedBoolean]
    :ivar windows:
    :vartype windows: list[~azure.defender.easm.models.ObservedBoolean]
    :ivar non_html_frames:
    :vartype non_html_frames: list[~azure.defender.easm.models.ObservedBoolean]
    :ivar undirected_content:
    :vartype undirected_content: list[~azure.defender.easm.models.ObservedBoolean]
    :ivar content_types:
    :vartype content_types: list[~azure.defender.easm.models.ObservedString]
    :ivar content_lengths:
    :vartype content_lengths: list[~azure.defender.easm.models.ObservedLong]
    :ivar window_names:
    :vartype window_names: list[~azure.defender.easm.models.ObservedString]
    :ivar charsets:
    :vartype charsets: list[~azure.defender.easm.models.ObservedString]
    :ivar titles:
    :vartype titles: list[~azure.defender.easm.models.ObservedString]
    :ivar languages:
    :vartype languages: list[~azure.defender.easm.models.ObservedString]
    :ivar response_headers:
    :vartype response_headers: list[~azure.defender.easm.models.ObservedHeader]
    :ivar cookies:
    :vartype cookies: list[~azure.defender.easm.models.Cookie]
    :ivar web_components:
    :vartype web_components: list[~azure.defender.easm.models.WebComponent]
    :ivar attributes:
    :vartype attributes: list[~azure.defender.easm.models.Attribute]
    :ivar asset_security_policies:
    :vartype asset_security_policies: list[~azure.defender.easm.models.AssetSecurityPolicy]
    :ivar response_body_minhash_signatures:
    :vartype response_body_minhash_signatures: list[~azure.defender.easm.models.ObservedIntegers]
    :ivar full_dom_minhash_signatures:
    :vartype full_dom_minhash_signatures: list[~azure.defender.easm.models.ObservedIntegers]
    :ivar response_body_hash_signatures:
    :vartype response_body_hash_signatures: list[~azure.defender.easm.models.ObservedString]
    :ivar errors:
    :vartype errors: list[~azure.defender.easm.models.ObservedString]
    :ivar ssl_certs:
    :vartype ssl_certs: list[~azure.defender.easm.models.SslCertAsset]
    :ivar sources:
    :vartype sources: list[~azure.defender.easm.models.Source]
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar count:
    :vartype count: int
    :ivar cause: Required.
    :vartype cause: ~azure.defender.easm.models.PageCause
    :ivar referrer:
    :vartype referrer: str
    :ivar redirect_urls:
    :vartype redirect_urls: list[~azure.defender.easm.models.ObservedString]
    :ivar redirect_type: Known values are: "httpHeader", "metaRefresh", "javascript", and "final".
    :vartype redirect_type: str or ~azure.defender.easm.models.PageAssetRedirectType
    :ivar final_urls:
    :vartype final_urls: list[~azure.defender.easm.models.ObservedString]
    :ivar final_response_codes:
    :vartype final_response_codes: list[~azure.defender.easm.models.ObservedInteger]
    :ivar parked_page:
    :vartype parked_page: list[~azure.defender.easm.models.ObservedBoolean]
    :ivar resource_urls:
    :vartype resource_urls: list[~azure.defender.easm.models.ResourceUrl]
    :ivar guids:
    :vartype guids: list[~azure.defender.easm.models.GuidPair]
    :ivar final_ip_addresses:
    :vartype final_ip_addresses: list[~azure.defender.easm.models.ObservedString]
    :ivar asns:
    :vartype asns: list[~azure.defender.easm.models.ObservedLong]
    :ivar ip_blocks:
    :vartype ip_blocks: list[~azure.defender.easm.models.IpBlock]
    :ivar final_asns:
    :vartype final_asns: list[~azure.defender.easm.models.ObservedLong]
    :ivar final_ip_blocks:
    :vartype final_ip_blocks: list[~azure.defender.easm.models.IpBlock]
    :ivar response_bodies:
    :vartype response_bodies: list[~azure.defender.easm.models.ObservedString]
    :ivar domain_asset: Required.
    :vartype domain_asset: ~azure.defender.easm.models.DomainAsset
    :ivar root_url: Required.
    :vartype root_url: ~azure.defender.easm.models.ObservedBoolean
    :ivar is_root_url:
    :vartype is_root_url: bool
    :ivar location:
    :vartype location: list[~azure.defender.easm.models.ObservedLocation]
    :ivar services:
    :vartype services: list[~azure.defender.easm.models.Service]
    :ivar site_status:
    :vartype site_status: str
    :ivar cnames:
    :vartype cnames: list[~azure.defender.easm.models.ObservedString]
    :ivar cdns:
    :vartype cdns: list[~azure.defender.easm.models.ObservedString]
    :ivar host:
    :vartype host: str
    :ivar domain:
    :vartype domain: str
    :ivar ssl_server_config:
    :vartype ssl_server_config: list[~azure.defender.easm.models.SslServerConfig]
    :ivar gdpr_asset_security_policies:
    :vartype gdpr_asset_security_policies: list[~azure.defender.easm.models.AssetSecurityPolicy]
    :ivar ipv4:
    :vartype ipv4: list[~azure.defender.easm.models.ObservedBoolean]
    :ivar ipv6:
    :vartype ipv6: list[~azure.defender.easm.models.ObservedBoolean]
    """

    url: Optional[str] = rest_field()
    http_method: Optional[str] = rest_field(name="httpMethod")
    service: Optional[str] = rest_field()
    ip_addresses: Optional[List["_models.ObservedString"]] = rest_field(name="ipAddresses")
    successful: Optional[List["_models.ObservedBoolean"]] = rest_field()
    http_response_codes: Optional[List["_models.ObservedInteger"]] = rest_field(name="httpResponseCodes")
    http_response_messages: Optional[List["_models.ObservedString"]] = rest_field(name="httpResponseMessages")
    response_times: Optional[List["_models.ObservedLong"]] = rest_field(name="responseTimes")
    frames: Optional[List["_models.ObservedBoolean"]] = rest_field()
    windows: Optional[List["_models.ObservedBoolean"]] = rest_field()
    non_html_frames: Optional[List["_models.ObservedBoolean"]] = rest_field(name="nonHtmlFrames")
    undirected_content: Optional[List["_models.ObservedBoolean"]] = rest_field(name="undirectedContent")
    content_types: Optional[List["_models.ObservedString"]] = rest_field(name="contentTypes")
    content_lengths: Optional[List["_models.ObservedLong"]] = rest_field(name="contentLengths")
    window_names: Optional[List["_models.ObservedString"]] = rest_field(name="windowNames")
    charsets: Optional[List["_models.ObservedString"]] = rest_field()
    titles: Optional[List["_models.ObservedString"]] = rest_field()
    languages: Optional[List["_models.ObservedString"]] = rest_field()
    response_headers: Optional[List["_models.ObservedHeader"]] = rest_field(name="responseHeaders")
    cookies: Optional[List["_models.Cookie"]] = rest_field()
    web_components: Optional[List["_models.WebComponent"]] = rest_field(name="webComponents")
    attributes: Optional[List["_models.Attribute"]] = rest_field()
    asset_security_policies: Optional[List["_models.AssetSecurityPolicy"]] = rest_field(name="assetSecurityPolicies")
    response_body_minhash_signatures: Optional[List["_models.ObservedIntegers"]] = rest_field(
        name="responseBodyMinhashSignatures"
    )
    full_dom_minhash_signatures: Optional[List["_models.ObservedIntegers"]] = rest_field(
        name="fullDomMinhashSignatures"
    )
    response_body_hash_signatures: Optional[List["_models.ObservedString"]] = rest_field(
        name="responseBodyHashSignatures"
    )
    errors: Optional[List["_models.ObservedString"]] = rest_field()
    ssl_certs: Optional[List["_models.SslCertAsset"]] = rest_field(name="sslCerts")
    sources: Optional[List["_models.Source"]] = rest_field()
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    count: Optional[int] = rest_field()
    cause: "_models.PageCause" = rest_field()
    """Required."""
    referrer: Optional[str] = rest_field()
    redirect_urls: Optional[List["_models.ObservedString"]] = rest_field(name="redirectUrls")
    redirect_type: Optional[Union[str, "_models.PageAssetRedirectType"]] = rest_field(name="redirectType")
    """Known values are: \"httpHeader\", \"metaRefresh\", \"javascript\", and \"final\"."""
    final_urls: Optional[List["_models.ObservedString"]] = rest_field(name="finalUrls")
    final_response_codes: Optional[List["_models.ObservedInteger"]] = rest_field(name="finalResponseCodes")
    parked_page: Optional[List["_models.ObservedBoolean"]] = rest_field(name="parkedPage")
    resource_urls: Optional[List["_models.ResourceUrl"]] = rest_field(name="resourceUrls")
    guids: Optional[List["_models.GuidPair"]] = rest_field()
    final_ip_addresses: Optional[List["_models.ObservedString"]] = rest_field(name="finalIpAddresses")
    asns: Optional[List["_models.ObservedLong"]] = rest_field()
    ip_blocks: Optional[List["_models.IpBlock"]] = rest_field(name="ipBlocks")
    final_asns: Optional[List["_models.ObservedLong"]] = rest_field(name="finalAsns")
    final_ip_blocks: Optional[List["_models.IpBlock"]] = rest_field(name="finalIpBlocks")
    response_bodies: Optional[List["_models.ObservedString"]] = rest_field(name="responseBodies")
    domain_asset: "_models.DomainAsset" = rest_field(name="domainAsset")
    """Required."""
    root_url: "_models.ObservedBoolean" = rest_field(name="rootUrl")
    """Required."""
    is_root_url: Optional[bool] = rest_field(name="isRootUrl")
    location: Optional[List["_models.ObservedLocation"]] = rest_field()
    services: Optional[List["_models.Service"]] = rest_field()
    site_status: Optional[str] = rest_field(name="siteStatus")
    cnames: Optional[List["_models.ObservedString"]] = rest_field()
    cdns: Optional[List["_models.ObservedString"]] = rest_field()
    host: Optional[str] = rest_field()
    domain: Optional[str] = rest_field()
    ssl_server_config: Optional[List["_models.SslServerConfig"]] = rest_field(name="sslServerConfig")
    gdpr_asset_security_policies: Optional[List["_models.AssetSecurityPolicy"]] = rest_field(
        name="gdprAssetSecurityPolicies"
    )
    ipv4: Optional[List["_models.ObservedBoolean"]] = rest_field()
    ipv6: Optional[List["_models.ObservedBoolean"]] = rest_field()

    @overload
    def __init__(
        self,
        *,
        cause: "_models.PageCause",
        domain_asset: "_models.DomainAsset",
        root_url: "_models.ObservedBoolean",
        url: Optional[str] = None,
        http_method: Optional[str] = None,
        service: Optional[str] = None,
        ip_addresses: Optional[List["_models.ObservedString"]] = None,
        successful: Optional[List["_models.ObservedBoolean"]] = None,
        http_response_codes: Optional[List["_models.ObservedInteger"]] = None,
        http_response_messages: Optional[List["_models.ObservedString"]] = None,
        response_times: Optional[List["_models.ObservedLong"]] = None,
        frames: Optional[List["_models.ObservedBoolean"]] = None,
        windows: Optional[List["_models.ObservedBoolean"]] = None,
        non_html_frames: Optional[List["_models.ObservedBoolean"]] = None,
        undirected_content: Optional[List["_models.ObservedBoolean"]] = None,
        content_types: Optional[List["_models.ObservedString"]] = None,
        content_lengths: Optional[List["_models.ObservedLong"]] = None,
        window_names: Optional[List["_models.ObservedString"]] = None,
        charsets: Optional[List["_models.ObservedString"]] = None,
        titles: Optional[List["_models.ObservedString"]] = None,
        languages: Optional[List["_models.ObservedString"]] = None,
        response_headers: Optional[List["_models.ObservedHeader"]] = None,
        cookies: Optional[List["_models.Cookie"]] = None,
        web_components: Optional[List["_models.WebComponent"]] = None,
        attributes: Optional[List["_models.Attribute"]] = None,
        asset_security_policies: Optional[List["_models.AssetSecurityPolicy"]] = None,
        response_body_minhash_signatures: Optional[List["_models.ObservedIntegers"]] = None,
        full_dom_minhash_signatures: Optional[List["_models.ObservedIntegers"]] = None,
        response_body_hash_signatures: Optional[List["_models.ObservedString"]] = None,
        errors: Optional[List["_models.ObservedString"]] = None,
        ssl_certs: Optional[List["_models.SslCertAsset"]] = None,
        sources: Optional[List["_models.Source"]] = None,
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        count: Optional[int] = None,
        referrer: Optional[str] = None,
        redirect_urls: Optional[List["_models.ObservedString"]] = None,
        redirect_type: Optional[Union[str, "_models.PageAssetRedirectType"]] = None,
        final_urls: Optional[List["_models.ObservedString"]] = None,
        final_response_codes: Optional[List["_models.ObservedInteger"]] = None,
        parked_page: Optional[List["_models.ObservedBoolean"]] = None,
        resource_urls: Optional[List["_models.ResourceUrl"]] = None,
        guids: Optional[List["_models.GuidPair"]] = None,
        final_ip_addresses: Optional[List["_models.ObservedString"]] = None,
        asns: Optional[List["_models.ObservedLong"]] = None,
        ip_blocks: Optional[List["_models.IpBlock"]] = None,
        final_asns: Optional[List["_models.ObservedLong"]] = None,
        final_ip_blocks: Optional[List["_models.IpBlock"]] = None,
        response_bodies: Optional[List["_models.ObservedString"]] = None,
        is_root_url: Optional[bool] = None,
        location: Optional[List["_models.ObservedLocation"]] = None,
        services: Optional[List["_models.Service"]] = None,
        site_status: Optional[str] = None,
        cnames: Optional[List["_models.ObservedString"]] = None,
        cdns: Optional[List["_models.ObservedString"]] = None,
        host: Optional[str] = None,
        domain: Optional[str] = None,
        ssl_server_config: Optional[List["_models.SslServerConfig"]] = None,
        gdpr_asset_security_policies: Optional[List["_models.AssetSecurityPolicy"]] = None,
        ipv4: Optional[List["_models.ObservedBoolean"]] = None,
        ipv6: Optional[List["_models.ObservedBoolean"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class PageAssetResponse(AssetResponse, discriminator="page"):  # pylint: disable=too-many-instance-attributes
    """PageAssetResponse.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The system generated unique id for the resource.
    :vartype id: str
    :ivar name: The caller provided unique name for the resource.
    :vartype name: str
    :ivar display_name: The name that can be used for display purposes.
    :vartype display_name: str
    :ivar uuid: Global UUID for the asset.
    :vartype uuid: str
    :ivar created_date: The date this asset was first added to this workspace.
    :vartype created_date: ~datetime.datetime
    :ivar updated_date: The date this asset was last updated for this workspace.
    :vartype updated_date: ~datetime.datetime
    :ivar state: Known values are: "candidate", "confirmed", "dismissed", "candidateInvestigate",
     "associatedPartner", "associatedThirdparty", and "archived".
    :vartype state: str or ~azure.defender.easm.models.AssetState
    :ivar external_id: An optional customer provided identifier for this asset.
    :vartype external_id: str
    :ivar labels: Customer labels assigned to this asset.
    :vartype labels: list[str]
    :ivar wildcard: An indicator of whether this asset represents a wildcard rollup of assets on
     this domain.
    :vartype wildcard: bool
    :ivar disco_group_name: The name of the DiscoveryGroup that brought added this asset to the
     workspace.
    :vartype disco_group_name: str
    :ivar audit_trail: The history of how this asset was pulled into the workspace through the
     discovery process.
    :vartype audit_trail: list[~azure.defender.easm.models.AuditTrailItem]
    :ivar reason:
    :vartype reason: str
    :ivar kind: Required. Default value is "page".
    :vartype kind: str
    :ivar asset: Required.
    :vartype asset: ~azure.defender.easm.models.PageAsset
    """

    kind: Literal["page"] = rest_discriminator(name="kind")  # type: ignore
    """Required. Default value is \"page\"."""
    asset: "_models.PageAsset" = rest_field()
    """Required."""

    @overload
    def __init__(
        self,
        *,
        asset: "_models.PageAsset",
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        display_name: Optional[str] = None,
        uuid: Optional[str] = None,
        created_date: Optional[datetime.datetime] = None,
        updated_date: Optional[datetime.datetime] = None,
        state: Optional[Union[str, "_models.AssetState"]] = None,
        external_id: Optional[str] = None,
        labels: Optional[List[str]] = None,
        wildcard: Optional[bool] = None,
        disco_group_name: Optional[str] = None,
        audit_trail: Optional[List["_models.AuditTrailItem"]] = None,
        reason: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.kind: Literal["page"] = "page"


class PageCause(_model_base.Model):
    """PageCause.

    :ivar cause:
    :vartype cause: str
    :ivar cause_element_x_path:
    :vartype cause_element_x_path: str
    :ivar location:
    :vartype location: str
    :ivar possible_matches:
    :vartype possible_matches: int
    :ivar loop_detected:
    :vartype loop_detected: bool
    :ivar version:
    :vartype version: int
    :ivar dom_change_index:
    :vartype dom_change_index: int
    """

    cause: Optional[str] = rest_field()
    cause_element_x_path: Optional[str] = rest_field(name="causeElementXPath")
    location: Optional[str] = rest_field()
    possible_matches: Optional[int] = rest_field(name="possibleMatches")
    loop_detected: Optional[bool] = rest_field(name="loopDetected")
    version: Optional[int] = rest_field()
    dom_change_index: Optional[int] = rest_field(name="domChangeIndex")

    @overload
    def __init__(
        self,
        *,
        cause: Optional[str] = None,
        cause_element_x_path: Optional[str] = None,
        location: Optional[str] = None,
        possible_matches: Optional[int] = None,
        loop_detected: Optional[bool] = None,
        version: Optional[int] = None,
        dom_change_index: Optional[int] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Port(_model_base.Model):
    """Port.

    :ivar port:
    :vartype port: int
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar count:
    :vartype count: int
    """

    port: Optional[int] = rest_field()
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    count: Optional[int] = rest_field()

    @overload
    def __init__(
        self,
        *,
        port: Optional[int] = None,
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        count: Optional[int] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ReportAssetSnapshotExportRequest(_model_base.Model):
    """ReportAssetSnapshotExportRequest.

    :ivar metric: The metric to retrieve a snapshot for.
    :vartype metric: str
    :ivar file_name: The filename of the exported file.
    :vartype file_name: str
    :ivar columns: The columns to include in the export.
    :vartype columns: list[str]
    """

    metric: Optional[str] = rest_field()
    """The metric to retrieve a snapshot for."""
    file_name: Optional[str] = rest_field(name="fileName")
    """The filename of the exported file."""
    columns: Optional[List[str]] = rest_field()
    """The columns to include in the export."""

    @overload
    def __init__(
        self,
        *,
        metric: Optional[str] = None,
        file_name: Optional[str] = None,
        columns: Optional[List[str]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ReportAssetSnapshotRequest(_model_base.Model):
    """ReportAssetSnapshotRequest.

    :ivar metric: The metric to retrieve a snapshot for.
    :vartype metric: str
    :ivar label_name: The name of the label to retrieve a snapshot for.
    :vartype label_name: str
    :ivar size: The number of assets per page.
    :vartype size: int
    :ivar page: The page to retrieve.
    :vartype page: int
    """

    metric: Optional[str] = rest_field()
    """The metric to retrieve a snapshot for."""
    label_name: Optional[str] = rest_field(name="labelName")
    """The name of the label to retrieve a snapshot for."""
    size: Optional[int] = rest_field()
    """The number of assets per page."""
    page: Optional[int] = rest_field()
    """The page to retrieve."""

    @overload
    def __init__(
        self,
        *,
        metric: Optional[str] = None,
        label_name: Optional[str] = None,
        size: Optional[int] = None,
        page: Optional[int] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ReportAssetSnapshotResponse(_model_base.Model):
    """ReportAssetSnapshotResponse.

    All required parameters must be populated in order to send to Azure.

    :ivar display_name: The name of the metric.
    :vartype display_name: str
    :ivar metric: The unique metric name.
    :vartype metric: str
    :ivar label_name: The customer label that was filtered on, if one was provided.
    :vartype label_name: str
    :ivar updated_at: The last time this asset data was updated on this metric.
    :vartype updated_at: ~datetime.datetime
    :ivar description: A description of what the metric represents.
    :vartype description: str
    :ivar assets: Required.
    :vartype assets: ~azure.defender.easm.models.AssetPageResponse
    """

    display_name: Optional[str] = rest_field(name="displayName")
    """The name of the metric."""
    metric: Optional[str] = rest_field()
    """The unique metric name."""
    label_name: Optional[str] = rest_field(name="labelName")
    """The customer label that was filtered on, if one was provided."""
    updated_at: Optional[datetime.datetime] = rest_field(name="updatedAt")
    """The last time this asset data was updated on this metric."""
    description: Optional[str] = rest_field()
    """A description of what the metric represents."""
    assets: "_models.AssetPageResponse" = rest_field()
    """Required."""

    @overload
    def __init__(
        self,
        *,
        assets: "_models.AssetPageResponse",
        display_name: Optional[str] = None,
        metric: Optional[str] = None,
        label_name: Optional[str] = None,
        updated_at: Optional[datetime.datetime] = None,
        description: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ReportAssetSummaryRequest(_model_base.Model):
    """ReportAssetSummaryRequest.

    :ivar metric_categories: Categories to retrieve risk reporting data for.
    :vartype metric_categories: list[str]
    :ivar metrics: Metrics to retrieve risk reporting data for.
    :vartype metrics: list[str]
    :ivar filters: Query filters to apply to the asset summary.
    :vartype filters: list[str]
    :ivar group_by: A parameter to group the assets by (first level facet field), only used when
     the chosen summary identifier is filters.
    :vartype group_by: str
    :ivar segment_by: A parameter to segment the assets by (second level facet field), only used
     when the chosen summary identifier is filters.
    :vartype segment_by: str
    :ivar label_name: Currently unused.
    :vartype label_name: str
    """

    metric_categories: Optional[List[str]] = rest_field(name="metricCategories")
    """Categories to retrieve risk reporting data for."""
    metrics: Optional[List[str]] = rest_field()
    """Metrics to retrieve risk reporting data for."""
    filters: Optional[List[str]] = rest_field()
    """Query filters to apply to the asset summary."""
    group_by: Optional[str] = rest_field(name="groupBy")
    """A parameter to group the assets by (first level facet field), only used when the chosen summary
     identifier is filters."""
    segment_by: Optional[str] = rest_field(name="segmentBy")
    """A parameter to segment the assets by (second level facet field), only used when the chosen
     summary identifier is filters."""
    label_name: Optional[str] = rest_field(name="labelName")
    """Currently unused."""

    @overload
    def __init__(
        self,
        *,
        metric_categories: Optional[List[str]] = None,
        metrics: Optional[List[str]] = None,
        filters: Optional[List[str]] = None,
        group_by: Optional[str] = None,
        segment_by: Optional[str] = None,
        label_name: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ReportAssetSummaryResponse(_model_base.Model):
    """ReportAssetSummaryResponse.

    :ivar asset_summaries: The collection of asset summaries.
    :vartype asset_summaries: list[~azure.defender.easm.models.AssetSummaryResponse]
    """

    asset_summaries: Optional[List["_models.AssetSummaryResponse"]] = rest_field(name="assetSummaries")
    """The collection of asset summaries."""

    @overload
    def __init__(
        self,
        *,
        asset_summaries: Optional[List["_models.AssetSummaryResponse"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ReportBillableAssetBreakdown(_model_base.Model):
    """ReportBillableAssetBreakdown.

    :ivar kind: The kind of billable asset. Known values are: "domain", "host", and "ipAddress".
    :vartype kind: str or ~azure.defender.easm.models.ReportBillableAssetBreakdownKind
    :ivar count: The number of assets of this type.
    :vartype count: int
    """

    kind: Optional[Union[str, "_models.ReportBillableAssetBreakdownKind"]] = rest_field()
    """The kind of billable asset. Known values are: \"domain\", \"host\", and \"ipAddress\"."""
    count: Optional[int] = rest_field()
    """The number of assets of this type."""

    @overload
    def __init__(
        self,
        *,
        kind: Optional[Union[str, "_models.ReportBillableAssetBreakdownKind"]] = None,
        count: Optional[int] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ReportBillableAssetSnapshotResponse(_model_base.Model):
    """ReportBillableAssetSnapshotResponse.

    :ivar date: The date these assets were billed on.
    :vartype date: ~datetime.date
    :ivar total: The total number of billable assets for this date.
    :vartype total: int
    :ivar asset_breakdown: The breakdown of billable asset counts for each asset type.
    :vartype asset_breakdown: list[~azure.defender.easm.models.ReportBillableAssetBreakdown]
    """

    date: Optional[datetime.date] = rest_field()
    """The date these assets were billed on."""
    total: Optional[int] = rest_field()
    """The total number of billable assets for this date."""
    asset_breakdown: Optional[List["_models.ReportBillableAssetBreakdown"]] = rest_field(name="assetBreakdown")
    """The breakdown of billable asset counts for each asset type."""

    @overload
    def __init__(
        self,
        *,
        date: Optional[datetime.date] = None,
        total: Optional[int] = None,
        asset_breakdown: Optional[List["_models.ReportBillableAssetBreakdown"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ReportBillableAssetSummaryResponse(_model_base.Model):
    """ReportBillableAssetSummaryResponse.

    :ivar asset_summaries:
    :vartype asset_summaries: list[~azure.defender.easm.models.ReportBillableAssetSnapshotResponse]
    """

    asset_summaries: Optional[List["_models.ReportBillableAssetSnapshotResponse"]] = rest_field(name="assetSummaries")

    @overload
    def __init__(
        self,
        *,
        asset_summaries: Optional[List["_models.ReportBillableAssetSnapshotResponse"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Reputation(_model_base.Model):
    """Reputation.

    :ivar list_name:
    :vartype list_name: str
    :ivar threat_type:
    :vartype threat_type: str
    :ivar trusted:
    :vartype trusted: bool
    :ivar cidr:
    :vartype cidr: str
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar list_updated_at:
    :vartype list_updated_at: ~datetime.datetime
    :ivar recent:
    :vartype recent: bool
    """

    list_name: Optional[str] = rest_field(name="listName")
    threat_type: Optional[str] = rest_field(name="threatType")
    trusted: Optional[bool] = rest_field()
    cidr: Optional[str] = rest_field()
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    list_updated_at: Optional[datetime.datetime] = rest_field(name="listUpdatedAt")
    recent: Optional[bool] = rest_field()

    @overload
    def __init__(
        self,
        *,
        list_name: Optional[str] = None,
        threat_type: Optional[str] = None,
        trusted: Optional[bool] = None,
        cidr: Optional[str] = None,
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        list_updated_at: Optional[datetime.datetime] = None,
        recent: Optional[bool] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ResourceUrl(_model_base.Model):
    """ResourceUrl.

    :ivar url:
    :vartype url: str
    :ivar resources:
    :vartype resources: list[~azure.defender.easm.models.DependentResource]
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar count:
    :vartype count: int
    :ivar recent:
    :vartype recent: bool
    """

    url: Optional[str] = rest_field()
    resources: Optional[List["_models.DependentResource"]] = rest_field()
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    count: Optional[int] = rest_field()
    recent: Optional[bool] = rest_field()

    @overload
    def __init__(
        self,
        *,
        url: Optional[str] = None,
        resources: Optional[List["_models.DependentResource"]] = None,
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        count: Optional[int] = None,
        recent: Optional[bool] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SavedFilterPageResponse(_model_base.Model):
    """SavedFilterPageResponse.

    All required parameters must be populated in order to send to Azure.

    :ivar total_elements: The total number of items available in the full result set.
    :vartype total_elements: int
    :ivar next_link: The link to access the next page of results.  Not set if at the end of the
     result set.
    :vartype next_link: str
    :ivar value: The items in the current page of results. Required.
    :vartype value: list[~azure.defender.easm.models.SavedFilterResponse]
    """

    total_elements: Optional[int] = rest_field(name="totalElements")
    """The total number of items available in the full result set."""
    next_link: Optional[str] = rest_field(name="nextLink")
    """The link to access the next page of results.  Not set if at the end of the result set."""
    value: List["_models.SavedFilterResponse"] = rest_field()
    """The items in the current page of results. Required."""

    @overload
    def __init__(
        self,
        *,
        value: List["_models.SavedFilterResponse"],
        total_elements: Optional[int] = None,
        next_link: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SavedFilterRequest(_model_base.Model):
    """SavedFilterRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar filter: An expression on the resource type that selects the resources to be returned.
     Required.
    :vartype filter: str
    :ivar description: A human readable description of the saved filter. Required.
    :vartype description: str
    """

    filter: str = rest_field()
    """An expression on the resource type that selects the resources to be returned. Required."""
    description: str = rest_field()
    """A human readable description of the saved filter. Required."""

    @overload
    def __init__(
        self,
        *,
        filter: str,  # pylint: disable=redefined-builtin
        description: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SavedFilterResponse(_model_base.Model):
    """SavedFilterResponse.

    :ivar id: The system generated unique id for the resource.
    :vartype id: str
    :ivar name: The caller provided unique name for the resource.
    :vartype name: str
    :ivar display_name: The name that can be used for display purposes.
    :vartype display_name: str
    :ivar filter:
    :vartype filter: str
    :ivar description:
    :vartype description: str
    """

    id: Optional[str] = rest_field()
    """The system generated unique id for the resource."""
    name: Optional[str] = rest_field()
    """The caller provided unique name for the resource."""
    display_name: Optional[str] = rest_field(name="displayName")
    """The name that can be used for display purposes."""
    filter: Optional[str] = rest_field()
    description: Optional[str] = rest_field()

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        display_name: Optional[str] = None,
        filter: Optional[str] = None,  # pylint: disable=redefined-builtin
        description: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ScanMetadata(_model_base.Model):
    """ScanMetadata.

    :ivar port:
    :vartype port: int
    :ivar banner_metadata:
    :vartype banner_metadata: str
    :ivar start_scan:
    :vartype start_scan: ~datetime.datetime
    :ivar end_scan:
    :vartype end_scan: ~datetime.datetime
    """

    port: Optional[int] = rest_field()
    banner_metadata: Optional[str] = rest_field(name="bannerMetadata")
    start_scan: Optional[datetime.datetime] = rest_field(name="startScan")
    end_scan: Optional[datetime.datetime] = rest_field(name="endScan")

    @overload
    def __init__(
        self,
        *,
        port: Optional[int] = None,
        banner_metadata: Optional[str] = None,
        start_scan: Optional[datetime.datetime] = None,
        end_scan: Optional[datetime.datetime] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Service(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Service.

    :ivar scheme:
    :vartype scheme: str
    :ivar port:
    :vartype port: int
    :ivar web_components:
    :vartype web_components: list[~azure.defender.easm.models.WebComponent]
    :ivar ssl_certs:
    :vartype ssl_certs: list[~azure.defender.easm.models.SslCertAsset]
    :ivar exceptions:
    :vartype exceptions: list[~azure.defender.easm.models.ObservedString]
    :ivar sources:
    :vartype sources: list[~azure.defender.easm.models.Source]
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar count:
    :vartype count: int
    :ivar recent:
    :vartype recent: bool
    :ivar port_states:
    :vartype port_states: list[~azure.defender.easm.models.ObservedPortState]
    """

    scheme: Optional[str] = rest_field()
    port: Optional[int] = rest_field()
    web_components: Optional[List["_models.WebComponent"]] = rest_field(name="webComponents")
    ssl_certs: Optional[List["_models.SslCertAsset"]] = rest_field(name="sslCerts")
    exceptions: Optional[List["_models.ObservedString"]] = rest_field()
    sources: Optional[List["_models.Source"]] = rest_field()
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    count: Optional[int] = rest_field()
    recent: Optional[bool] = rest_field()
    port_states: Optional[List["_models.ObservedPortState"]] = rest_field(name="portStates")

    @overload
    def __init__(
        self,
        *,
        scheme: Optional[str] = None,
        port: Optional[int] = None,
        web_components: Optional[List["_models.WebComponent"]] = None,
        ssl_certs: Optional[List["_models.SslCertAsset"]] = None,
        exceptions: Optional[List["_models.ObservedString"]] = None,
        sources: Optional[List["_models.Source"]] = None,
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        count: Optional[int] = None,
        recent: Optional[bool] = None,
        port_states: Optional[List["_models.ObservedPortState"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SoaRecord(_model_base.Model):
    """SoaRecord.

    :ivar name_server:
    :vartype name_server: str
    :ivar email:
    :vartype email: str
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar count:
    :vartype count: int
    :ivar serial_number:
    :vartype serial_number: int
    :ivar recent:
    :vartype recent: bool
    """

    name_server: Optional[str] = rest_field(name="nameServer")
    email: Optional[str] = rest_field()
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    count: Optional[int] = rest_field()
    serial_number: Optional[int] = rest_field(name="serialNumber")
    recent: Optional[bool] = rest_field()

    @overload
    def __init__(
        self,
        *,
        name_server: Optional[str] = None,
        email: Optional[str] = None,
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        count: Optional[int] = None,
        serial_number: Optional[int] = None,
        recent: Optional[bool] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Source(_model_base.Model):
    """Source.

    :ivar source:
    :vartype source: str
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar count:
    :vartype count: int
    :ivar reason:
    :vartype reason: str
    """

    source: Optional[str] = rest_field()
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    count: Optional[int] = rest_field()
    reason: Optional[str] = rest_field()

    @overload
    def __init__(
        self,
        *,
        source: Optional[str] = None,
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        count: Optional[int] = None,
        reason: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SslCertAsset(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """SslCertAsset.

    :ivar sha1:
    :vartype sha1: str
    :ivar subject_common_names:
    :vartype subject_common_names: list[str]
    :ivar organizations:
    :vartype organizations: list[str]
    :ivar organizational_units:
    :vartype organizational_units: list[str]
    :ivar issuer_common_names:
    :vartype issuer_common_names: list[str]
    :ivar sig_alg_name:
    :vartype sig_alg_name: str
    :ivar invalid_after:
    :vartype invalid_after: ~datetime.datetime
    :ivar serial_number:
    :vartype serial_number: str
    :ivar subject_alternative_names:
    :vartype subject_alternative_names: list[str]
    :ivar issuer_alternative_names:
    :vartype issuer_alternative_names: list[str]
    :ivar sources:
    :vartype sources: list[~azure.defender.easm.models.Source]
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar count:
    :vartype count: int
    :ivar invalid_before:
    :vartype invalid_before: ~datetime.datetime
    :ivar key_size:
    :vartype key_size: int
    :ivar key_algorithm:
    :vartype key_algorithm: str
    :ivar subject_locality:
    :vartype subject_locality: list[str]
    :ivar subject_state:
    :vartype subject_state: list[str]
    :ivar subject_country:
    :vartype subject_country: list[str]
    :ivar issuer_locality:
    :vartype issuer_locality: list[str]
    :ivar issuer_state:
    :vartype issuer_state: list[str]
    :ivar issuer_country:
    :vartype issuer_country: list[str]
    :ivar subject_organizations:
    :vartype subject_organizations: list[str]
    :ivar subject_organizational_units:
    :vartype subject_organizational_units: list[str]
    :ivar issuer_organizations:
    :vartype issuer_organizations: list[str]
    :ivar issuer_organizational_units:
    :vartype issuer_organizational_units: list[str]
    :ivar version:
    :vartype version: int
    :ivar certificate_authority:
    :vartype certificate_authority: bool
    :ivar self_signed:
    :vartype self_signed: bool
    :ivar sig_alg_oid:
    :vartype sig_alg_oid: str
    :ivar recent:
    :vartype recent: bool
    :ivar validation_type: Known values are: "domainValidation", "organizationValidation", and
     "extendedValidation".
    :vartype validation_type: str or ~azure.defender.easm.models.SslCertAssetValidationType
    """

    sha1: Optional[str] = rest_field()
    subject_common_names: Optional[List[str]] = rest_field(name="subjectCommonNames")
    organizations: Optional[List[str]] = rest_field()
    organizational_units: Optional[List[str]] = rest_field(name="organizationalUnits")
    issuer_common_names: Optional[List[str]] = rest_field(name="issuerCommonNames")
    sig_alg_name: Optional[str] = rest_field(name="sigAlgName")
    invalid_after: Optional[datetime.datetime] = rest_field(name="invalidAfter")
    serial_number: Optional[str] = rest_field(name="serialNumber")
    subject_alternative_names: Optional[List[str]] = rest_field(name="subjectAlternativeNames")
    issuer_alternative_names: Optional[List[str]] = rest_field(name="issuerAlternativeNames")
    sources: Optional[List["_models.Source"]] = rest_field()
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    count: Optional[int] = rest_field()
    invalid_before: Optional[datetime.datetime] = rest_field(name="invalidBefore")
    key_size: Optional[int] = rest_field(name="keySize")
    key_algorithm: Optional[str] = rest_field(name="keyAlgorithm")
    subject_locality: Optional[List[str]] = rest_field(name="subjectLocality")
    subject_state: Optional[List[str]] = rest_field(name="subjectState")
    subject_country: Optional[List[str]] = rest_field(name="subjectCountry")
    issuer_locality: Optional[List[str]] = rest_field(name="issuerLocality")
    issuer_state: Optional[List[str]] = rest_field(name="issuerState")
    issuer_country: Optional[List[str]] = rest_field(name="issuerCountry")
    subject_organizations: Optional[List[str]] = rest_field(name="subjectOrganizations")
    subject_organizational_units: Optional[List[str]] = rest_field(name="subjectOrganizationalUnits")
    issuer_organizations: Optional[List[str]] = rest_field(name="issuerOrganizations")
    issuer_organizational_units: Optional[List[str]] = rest_field(name="issuerOrganizationalUnits")
    version: Optional[int] = rest_field()
    certificate_authority: Optional[bool] = rest_field(name="certificateAuthority")
    self_signed: Optional[bool] = rest_field(name="selfSigned")
    sig_alg_oid: Optional[str] = rest_field(name="sigAlgOid")
    recent: Optional[bool] = rest_field()
    validation_type: Optional[Union[str, "_models.SslCertAssetValidationType"]] = rest_field(name="validationType")
    """Known values are: \"domainValidation\", \"organizationValidation\", and \"extendedValidation\"."""

    @overload
    def __init__(
        self,
        *,
        sha1: Optional[str] = None,
        subject_common_names: Optional[List[str]] = None,
        organizations: Optional[List[str]] = None,
        organizational_units: Optional[List[str]] = None,
        issuer_common_names: Optional[List[str]] = None,
        sig_alg_name: Optional[str] = None,
        invalid_after: Optional[datetime.datetime] = None,
        serial_number: Optional[str] = None,
        subject_alternative_names: Optional[List[str]] = None,
        issuer_alternative_names: Optional[List[str]] = None,
        sources: Optional[List["_models.Source"]] = None,
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        count: Optional[int] = None,
        invalid_before: Optional[datetime.datetime] = None,
        key_size: Optional[int] = None,
        key_algorithm: Optional[str] = None,
        subject_locality: Optional[List[str]] = None,
        subject_state: Optional[List[str]] = None,
        subject_country: Optional[List[str]] = None,
        issuer_locality: Optional[List[str]] = None,
        issuer_state: Optional[List[str]] = None,
        issuer_country: Optional[List[str]] = None,
        subject_organizations: Optional[List[str]] = None,
        subject_organizational_units: Optional[List[str]] = None,
        issuer_organizations: Optional[List[str]] = None,
        issuer_organizational_units: Optional[List[str]] = None,
        version: Optional[int] = None,
        certificate_authority: Optional[bool] = None,
        self_signed: Optional[bool] = None,
        sig_alg_oid: Optional[str] = None,
        recent: Optional[bool] = None,
        validation_type: Optional[Union[str, "_models.SslCertAssetValidationType"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SslCertAssetResponse(AssetResponse, discriminator="sslCert"):  # pylint: disable=too-many-instance-attributes
    """SslCertAssetResponse.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The system generated unique id for the resource.
    :vartype id: str
    :ivar name: The caller provided unique name for the resource.
    :vartype name: str
    :ivar display_name: The name that can be used for display purposes.
    :vartype display_name: str
    :ivar uuid: Global UUID for the asset.
    :vartype uuid: str
    :ivar created_date: The date this asset was first added to this workspace.
    :vartype created_date: ~datetime.datetime
    :ivar updated_date: The date this asset was last updated for this workspace.
    :vartype updated_date: ~datetime.datetime
    :ivar state: Known values are: "candidate", "confirmed", "dismissed", "candidateInvestigate",
     "associatedPartner", "associatedThirdparty", and "archived".
    :vartype state: str or ~azure.defender.easm.models.AssetState
    :ivar external_id: An optional customer provided identifier for this asset.
    :vartype external_id: str
    :ivar labels: Customer labels assigned to this asset.
    :vartype labels: list[str]
    :ivar wildcard: An indicator of whether this asset represents a wildcard rollup of assets on
     this domain.
    :vartype wildcard: bool
    :ivar disco_group_name: The name of the DiscoveryGroup that brought added this asset to the
     workspace.
    :vartype disco_group_name: str
    :ivar audit_trail: The history of how this asset was pulled into the workspace through the
     discovery process.
    :vartype audit_trail: list[~azure.defender.easm.models.AuditTrailItem]
    :ivar reason:
    :vartype reason: str
    :ivar kind: Required. Default value is "sslCert".
    :vartype kind: str
    :ivar asset: Required.
    :vartype asset: ~azure.defender.easm.models.SslCertAsset
    """

    kind: Literal["sslCert"] = rest_discriminator(name="kind")  # type: ignore
    """Required. Default value is \"sslCert\"."""
    asset: "_models.SslCertAsset" = rest_field()
    """Required."""

    @overload
    def __init__(
        self,
        *,
        asset: "_models.SslCertAsset",
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        display_name: Optional[str] = None,
        uuid: Optional[str] = None,
        created_date: Optional[datetime.datetime] = None,
        updated_date: Optional[datetime.datetime] = None,
        state: Optional[Union[str, "_models.AssetState"]] = None,
        external_id: Optional[str] = None,
        labels: Optional[List[str]] = None,
        wildcard: Optional[bool] = None,
        disco_group_name: Optional[str] = None,
        audit_trail: Optional[List["_models.AuditTrailItem"]] = None,
        reason: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.kind: Literal["sslCert"] = "sslCert"


class SslServerConfig(_model_base.Model):
    """SslServerConfig.

    :ivar tls_versions:
    :vartype tls_versions: list[str]
    :ivar cipher_suites:
    :vartype cipher_suites: list[str]
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar count:
    :vartype count: int
    :ivar sources:
    :vartype sources: list[~azure.defender.easm.models.Source]
    """

    tls_versions: Optional[List[str]] = rest_field(name="tlsVersions")
    cipher_suites: Optional[List[str]] = rest_field(name="cipherSuites")
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    count: Optional[int] = rest_field()
    sources: Optional[List["_models.Source"]] = rest_field()

    @overload
    def __init__(
        self,
        *,
        tls_versions: Optional[List[str]] = None,
        cipher_suites: Optional[List[str]] = None,
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        count: Optional[int] = None,
        sources: Optional[List["_models.Source"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SubResourceIntegrityCheck(_model_base.Model):
    """SubResourceIntegrityCheck.

    :ivar violation:
    :vartype violation: bool
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar count:
    :vartype count: int
    :ivar cause_page_url:
    :vartype cause_page_url: str
    :ivar crawl_guid:
    :vartype crawl_guid: str
    :ivar page_guid:
    :vartype page_guid: str
    :ivar resource_guid:
    :vartype resource_guid: str
    :ivar expected_hash:
    :vartype expected_hash: str
    """

    violation: Optional[bool] = rest_field()
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    count: Optional[int] = rest_field()
    cause_page_url: Optional[str] = rest_field(name="causePageUrl")
    crawl_guid: Optional[str] = rest_field(name="crawlGuid")
    page_guid: Optional[str] = rest_field(name="pageGuid")
    resource_guid: Optional[str] = rest_field(name="resourceGuid")
    expected_hash: Optional[str] = rest_field(name="expectedHash")

    @overload
    def __init__(
        self,
        *,
        violation: Optional[bool] = None,
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        count: Optional[int] = None,
        cause_page_url: Optional[str] = None,
        crawl_guid: Optional[str] = None,
        page_guid: Optional[str] = None,
        resource_guid: Optional[str] = None,
        expected_hash: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class TaskPageResponse(_model_base.Model):
    """TaskPageResponse.

    All required parameters must be populated in order to send to Azure.

    :ivar total_elements: The total number of items available in the full result set.
    :vartype total_elements: int
    :ivar next_link: The link to access the next page of results.  Not set if at the end of the
     result set.
    :vartype next_link: str
    :ivar value: The items in the current page of results. Required.
    :vartype value: list[~azure.defender.easm.models.TaskResponse]
    """

    total_elements: Optional[int] = rest_field(name="totalElements")
    """The total number of items available in the full result set."""
    next_link: Optional[str] = rest_field(name="nextLink")
    """The link to access the next page of results.  Not set if at the end of the result set."""
    value: List["_models.TaskResponse"] = rest_field()
    """The items in the current page of results. Required."""

    @overload
    def __init__(
        self,
        *,
        value: List["_models.TaskResponse"],
        total_elements: Optional[int] = None,
        next_link: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class TaskResponse(_model_base.Model):
    """TaskResponse.

    :ivar id: The unique identifier of the task.
    :vartype id: str
    :ivar started_at: The time the task started.
    :vartype started_at: ~datetime.datetime
    :ivar completed_at: The time the task completed.
    :vartype completed_at: ~datetime.datetime
    :ivar last_polled_at: The last time the status of the task was updated.
    :vartype last_polled_at: ~datetime.datetime
    :ivar state: The state the task is in. Known values are: "pending", "running", "paused",
     "complete", "incomplete", "failed", and "warning".
    :vartype state: str or ~azure.defender.easm.models.TaskState
    :ivar phase: The phase the task is in. Known values are: "running", "polling", and "complete".
    :vartype phase: str or ~azure.defender.easm.models.TaskPhase
    :ivar reason: The reason the task was moved into its current state, if the task wasn't
     completed.
    :vartype reason: str
    :ivar metadata: Attributes unique to the task.  This differs by task type.
    :vartype metadata: any
    """

    id: Optional[str] = rest_field()
    """The unique identifier of the task."""
    started_at: Optional[datetime.datetime] = rest_field(name="startedAt")
    """The time the task started."""
    completed_at: Optional[datetime.datetime] = rest_field(name="completedAt")
    """The time the task completed."""
    last_polled_at: Optional[datetime.datetime] = rest_field(name="lastPolledAt")
    """The last time the status of the task was updated."""
    state: Optional[Union[str, "_models.TaskState"]] = rest_field()
    """The state the task is in. Known values are: \"pending\", \"running\", \"paused\", \"complete\",
     \"incomplete\", \"failed\", and \"warning\"."""
    phase: Optional[Union[str, "_models.TaskPhase"]] = rest_field()
    """The phase the task is in. Known values are: \"running\", \"polling\", and \"complete\"."""
    reason: Optional[str] = rest_field()
    """The reason the task was moved into its current state, if the task wasn't completed."""
    metadata: Optional[Any] = rest_field()
    """Attributes unique to the task.  This differs by task type."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        started_at: Optional[datetime.datetime] = None,
        completed_at: Optional[datetime.datetime] = None,
        last_polled_at: Optional[datetime.datetime] = None,
        state: Optional[Union[str, "_models.TaskState"]] = None,
        phase: Optional[Union[str, "_models.TaskPhase"]] = None,
        reason: Optional[str] = None,
        metadata: Optional[Any] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ValidateResponse(_model_base.Model):
    """ValidateResponse.

    All required parameters must be populated in order to send to Azure.

    :ivar error: Required.
    :vartype error: ~azure.defender.easm.models.ErrorDetail
    """

    error: "_models.ErrorDetail" = rest_field()
    """Required."""

    @overload
    def __init__(
        self,
        *,
        error: "_models.ErrorDetail",
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class WebComponent(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """WebComponent.

    :ivar name:
    :vartype name: str
    :ivar type:
    :vartype type: str
    :ivar version:
    :vartype version: str
    :ivar rule_id:
    :vartype rule_id: list[str]
    :ivar first_seen:
    :vartype first_seen: ~datetime.datetime
    :ivar last_seen:
    :vartype last_seen: ~datetime.datetime
    :ivar count:
    :vartype count: int
    :ivar cve:
    :vartype cve: list[~azure.defender.easm.models.Cve]
    :ivar end_of_life:
    :vartype end_of_life: int
    :ivar recent:
    :vartype recent: bool
    :ivar ports:
    :vartype ports: list[~azure.defender.easm.models.Port]
    :ivar sources:
    :vartype sources: list[~azure.defender.easm.models.Source]
    :ivar service:
    :vartype service: str
    """

    name: Optional[str] = rest_field()
    type: Optional[str] = rest_field()
    version: Optional[str] = rest_field()
    rule_id: Optional[List[str]] = rest_field(name="ruleId")
    first_seen: Optional[datetime.datetime] = rest_field(name="firstSeen")
    last_seen: Optional[datetime.datetime] = rest_field(name="lastSeen")
    count: Optional[int] = rest_field()
    cve: Optional[List["_models.Cve"]] = rest_field()
    end_of_life: Optional[int] = rest_field(name="endOfLife")
    recent: Optional[bool] = rest_field()
    ports: Optional[List["_models.Port"]] = rest_field()
    sources: Optional[List["_models.Source"]] = rest_field()
    service: Optional[str] = rest_field()

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        type: Optional[str] = None,
        version: Optional[str] = None,
        rule_id: Optional[List[str]] = None,
        first_seen: Optional[datetime.datetime] = None,
        last_seen: Optional[datetime.datetime] = None,
        count: Optional[int] = None,
        cve: Optional[List["_models.Cve"]] = None,
        end_of_life: Optional[int] = None,
        recent: Optional[bool] = None,
        ports: Optional[List["_models.Port"]] = None,
        sources: Optional[List["_models.Source"]] = None,
        service: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)
