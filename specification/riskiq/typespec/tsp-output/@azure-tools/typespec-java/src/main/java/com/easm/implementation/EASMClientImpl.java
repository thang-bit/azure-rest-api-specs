// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.easm.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import com.easm.EASMServiceVersion;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the EASMClient type. */
public final class EASMClientImpl {
    /** The proxy service used to perform REST calls. */
    private final EASMClientService service;

    /** */
    private final String region;

    /**
     * Gets.
     *
     * @return the region value.
     */
    public String getRegion() {
        return this.region;
    }

    /** Service version. */
    private final EASMServiceVersion serviceVersion;

    /**
     * Gets Service version.
     *
     * @return the serviceVersion value.
     */
    public EASMServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /** The HTTP pipeline to send requests through. */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /** The serializer to serialize an object into a string. */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     *
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of EASMClient client.
     *
     * @param region
     * @param serviceVersion Service version.
     */
    public EASMClientImpl(String region, EASMServiceVersion serviceVersion) {
        this(
                new HttpPipelineBuilder()
                        .policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy())
                        .build(),
                JacksonAdapter.createDefaultSerializerAdapter(),
                region,
                serviceVersion);
    }

    /**
     * Initializes an instance of EASMClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param region
     * @param serviceVersion Service version.
     */
    public EASMClientImpl(HttpPipeline httpPipeline, String region, EASMServiceVersion serviceVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), region, serviceVersion);
    }

    /**
     * Initializes an instance of EASMClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param region
     * @param serviceVersion Service version.
     */
    public EASMClientImpl(
            HttpPipeline httpPipeline,
            SerializerAdapter serializerAdapter,
            String region,
            EASMServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.region = region;
        this.serviceVersion = serviceVersion;
        this.service = RestProxy.create(EASMClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /** The interface defining all the services for EASMClient to be used by the proxy service to perform REST calls. */
    @Host("https://{region}.easm.defender.microsoft.com")
    @ServiceInterface(name = "EASMClient")
    public interface EASMClientService {
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/assets")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> assetsList(
                @HostParam("region") String region,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/assets")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> assetsUpdate(
                @HostParam("region") String region,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json") BinaryData assetUpdateRequest,
                RequestOptions requestOptions,
                Context context);

        @Get(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/assets/{assetId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> assetsGet(
                @HostParam("region") String region,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                @PathParam("assetId") String assetId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/dataConnections")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> dataConnectionsList(
                @HostParam("region") String region,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/dataConnections:validate")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> dataConnectionsValidate(
                @HostParam("region") String region,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json") BinaryData dataConnectionRequest,
                RequestOptions requestOptions,
                Context context);

        @Get(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/dataConnections/{dataConnectionName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> dataConnectionsGet(
                @HostParam("region") String region,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                @PathParam("dataConnectionName") String dataConnectionName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Put(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/dataConnections/{dataConnectionName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> dataConnectionsPut(
                @HostParam("region") String region,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                @PathParam("dataConnectionName") String dataConnectionName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json") BinaryData dataConnectionRequest,
                RequestOptions requestOptions,
                Context context);

        @Delete(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/dataConnections/{dataConnectionName}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> dataConnectionsDelete(
                @HostParam("region") String region,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                @PathParam("dataConnectionName") String dataConnectionName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/discoGroups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> discoveryGroupsList(
                @HostParam("region") String region,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/discoGroups:validate/{groupName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> discoveryGroupsValidate(
                @HostParam("region") String region,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                @QueryParam("api-version") String apiVersion,
                @PathParam("groupName") String groupName,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json") BinaryData discoGroupRequest,
                RequestOptions requestOptions,
                Context context);

        @Get(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/discoGroups/{groupName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> discoveryGroupsGet(
                @HostParam("region") String region,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                @PathParam("groupName") String groupName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Put(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/discoGroups/{groupName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> discoveryGroupsPut(
                @HostParam("region") String region,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                @PathParam("groupName") String groupName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json") BinaryData discoGroupRequest,
                RequestOptions requestOptions,
                Context context);

        @Post(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/discoGroups/{groupName}:run")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> discoveryGroupsRun(
                @HostParam("region") String region,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                @PathParam("groupName") String groupName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/discoGroups/{groupName}/runs")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> discoveryGroupsListRuns(
                @HostParam("region") String region,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                @PathParam("groupName") String groupName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/discoTemplates")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> discoveryTemplatesList(
                @HostParam("region") String region,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/discoTemplates/{templateId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> discoveryTemplatesGet(
                @HostParam("region") String region,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                @PathParam("templateId") String templateId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/reports/assets:getBillable")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> reportsBillable(
                @HostParam("region") String region,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/reports/assets:getSnapshot")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> reportsSnapshot(
                @HostParam("region") String region,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json") BinaryData reportAssetSnapshotRequest,
                RequestOptions requestOptions,
                Context context);

        @Post(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/reports/assets:getSnapshotExport")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> reportsSnapshotExport(
                @HostParam("region") String region,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json") BinaryData reportAssetSnapshotExportRequest,
                RequestOptions requestOptions,
                Context context);

        @Post(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/reports/assets:getSummary")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> reportsSummary(
                @HostParam("region") String region,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json") BinaryData reportAssetSummaryRequest,
                RequestOptions requestOptions,
                Context context);

        @Get(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/savedFilters")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> savedFiltersList(
                @HostParam("region") String region,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/savedFilters/{filterName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> savedFiltersGet(
                @HostParam("region") String region,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                @PathParam("filterName") String filterName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Put(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/savedFilters/{filterName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> savedFiltersPut(
                @HostParam("region") String region,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                @PathParam("filterName") String filterName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json") BinaryData savedFilterRequest,
                RequestOptions requestOptions,
                Context context);

        @Delete(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/savedFilters/{filterName}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> savedFiltersDelete(
                @HostParam("region") String region,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                @PathParam("filterName") String filterName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/tasks")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> tasksList(
                @HostParam("region") String region,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/tasks/{taskId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> tasksGet(
                @HostParam("region") String region,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                @PathParam("taskId") String taskId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/tasks/{taskId}:cancel")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> tasksCancel(
                @HostParam("region") String region,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                @PathParam("taskId") String taskId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Retrieve a list of assets for the provided search parameters.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter parameter</td></tr>
     *     <tr><td>orderby</td><td>String</td><td>No</td><td>The orderBy parameter</td></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>The skip parameter</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maxPageSize parameter</td></tr>
     *     <tr><td>mark</td><td>String</td><td>No</td><td>The mark parameter</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalElements: Long (Optional)
     *     mark: String (Optional)
     *     nextLink: String (Optional)
     *     value (Required): [
     *          (Required){
     *             id: String (Optional)
     *             name: String (Optional)
     *             displayName: String (Optional)
     *             uuid: String (Optional)
     *             asset: Object (Required)
     *             createdDate: OffsetDateTime (Optional)
     *             updatedDate: OffsetDateTime (Optional)
     *             state: String(candidate/confirmed/dismissed/candidateInvestigate/associatedPartner/associatedThirdparty/archived) (Optional)
     *             externalId: String (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             wildcard: Boolean (Optional)
     *             discoGroupName: String (Optional)
     *             auditTrail (Optional): [
     *                  (Optional){
     *                     id: String (Optional)
     *                     name: String (Optional)
     *                     displayName: String (Optional)
     *                     kind: String(as/contact/domain/host/ipAddress/ipBlock/page/sslCert) (Optional)
     *                     reason: String (Optional)
     *                 }
     *             ]
     *             reason: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return assetPageResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> assetsListWithResponseAsync(
            String subscriptionId, String resourceGroupName, String workspaceName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.assetsList(
                                this.getRegion(),
                                subscriptionId,
                                resourceGroupName,
                                workspaceName,
                                this.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Retrieve a list of assets for the provided search parameters.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter parameter</td></tr>
     *     <tr><td>orderby</td><td>String</td><td>No</td><td>The orderBy parameter</td></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>The skip parameter</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maxPageSize parameter</td></tr>
     *     <tr><td>mark</td><td>String</td><td>No</td><td>The mark parameter</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalElements: Long (Optional)
     *     mark: String (Optional)
     *     nextLink: String (Optional)
     *     value (Required): [
     *          (Required){
     *             id: String (Optional)
     *             name: String (Optional)
     *             displayName: String (Optional)
     *             uuid: String (Optional)
     *             asset: Object (Required)
     *             createdDate: OffsetDateTime (Optional)
     *             updatedDate: OffsetDateTime (Optional)
     *             state: String(candidate/confirmed/dismissed/candidateInvestigate/associatedPartner/associatedThirdparty/archived) (Optional)
     *             externalId: String (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             wildcard: Boolean (Optional)
     *             discoGroupName: String (Optional)
     *             auditTrail (Optional): [
     *                  (Optional){
     *                     id: String (Optional)
     *                     name: String (Optional)
     *                     displayName: String (Optional)
     *                     kind: String(as/contact/domain/host/ipAddress/ipBlock/page/sslCert) (Optional)
     *                     reason: String (Optional)
     *                 }
     *             ]
     *             reason: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return assetPageResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> assetsListWithResponse(
            String subscriptionId, String resourceGroupName, String workspaceName, RequestOptions requestOptions) {
        return assetsListWithResponseAsync(subscriptionId, resourceGroupName, workspaceName, requestOptions).block();
    }

    /**
     * Update labels on assets matching the provided filter.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter parameter</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     state: String(candidate/confirmed/dismissed/candidateInvestigate/associatedPartner/associatedThirdparty) (Optional)
     *     externalId: String (Optional)
     *     labels: Object (Optional)
     *     transfers: String(as/contact/domain/host/ipAddress/ipBlock/page/sslCert) (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     startedAt: OffsetDateTime (Optional)
     *     completedAt: OffsetDateTime (Optional)
     *     lastPolledAt: OffsetDateTime (Optional)
     *     state: String(pending/running/paused/complete/incomplete/failed/warning) (Optional)
     *     phase: String(running/polling/complete) (Optional)
     *     reason: String (Optional)
     *     metadata: Object (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param assetUpdateRequest AssetUpdateRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return taskResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> assetsUpdateWithResponseAsync(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            BinaryData assetUpdateRequest,
            RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.assetsUpdate(
                                this.getRegion(),
                                subscriptionId,
                                resourceGroupName,
                                workspaceName,
                                this.getServiceVersion().getVersion(),
                                accept,
                                assetUpdateRequest,
                                requestOptions,
                                context));
    }

    /**
     * Update labels on assets matching the provided filter.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter parameter</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     state: String(candidate/confirmed/dismissed/candidateInvestigate/associatedPartner/associatedThirdparty) (Optional)
     *     externalId: String (Optional)
     *     labels: Object (Optional)
     *     transfers: String(as/contact/domain/host/ipAddress/ipBlock/page/sslCert) (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     startedAt: OffsetDateTime (Optional)
     *     completedAt: OffsetDateTime (Optional)
     *     lastPolledAt: OffsetDateTime (Optional)
     *     state: String(pending/running/paused/complete/incomplete/failed/warning) (Optional)
     *     phase: String(running/polling/complete) (Optional)
     *     reason: String (Optional)
     *     metadata: Object (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param assetUpdateRequest AssetUpdateRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return taskResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> assetsUpdateWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            BinaryData assetUpdateRequest,
            RequestOptions requestOptions) {
        return assetsUpdateWithResponseAsync(
                        subscriptionId, resourceGroupName, workspaceName, assetUpdateRequest, requestOptions)
                .block();
    }

    /**
     * Retrieve an asset by assetId.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     displayName: String (Optional)
     *     uuid: String (Optional)
     *     asset: Object (Required)
     *     createdDate: OffsetDateTime (Optional)
     *     updatedDate: OffsetDateTime (Optional)
     *     state: String(candidate/confirmed/dismissed/candidateInvestigate/associatedPartner/associatedThirdparty/archived) (Optional)
     *     externalId: String (Optional)
     *     labels (Optional): [
     *         String (Optional)
     *     ]
     *     wildcard: Boolean (Optional)
     *     discoGroupName: String (Optional)
     *     auditTrail (Optional): [
     *          (Optional){
     *             id: String (Optional)
     *             name: String (Optional)
     *             displayName: String (Optional)
     *             kind: String(as/contact/domain/host/ipAddress/ipBlock/page/sslCert) (Optional)
     *             reason: String (Optional)
     *         }
     *     ]
     *     reason: String (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param assetId The assetId parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return assetResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> assetsGetWithResponseAsync(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String assetId,
            RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.assetsGet(
                                this.getRegion(),
                                subscriptionId,
                                resourceGroupName,
                                workspaceName,
                                assetId,
                                this.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Retrieve an asset by assetId.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     displayName: String (Optional)
     *     uuid: String (Optional)
     *     asset: Object (Required)
     *     createdDate: OffsetDateTime (Optional)
     *     updatedDate: OffsetDateTime (Optional)
     *     state: String(candidate/confirmed/dismissed/candidateInvestigate/associatedPartner/associatedThirdparty/archived) (Optional)
     *     externalId: String (Optional)
     *     labels (Optional): [
     *         String (Optional)
     *     ]
     *     wildcard: Boolean (Optional)
     *     discoGroupName: String (Optional)
     *     auditTrail (Optional): [
     *          (Optional){
     *             id: String (Optional)
     *             name: String (Optional)
     *             displayName: String (Optional)
     *             kind: String(as/contact/domain/host/ipAddress/ipBlock/page/sslCert) (Optional)
     *             reason: String (Optional)
     *         }
     *     ]
     *     reason: String (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param assetId The assetId parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return assetResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> assetsGetWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String assetId,
            RequestOptions requestOptions) {
        return assetsGetWithResponseAsync(subscriptionId, resourceGroupName, workspaceName, assetId, requestOptions)
                .block();
    }

    /**
     * Retrieve a list of data connections.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>The skip parameter</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maxPageSize parameter</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalElements: Long (Optional)
     *     nextLink: String (Optional)
     *     value (Required): [
     *          (Required){
     *             id: String (Optional)
     *             name: String (Optional)
     *             displayName: String (Optional)
     *             content: String(assets/attackSurfaceInsights) (Optional)
     *             properties: Object (Required)
     *             createdDate: OffsetDateTime (Optional)
     *             frequency: String(daily/weekly/monthly) (Optional)
     *             frequencyOffset: Integer (Optional)
     *             updatedDate: OffsetDateTime (Optional)
     *             userUpdatedAt: OffsetDateTime (Optional)
     *             active: Boolean (Optional)
     *             inactiveMessage: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return dataConnectionPageResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> dataConnectionsListWithResponseAsync(
            String subscriptionId, String resourceGroupName, String workspaceName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.dataConnectionsList(
                                this.getRegion(),
                                subscriptionId,
                                resourceGroupName,
                                workspaceName,
                                this.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Retrieve a list of data connections.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>The skip parameter</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maxPageSize parameter</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalElements: Long (Optional)
     *     nextLink: String (Optional)
     *     value (Required): [
     *          (Required){
     *             id: String (Optional)
     *             name: String (Optional)
     *             displayName: String (Optional)
     *             content: String(assets/attackSurfaceInsights) (Optional)
     *             properties: Object (Required)
     *             createdDate: OffsetDateTime (Optional)
     *             frequency: String(daily/weekly/monthly) (Optional)
     *             frequencyOffset: Integer (Optional)
     *             updatedDate: OffsetDateTime (Optional)
     *             userUpdatedAt: OffsetDateTime (Optional)
     *             active: Boolean (Optional)
     *             inactiveMessage: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return dataConnectionPageResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> dataConnectionsListWithResponse(
            String subscriptionId, String resourceGroupName, String workspaceName, RequestOptions requestOptions) {
        return dataConnectionsListWithResponseAsync(subscriptionId, resourceGroupName, workspaceName, requestOptions)
                .block();
    }

    /**
     * Validate a data connection with a given dataConnectionName.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     content: String(assets/attackSurfaceInsights) (Optional)
     *     properties: Object (Required)
     *     frequency: String(daily/weekly/monthly) (Optional)
     *     frequencyOffset: Integer (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     error (Required): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Required): {
     *             code: String (Optional)
     *             value: Object (Optional)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param dataConnectionRequest DataConnectionRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return validateResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> dataConnectionsValidateWithResponseAsync(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            BinaryData dataConnectionRequest,
            RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.dataConnectionsValidate(
                                this.getRegion(),
                                subscriptionId,
                                resourceGroupName,
                                workspaceName,
                                this.getServiceVersion().getVersion(),
                                accept,
                                dataConnectionRequest,
                                requestOptions,
                                context));
    }

    /**
     * Validate a data connection with a given dataConnectionName.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     content: String(assets/attackSurfaceInsights) (Optional)
     *     properties: Object (Required)
     *     frequency: String(daily/weekly/monthly) (Optional)
     *     frequencyOffset: Integer (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     error (Required): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Required): {
     *             code: String (Optional)
     *             value: Object (Optional)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param dataConnectionRequest DataConnectionRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return validateResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> dataConnectionsValidateWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            BinaryData dataConnectionRequest,
            RequestOptions requestOptions) {
        return dataConnectionsValidateWithResponseAsync(
                        subscriptionId, resourceGroupName, workspaceName, dataConnectionRequest, requestOptions)
                .block();
    }

    /**
     * Retrieve a data connection with a given dataConnectionName.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     displayName: String (Optional)
     *     content: String(assets/attackSurfaceInsights) (Optional)
     *     properties: Object (Required)
     *     createdDate: OffsetDateTime (Optional)
     *     frequency: String(daily/weekly/monthly) (Optional)
     *     frequencyOffset: Integer (Optional)
     *     updatedDate: OffsetDateTime (Optional)
     *     userUpdatedAt: OffsetDateTime (Optional)
     *     active: Boolean (Optional)
     *     inactiveMessage: String (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param dataConnectionName The dataConnectionName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return dataConnectionResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> dataConnectionsGetWithResponseAsync(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String dataConnectionName,
            RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.dataConnectionsGet(
                                this.getRegion(),
                                subscriptionId,
                                resourceGroupName,
                                workspaceName,
                                dataConnectionName,
                                this.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Retrieve a data connection with a given dataConnectionName.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     displayName: String (Optional)
     *     content: String(assets/attackSurfaceInsights) (Optional)
     *     properties: Object (Required)
     *     createdDate: OffsetDateTime (Optional)
     *     frequency: String(daily/weekly/monthly) (Optional)
     *     frequencyOffset: Integer (Optional)
     *     updatedDate: OffsetDateTime (Optional)
     *     userUpdatedAt: OffsetDateTime (Optional)
     *     active: Boolean (Optional)
     *     inactiveMessage: String (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param dataConnectionName The dataConnectionName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return dataConnectionResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> dataConnectionsGetWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String dataConnectionName,
            RequestOptions requestOptions) {
        return dataConnectionsGetWithResponseAsync(
                        subscriptionId, resourceGroupName, workspaceName, dataConnectionName, requestOptions)
                .block();
    }

    /**
     * Create or update a data connection with a given dataConnectionName.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     content: String(assets/attackSurfaceInsights) (Optional)
     *     properties: Object (Required)
     *     frequency: String(daily/weekly/monthly) (Optional)
     *     frequencyOffset: Integer (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     displayName: String (Optional)
     *     content: String(assets/attackSurfaceInsights) (Optional)
     *     properties: Object (Required)
     *     createdDate: OffsetDateTime (Optional)
     *     frequency: String(daily/weekly/monthly) (Optional)
     *     frequencyOffset: Integer (Optional)
     *     updatedDate: OffsetDateTime (Optional)
     *     userUpdatedAt: OffsetDateTime (Optional)
     *     active: Boolean (Optional)
     *     inactiveMessage: String (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param dataConnectionName The dataConnectionName parameter.
     * @param dataConnectionRequest DataConnectionRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return dataConnectionResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> dataConnectionsPutWithResponseAsync(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String dataConnectionName,
            BinaryData dataConnectionRequest,
            RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.dataConnectionsPut(
                                this.getRegion(),
                                subscriptionId,
                                resourceGroupName,
                                workspaceName,
                                dataConnectionName,
                                this.getServiceVersion().getVersion(),
                                accept,
                                dataConnectionRequest,
                                requestOptions,
                                context));
    }

    /**
     * Create or update a data connection with a given dataConnectionName.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     content: String(assets/attackSurfaceInsights) (Optional)
     *     properties: Object (Required)
     *     frequency: String(daily/weekly/monthly) (Optional)
     *     frequencyOffset: Integer (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     displayName: String (Optional)
     *     content: String(assets/attackSurfaceInsights) (Optional)
     *     properties: Object (Required)
     *     createdDate: OffsetDateTime (Optional)
     *     frequency: String(daily/weekly/monthly) (Optional)
     *     frequencyOffset: Integer (Optional)
     *     updatedDate: OffsetDateTime (Optional)
     *     userUpdatedAt: OffsetDateTime (Optional)
     *     active: Boolean (Optional)
     *     inactiveMessage: String (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param dataConnectionName The dataConnectionName parameter.
     * @param dataConnectionRequest DataConnectionRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return dataConnectionResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> dataConnectionsPutWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String dataConnectionName,
            BinaryData dataConnectionRequest,
            RequestOptions requestOptions) {
        return dataConnectionsPutWithResponseAsync(
                        subscriptionId,
                        resourceGroupName,
                        workspaceName,
                        dataConnectionName,
                        dataConnectionRequest,
                        requestOptions)
                .block();
    }

    /**
     * Delete a data connection with a given dataConnectionName.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param dataConnectionName The dataConnectionName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> dataConnectionsDeleteWithResponseAsync(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String dataConnectionName,
            RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.dataConnectionsDelete(
                                this.getRegion(),
                                subscriptionId,
                                resourceGroupName,
                                workspaceName,
                                dataConnectionName,
                                this.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Delete a data connection with a given dataConnectionName.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param dataConnectionName The dataConnectionName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> dataConnectionsDeleteWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String dataConnectionName,
            RequestOptions requestOptions) {
        return dataConnectionsDeleteWithResponseAsync(
                        subscriptionId, resourceGroupName, workspaceName, dataConnectionName, requestOptions)
                .block();
    }

    /**
     * Retrieve a list of discovery group for the provided search parameters.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter parameter</td></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>The skip parameter</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maxPageSize parameter</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalElements: Long (Optional)
     *     nextLink: String (Optional)
     *     value (Required): [
     *          (Required){
     *             id: String (Optional)
     *             name: String (Optional)
     *             displayName: String (Optional)
     *             description: String (Optional)
     *             tier: String (Optional)
     *             frequencyMilliseconds: Long (Optional)
     *             seeds (Optional): [
     *                  (Optional){
     *                     kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *                     name: String (Optional)
     *                 }
     *             ]
     *             names (Optional): [
     *                 String (Optional)
     *             ]
     *             excludes (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             latestRun (Required): {
     *                 submittedDate: OffsetDateTime (Optional)
     *                 startedDate: OffsetDateTime (Optional)
     *                 completedDate: OffsetDateTime (Optional)
     *                 tier: String (Optional)
     *                 state: String(pending/running/completed/failed) (Optional)
     *                 totalAssetsFoundCount: Long (Optional)
     *                 seeds (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *                 excludes (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *                 names (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *             createdDate: OffsetDateTime (Optional)
     *             templateId: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return discoGroupPageResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> discoveryGroupsListWithResponseAsync(
            String subscriptionId, String resourceGroupName, String workspaceName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.discoveryGroupsList(
                                this.getRegion(),
                                subscriptionId,
                                resourceGroupName,
                                workspaceName,
                                this.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Retrieve a list of discovery group for the provided search parameters.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter parameter</td></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>The skip parameter</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maxPageSize parameter</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalElements: Long (Optional)
     *     nextLink: String (Optional)
     *     value (Required): [
     *          (Required){
     *             id: String (Optional)
     *             name: String (Optional)
     *             displayName: String (Optional)
     *             description: String (Optional)
     *             tier: String (Optional)
     *             frequencyMilliseconds: Long (Optional)
     *             seeds (Optional): [
     *                  (Optional){
     *                     kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *                     name: String (Optional)
     *                 }
     *             ]
     *             names (Optional): [
     *                 String (Optional)
     *             ]
     *             excludes (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             latestRun (Required): {
     *                 submittedDate: OffsetDateTime (Optional)
     *                 startedDate: OffsetDateTime (Optional)
     *                 completedDate: OffsetDateTime (Optional)
     *                 tier: String (Optional)
     *                 state: String(pending/running/completed/failed) (Optional)
     *                 totalAssetsFoundCount: Long (Optional)
     *                 seeds (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *                 excludes (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *                 names (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *             createdDate: OffsetDateTime (Optional)
     *             templateId: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return discoGroupPageResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> discoveryGroupsListWithResponse(
            String subscriptionId, String resourceGroupName, String workspaceName, RequestOptions requestOptions) {
        return discoveryGroupsListWithResponseAsync(subscriptionId, resourceGroupName, workspaceName, requestOptions)
                .block();
    }

    /**
     * Validate a discovery group with a given groupName.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     description: String (Optional)
     *     tier: String (Optional)
     *     frequencyMilliseconds: Long (Optional)
     *     seeds (Optional): [
     *          (Optional){
     *             kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *             name: String (Optional)
     *         }
     *     ]
     *     names (Optional): [
     *         String (Optional)
     *     ]
     *     excludes (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     templateId: String (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     error (Required): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Required): {
     *             code: String (Optional)
     *             value: Object (Optional)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param groupName The groupName parameter.
     * @param discoGroupRequest DiscoGroupRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return validateResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> discoveryGroupsValidateWithResponseAsync(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String groupName,
            BinaryData discoGroupRequest,
            RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.discoveryGroupsValidate(
                                this.getRegion(),
                                subscriptionId,
                                resourceGroupName,
                                workspaceName,
                                this.getServiceVersion().getVersion(),
                                groupName,
                                accept,
                                discoGroupRequest,
                                requestOptions,
                                context));
    }

    /**
     * Validate a discovery group with a given groupName.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     description: String (Optional)
     *     tier: String (Optional)
     *     frequencyMilliseconds: Long (Optional)
     *     seeds (Optional): [
     *          (Optional){
     *             kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *             name: String (Optional)
     *         }
     *     ]
     *     names (Optional): [
     *         String (Optional)
     *     ]
     *     excludes (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     templateId: String (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     error (Required): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Required): {
     *             code: String (Optional)
     *             value: Object (Optional)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param groupName The groupName parameter.
     * @param discoGroupRequest DiscoGroupRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return validateResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> discoveryGroupsValidateWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String groupName,
            BinaryData discoGroupRequest,
            RequestOptions requestOptions) {
        return discoveryGroupsValidateWithResponseAsync(
                        subscriptionId, resourceGroupName, workspaceName, groupName, discoGroupRequest, requestOptions)
                .block();
    }

    /**
     * Retrieve a discovery group with a given groupName.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     tier: String (Optional)
     *     frequencyMilliseconds: Long (Optional)
     *     seeds (Optional): [
     *          (Optional){
     *             kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *             name: String (Optional)
     *         }
     *     ]
     *     names (Optional): [
     *         String (Optional)
     *     ]
     *     excludes (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     latestRun (Required): {
     *         submittedDate: OffsetDateTime (Optional)
     *         startedDate: OffsetDateTime (Optional)
     *         completedDate: OffsetDateTime (Optional)
     *         tier: String (Optional)
     *         state: String(pending/running/completed/failed) (Optional)
     *         totalAssetsFoundCount: Long (Optional)
     *         seeds (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         excludes (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         names (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     createdDate: OffsetDateTime (Optional)
     *     templateId: String (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param groupName The groupName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return discoGroupResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> discoveryGroupsGetWithResponseAsync(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String groupName,
            RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.discoveryGroupsGet(
                                this.getRegion(),
                                subscriptionId,
                                resourceGroupName,
                                workspaceName,
                                groupName,
                                this.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Retrieve a discovery group with a given groupName.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     tier: String (Optional)
     *     frequencyMilliseconds: Long (Optional)
     *     seeds (Optional): [
     *          (Optional){
     *             kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *             name: String (Optional)
     *         }
     *     ]
     *     names (Optional): [
     *         String (Optional)
     *     ]
     *     excludes (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     latestRun (Required): {
     *         submittedDate: OffsetDateTime (Optional)
     *         startedDate: OffsetDateTime (Optional)
     *         completedDate: OffsetDateTime (Optional)
     *         tier: String (Optional)
     *         state: String(pending/running/completed/failed) (Optional)
     *         totalAssetsFoundCount: Long (Optional)
     *         seeds (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         excludes (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         names (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     createdDate: OffsetDateTime (Optional)
     *     templateId: String (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param groupName The groupName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return discoGroupResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> discoveryGroupsGetWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String groupName,
            RequestOptions requestOptions) {
        return discoveryGroupsGetWithResponseAsync(
                        subscriptionId, resourceGroupName, workspaceName, groupName, requestOptions)
                .block();
    }

    /**
     * Create a discovery group with a given groupName.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     description: String (Optional)
     *     tier: String (Optional)
     *     frequencyMilliseconds: Long (Optional)
     *     seeds (Optional): [
     *          (Optional){
     *             kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *             name: String (Optional)
     *         }
     *     ]
     *     names (Optional): [
     *         String (Optional)
     *     ]
     *     excludes (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     templateId: String (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     tier: String (Optional)
     *     frequencyMilliseconds: Long (Optional)
     *     seeds (Optional): [
     *          (Optional){
     *             kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *             name: String (Optional)
     *         }
     *     ]
     *     names (Optional): [
     *         String (Optional)
     *     ]
     *     excludes (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     latestRun (Required): {
     *         submittedDate: OffsetDateTime (Optional)
     *         startedDate: OffsetDateTime (Optional)
     *         completedDate: OffsetDateTime (Optional)
     *         tier: String (Optional)
     *         state: String(pending/running/completed/failed) (Optional)
     *         totalAssetsFoundCount: Long (Optional)
     *         seeds (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         excludes (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         names (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     createdDate: OffsetDateTime (Optional)
     *     templateId: String (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param groupName The groupName parameter.
     * @param discoGroupRequest DiscoGroupRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return discoGroupResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> discoveryGroupsPutWithResponseAsync(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String groupName,
            BinaryData discoGroupRequest,
            RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.discoveryGroupsPut(
                                this.getRegion(),
                                subscriptionId,
                                resourceGroupName,
                                workspaceName,
                                groupName,
                                this.getServiceVersion().getVersion(),
                                accept,
                                discoGroupRequest,
                                requestOptions,
                                context));
    }

    /**
     * Create a discovery group with a given groupName.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     description: String (Optional)
     *     tier: String (Optional)
     *     frequencyMilliseconds: Long (Optional)
     *     seeds (Optional): [
     *          (Optional){
     *             kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *             name: String (Optional)
     *         }
     *     ]
     *     names (Optional): [
     *         String (Optional)
     *     ]
     *     excludes (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     templateId: String (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     tier: String (Optional)
     *     frequencyMilliseconds: Long (Optional)
     *     seeds (Optional): [
     *          (Optional){
     *             kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *             name: String (Optional)
     *         }
     *     ]
     *     names (Optional): [
     *         String (Optional)
     *     ]
     *     excludes (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     latestRun (Required): {
     *         submittedDate: OffsetDateTime (Optional)
     *         startedDate: OffsetDateTime (Optional)
     *         completedDate: OffsetDateTime (Optional)
     *         tier: String (Optional)
     *         state: String(pending/running/completed/failed) (Optional)
     *         totalAssetsFoundCount: Long (Optional)
     *         seeds (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         excludes (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         names (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     createdDate: OffsetDateTime (Optional)
     *     templateId: String (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param groupName The groupName parameter.
     * @param discoGroupRequest DiscoGroupRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return discoGroupResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> discoveryGroupsPutWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String groupName,
            BinaryData discoGroupRequest,
            RequestOptions requestOptions) {
        return discoveryGroupsPutWithResponseAsync(
                        subscriptionId, resourceGroupName, workspaceName, groupName, discoGroupRequest, requestOptions)
                .block();
    }

    /**
     * Run a discovery group with a given groupName.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param groupName The groupName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> discoveryGroupsRunWithResponseAsync(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String groupName,
            RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.discoveryGroupsRun(
                                this.getRegion(),
                                subscriptionId,
                                resourceGroupName,
                                workspaceName,
                                groupName,
                                this.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Run a discovery group with a given groupName.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param groupName The groupName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> discoveryGroupsRunWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String groupName,
            RequestOptions requestOptions) {
        return discoveryGroupsRunWithResponseAsync(
                        subscriptionId, resourceGroupName, workspaceName, groupName, requestOptions)
                .block();
    }

    /**
     * Retrieve a collection of discovery run results for a discovery group with a given groupName.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter parameter</td></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>The skip parameter</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maxPageSize parameter</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalElements: Long (Optional)
     *     nextLink: String (Optional)
     *     value (Required): [
     *          (Required){
     *             submittedDate: OffsetDateTime (Optional)
     *             startedDate: OffsetDateTime (Optional)
     *             completedDate: OffsetDateTime (Optional)
     *             tier: String (Optional)
     *             state: String(pending/running/completed/failed) (Optional)
     *             totalAssetsFoundCount: Long (Optional)
     *             seeds (Optional): [
     *                  (Optional){
     *                     kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *                     name: String (Optional)
     *                 }
     *             ]
     *             excludes (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             names (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param groupName The groupName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return discoRunPageResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> discoveryGroupsListRunsWithResponseAsync(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String groupName,
            RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.discoveryGroupsListRuns(
                                this.getRegion(),
                                subscriptionId,
                                resourceGroupName,
                                workspaceName,
                                groupName,
                                this.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Retrieve a collection of discovery run results for a discovery group with a given groupName.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter parameter</td></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>The skip parameter</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maxPageSize parameter</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalElements: Long (Optional)
     *     nextLink: String (Optional)
     *     value (Required): [
     *          (Required){
     *             submittedDate: OffsetDateTime (Optional)
     *             startedDate: OffsetDateTime (Optional)
     *             completedDate: OffsetDateTime (Optional)
     *             tier: String (Optional)
     *             state: String(pending/running/completed/failed) (Optional)
     *             totalAssetsFoundCount: Long (Optional)
     *             seeds (Optional): [
     *                  (Optional){
     *                     kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *                     name: String (Optional)
     *                 }
     *             ]
     *             excludes (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             names (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param groupName The groupName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return discoRunPageResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> discoveryGroupsListRunsWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String groupName,
            RequestOptions requestOptions) {
        return discoveryGroupsListRunsWithResponseAsync(
                        subscriptionId, resourceGroupName, workspaceName, groupName, requestOptions)
                .block();
    }

    /**
     * Retrieve a list of disco templates for the provided search parameters.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter parameter</td></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>The skip parameter</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maxPageSize parameter</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalElements: Long (Optional)
     *     nextLink: String (Optional)
     *     value (Required): [
     *          (Required){
     *             id: String (Optional)
     *             name: String (Optional)
     *             displayName: String (Optional)
     *             industry: String (Optional)
     *             region: String (Optional)
     *             countryCode: String (Optional)
     *             stateCode: String (Optional)
     *             city: String (Optional)
     *             seeds (Optional): [
     *                  (Optional){
     *                     kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *                     name: String (Optional)
     *                 }
     *             ]
     *             names (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return discoTemplatePageResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> discoveryTemplatesListWithResponseAsync(
            String subscriptionId, String resourceGroupName, String workspaceName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.discoveryTemplatesList(
                                this.getRegion(),
                                subscriptionId,
                                resourceGroupName,
                                workspaceName,
                                this.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Retrieve a list of disco templates for the provided search parameters.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter parameter</td></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>The skip parameter</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maxPageSize parameter</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalElements: Long (Optional)
     *     nextLink: String (Optional)
     *     value (Required): [
     *          (Required){
     *             id: String (Optional)
     *             name: String (Optional)
     *             displayName: String (Optional)
     *             industry: String (Optional)
     *             region: String (Optional)
     *             countryCode: String (Optional)
     *             stateCode: String (Optional)
     *             city: String (Optional)
     *             seeds (Optional): [
     *                  (Optional){
     *                     kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *                     name: String (Optional)
     *                 }
     *             ]
     *             names (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return discoTemplatePageResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> discoveryTemplatesListWithResponse(
            String subscriptionId, String resourceGroupName, String workspaceName, RequestOptions requestOptions) {
        return discoveryTemplatesListWithResponseAsync(subscriptionId, resourceGroupName, workspaceName, requestOptions)
                .block();
    }

    /**
     * Retrieve a disco template with a given templateId.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     displayName: String (Optional)
     *     industry: String (Optional)
     *     region: String (Optional)
     *     countryCode: String (Optional)
     *     stateCode: String (Optional)
     *     city: String (Optional)
     *     seeds (Optional): [
     *          (Optional){
     *             kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *             name: String (Optional)
     *         }
     *     ]
     *     names (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param templateId The templateId parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return discoTemplateResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> discoveryTemplatesGetWithResponseAsync(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String templateId,
            RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.discoveryTemplatesGet(
                                this.getRegion(),
                                subscriptionId,
                                resourceGroupName,
                                workspaceName,
                                templateId,
                                this.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Retrieve a disco template with a given templateId.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     displayName: String (Optional)
     *     industry: String (Optional)
     *     region: String (Optional)
     *     countryCode: String (Optional)
     *     stateCode: String (Optional)
     *     city: String (Optional)
     *     seeds (Optional): [
     *          (Optional){
     *             kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *             name: String (Optional)
     *         }
     *     ]
     *     names (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param templateId The templateId parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return discoTemplateResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> discoveryTemplatesGetWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String templateId,
            RequestOptions requestOptions) {
        return discoveryTemplatesGetWithResponseAsync(
                        subscriptionId, resourceGroupName, workspaceName, templateId, requestOptions)
                .block();
    }

    /**
     * Get billable assets summary for the workspace.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     assetSummaries (Optional): [
     *          (Optional){
     *             date: LocalDate (Optional)
     *             total: Long (Optional)
     *             assetBreakdown (Optional): [
     *                  (Optional){
     *                     kind: String(domain/host/ipAddress) (Optional)
     *                     count: Long (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return billable assets summary for the workspace along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> reportsBillableWithResponseAsync(
            String subscriptionId, String resourceGroupName, String workspaceName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.reportsBillable(
                                this.getRegion(),
                                subscriptionId,
                                resourceGroupName,
                                workspaceName,
                                this.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Get billable assets summary for the workspace.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     assetSummaries (Optional): [
     *          (Optional){
     *             date: LocalDate (Optional)
     *             total: Long (Optional)
     *             assetBreakdown (Optional): [
     *                  (Optional){
     *                     kind: String(domain/host/ipAddress) (Optional)
     *                     count: Long (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return billable assets summary for the workspace along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> reportsBillableWithResponse(
            String subscriptionId, String resourceGroupName, String workspaceName, RequestOptions requestOptions) {
        return reportsBillableWithResponseAsync(subscriptionId, resourceGroupName, workspaceName, requestOptions)
                .block();
    }

    /**
     * Get the most recent snapshot of asset summary values for the snapshot request.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     metric: String (Optional)
     *     labelName: String (Optional)
     *     size: Integer (Optional)
     *     page: Integer (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     displayName: String (Optional)
     *     metric: String (Optional)
     *     labelName: String (Optional)
     *     updatedAt: OffsetDateTime (Optional)
     *     description: String (Optional)
     *     assets (Required): {
     *         totalElements: Long (Optional)
     *         mark: String (Optional)
     *         nextLink: String (Optional)
     *         value (Required): [
     *              (Required){
     *                 id: String (Optional)
     *                 name: String (Optional)
     *                 displayName: String (Optional)
     *                 uuid: String (Optional)
     *                 asset: Object (Required)
     *                 createdDate: OffsetDateTime (Optional)
     *                 updatedDate: OffsetDateTime (Optional)
     *                 state: String(candidate/confirmed/dismissed/candidateInvestigate/associatedPartner/associatedThirdparty/archived) (Optional)
     *                 externalId: String (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 wildcard: Boolean (Optional)
     *                 discoGroupName: String (Optional)
     *                 auditTrail (Optional): [
     *                      (Optional){
     *                         id: String (Optional)
     *                         name: String (Optional)
     *                         displayName: String (Optional)
     *                         kind: String(as/contact/domain/host/ipAddress/ipBlock/page/sslCert) (Optional)
     *                         reason: String (Optional)
     *                     }
     *                 ]
     *                 reason: String (Optional)
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param reportAssetSnapshotRequest ReportAssetSnapshotRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the most recent snapshot of asset summary values for the snapshot request along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> reportsSnapshotWithResponseAsync(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            BinaryData reportAssetSnapshotRequest,
            RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.reportsSnapshot(
                                this.getRegion(),
                                subscriptionId,
                                resourceGroupName,
                                workspaceName,
                                this.getServiceVersion().getVersion(),
                                accept,
                                reportAssetSnapshotRequest,
                                requestOptions,
                                context));
    }

    /**
     * Get the most recent snapshot of asset summary values for the snapshot request.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     metric: String (Optional)
     *     labelName: String (Optional)
     *     size: Integer (Optional)
     *     page: Integer (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     displayName: String (Optional)
     *     metric: String (Optional)
     *     labelName: String (Optional)
     *     updatedAt: OffsetDateTime (Optional)
     *     description: String (Optional)
     *     assets (Required): {
     *         totalElements: Long (Optional)
     *         mark: String (Optional)
     *         nextLink: String (Optional)
     *         value (Required): [
     *              (Required){
     *                 id: String (Optional)
     *                 name: String (Optional)
     *                 displayName: String (Optional)
     *                 uuid: String (Optional)
     *                 asset: Object (Required)
     *                 createdDate: OffsetDateTime (Optional)
     *                 updatedDate: OffsetDateTime (Optional)
     *                 state: String(candidate/confirmed/dismissed/candidateInvestigate/associatedPartner/associatedThirdparty/archived) (Optional)
     *                 externalId: String (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 wildcard: Boolean (Optional)
     *                 discoGroupName: String (Optional)
     *                 auditTrail (Optional): [
     *                      (Optional){
     *                         id: String (Optional)
     *                         name: String (Optional)
     *                         displayName: String (Optional)
     *                         kind: String(as/contact/domain/host/ipAddress/ipBlock/page/sslCert) (Optional)
     *                         reason: String (Optional)
     *                     }
     *                 ]
     *                 reason: String (Optional)
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param reportAssetSnapshotRequest ReportAssetSnapshotRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the most recent snapshot of asset summary values for the snapshot request along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> reportsSnapshotWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            BinaryData reportAssetSnapshotRequest,
            RequestOptions requestOptions) {
        return reportsSnapshotWithResponseAsync(
                        subscriptionId, resourceGroupName, workspaceName, reportAssetSnapshotRequest, requestOptions)
                .block();
    }

    /**
     * Queue an export of the most recent snapshot of asset summary values to a file.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     metric: String (Optional)
     *     fileName: String (Optional)
     *     columns (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     startedAt: OffsetDateTime (Optional)
     *     completedAt: OffsetDateTime (Optional)
     *     lastPolledAt: OffsetDateTime (Optional)
     *     state: String(pending/running/paused/complete/incomplete/failed/warning) (Optional)
     *     phase: String(running/polling/complete) (Optional)
     *     reason: String (Optional)
     *     metadata: Object (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param reportAssetSnapshotExportRequest ReportAssetSnapshotExportRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return taskResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> reportsSnapshotExportWithResponseAsync(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            BinaryData reportAssetSnapshotExportRequest,
            RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.reportsSnapshotExport(
                                this.getRegion(),
                                subscriptionId,
                                resourceGroupName,
                                workspaceName,
                                this.getServiceVersion().getVersion(),
                                accept,
                                reportAssetSnapshotExportRequest,
                                requestOptions,
                                context));
    }

    /**
     * Queue an export of the most recent snapshot of asset summary values to a file.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     metric: String (Optional)
     *     fileName: String (Optional)
     *     columns (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     startedAt: OffsetDateTime (Optional)
     *     completedAt: OffsetDateTime (Optional)
     *     lastPolledAt: OffsetDateTime (Optional)
     *     state: String(pending/running/paused/complete/incomplete/failed/warning) (Optional)
     *     phase: String(running/polling/complete) (Optional)
     *     reason: String (Optional)
     *     metadata: Object (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param reportAssetSnapshotExportRequest ReportAssetSnapshotExportRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return taskResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> reportsSnapshotExportWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            BinaryData reportAssetSnapshotExportRequest,
            RequestOptions requestOptions) {
        return reportsSnapshotExportWithResponseAsync(
                        subscriptionId,
                        resourceGroupName,
                        workspaceName,
                        reportAssetSnapshotExportRequest,
                        requestOptions)
                .block();
    }

    /**
     * Get asset summary details for the summary request.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     metricCategories (Optional): [
     *         String (Optional)
     *     ]
     *     metrics (Optional): [
     *         String (Optional)
     *     ]
     *     filters (Optional): [
     *         String (Optional)
     *     ]
     *     groupBy: String (Optional)
     *     segmentBy: String (Optional)
     *     labelName: String (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     assetSummaries (Optional): [
     *          (Optional){
     *             displayName: String (Optional)
     *             description: String (Optional)
     *             updatedAt: OffsetDateTime (Optional)
     *             metricCategory: String (Optional)
     *             metric: String (Optional)
     *             filter: String (Optional)
     *             labelName: String (Optional)
     *             count: Long (Optional)
     *             link: String (Optional)
     *             children (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param reportAssetSummaryRequest ReportAssetSummaryRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return asset summary details for the summary request along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> reportsSummaryWithResponseAsync(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            BinaryData reportAssetSummaryRequest,
            RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.reportsSummary(
                                this.getRegion(),
                                subscriptionId,
                                resourceGroupName,
                                workspaceName,
                                this.getServiceVersion().getVersion(),
                                accept,
                                reportAssetSummaryRequest,
                                requestOptions,
                                context));
    }

    /**
     * Get asset summary details for the summary request.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     metricCategories (Optional): [
     *         String (Optional)
     *     ]
     *     metrics (Optional): [
     *         String (Optional)
     *     ]
     *     filters (Optional): [
     *         String (Optional)
     *     ]
     *     groupBy: String (Optional)
     *     segmentBy: String (Optional)
     *     labelName: String (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     assetSummaries (Optional): [
     *          (Optional){
     *             displayName: String (Optional)
     *             description: String (Optional)
     *             updatedAt: OffsetDateTime (Optional)
     *             metricCategory: String (Optional)
     *             metric: String (Optional)
     *             filter: String (Optional)
     *             labelName: String (Optional)
     *             count: Long (Optional)
     *             link: String (Optional)
     *             children (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param reportAssetSummaryRequest ReportAssetSummaryRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return asset summary details for the summary request along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> reportsSummaryWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            BinaryData reportAssetSummaryRequest,
            RequestOptions requestOptions) {
        return reportsSummaryWithResponseAsync(
                        subscriptionId, resourceGroupName, workspaceName, reportAssetSummaryRequest, requestOptions)
                .block();
    }

    /**
     * Retrieve a list of saved filters for the provided search parameters.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter parameter</td></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>The skip parameter</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maxPageSize parameter</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalElements: Long (Optional)
     *     nextLink: String (Optional)
     *     value (Required): [
     *          (Required){
     *             id: String (Optional)
     *             name: String (Optional)
     *             displayName: String (Optional)
     *             filter: String (Optional)
     *             description: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return savedFilterPageResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> savedFiltersListWithResponseAsync(
            String subscriptionId, String resourceGroupName, String workspaceName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.savedFiltersList(
                                this.getRegion(),
                                subscriptionId,
                                resourceGroupName,
                                workspaceName,
                                this.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Retrieve a list of saved filters for the provided search parameters.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter parameter</td></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>The skip parameter</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maxPageSize parameter</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalElements: Long (Optional)
     *     nextLink: String (Optional)
     *     value (Required): [
     *          (Required){
     *             id: String (Optional)
     *             name: String (Optional)
     *             displayName: String (Optional)
     *             filter: String (Optional)
     *             description: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return savedFilterPageResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> savedFiltersListWithResponse(
            String subscriptionId, String resourceGroupName, String workspaceName, RequestOptions requestOptions) {
        return savedFiltersListWithResponseAsync(subscriptionId, resourceGroupName, workspaceName, requestOptions)
                .block();
    }

    /**
     * Retrieve a saved filter by filterName.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     displayName: String (Optional)
     *     filter: String (Optional)
     *     description: String (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param filterName The filterName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return savedFilterResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> savedFiltersGetWithResponseAsync(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String filterName,
            RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.savedFiltersGet(
                                this.getRegion(),
                                subscriptionId,
                                resourceGroupName,
                                workspaceName,
                                filterName,
                                this.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Retrieve a saved filter by filterName.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     displayName: String (Optional)
     *     filter: String (Optional)
     *     description: String (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param filterName The filterName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return savedFilterResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> savedFiltersGetWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String filterName,
            RequestOptions requestOptions) {
        return savedFiltersGetWithResponseAsync(
                        subscriptionId, resourceGroupName, workspaceName, filterName, requestOptions)
                .block();
    }

    /**
     * Create or update a saved filter with a given filterName.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     filter: String (Required)
     *     description: String (Required)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     displayName: String (Optional)
     *     filter: String (Optional)
     *     description: String (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param filterName The filterName parameter.
     * @param savedFilterRequest SavedFilterRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return savedFilterResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> savedFiltersPutWithResponseAsync(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String filterName,
            BinaryData savedFilterRequest,
            RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.savedFiltersPut(
                                this.getRegion(),
                                subscriptionId,
                                resourceGroupName,
                                workspaceName,
                                filterName,
                                this.getServiceVersion().getVersion(),
                                accept,
                                savedFilterRequest,
                                requestOptions,
                                context));
    }

    /**
     * Create or update a saved filter with a given filterName.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     filter: String (Required)
     *     description: String (Required)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     displayName: String (Optional)
     *     filter: String (Optional)
     *     description: String (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param filterName The filterName parameter.
     * @param savedFilterRequest SavedFilterRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return savedFilterResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> savedFiltersPutWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String filterName,
            BinaryData savedFilterRequest,
            RequestOptions requestOptions) {
        return savedFiltersPutWithResponseAsync(
                        subscriptionId,
                        resourceGroupName,
                        workspaceName,
                        filterName,
                        savedFilterRequest,
                        requestOptions)
                .block();
    }

    /**
     * Delete a saved filter with a given filterName.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param filterName The filterName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> savedFiltersDeleteWithResponseAsync(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String filterName,
            RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.savedFiltersDelete(
                                this.getRegion(),
                                subscriptionId,
                                resourceGroupName,
                                workspaceName,
                                filterName,
                                this.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Delete a saved filter with a given filterName.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param filterName The filterName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> savedFiltersDeleteWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String filterName,
            RequestOptions requestOptions) {
        return savedFiltersDeleteWithResponseAsync(
                        subscriptionId, resourceGroupName, workspaceName, filterName, requestOptions)
                .block();
    }

    /**
     * Retrieve a list of tasks for the provided search parameters.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter parameter</td></tr>
     *     <tr><td>orderby</td><td>String</td><td>No</td><td>The orderBy parameter</td></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>The skip parameter</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maxPageSize parameter</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalElements: Long (Optional)
     *     nextLink: String (Optional)
     *     value (Required): [
     *          (Required){
     *             id: String (Optional)
     *             startedAt: OffsetDateTime (Optional)
     *             completedAt: OffsetDateTime (Optional)
     *             lastPolledAt: OffsetDateTime (Optional)
     *             state: String(pending/running/paused/complete/incomplete/failed/warning) (Optional)
     *             phase: String(running/polling/complete) (Optional)
     *             reason: String (Optional)
     *             metadata: Object (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return taskPageResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> tasksListWithResponseAsync(
            String subscriptionId, String resourceGroupName, String workspaceName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.tasksList(
                                this.getRegion(),
                                subscriptionId,
                                resourceGroupName,
                                workspaceName,
                                this.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Retrieve a list of tasks for the provided search parameters.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter parameter</td></tr>
     *     <tr><td>orderby</td><td>String</td><td>No</td><td>The orderBy parameter</td></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>The skip parameter</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maxPageSize parameter</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalElements: Long (Optional)
     *     nextLink: String (Optional)
     *     value (Required): [
     *          (Required){
     *             id: String (Optional)
     *             startedAt: OffsetDateTime (Optional)
     *             completedAt: OffsetDateTime (Optional)
     *             lastPolledAt: OffsetDateTime (Optional)
     *             state: String(pending/running/paused/complete/incomplete/failed/warning) (Optional)
     *             phase: String(running/polling/complete) (Optional)
     *             reason: String (Optional)
     *             metadata: Object (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return taskPageResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> tasksListWithResponse(
            String subscriptionId, String resourceGroupName, String workspaceName, RequestOptions requestOptions) {
        return tasksListWithResponseAsync(subscriptionId, resourceGroupName, workspaceName, requestOptions).block();
    }

    /**
     * Retrieve a task by taskId.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     startedAt: OffsetDateTime (Optional)
     *     completedAt: OffsetDateTime (Optional)
     *     lastPolledAt: OffsetDateTime (Optional)
     *     state: String(pending/running/paused/complete/incomplete/failed/warning) (Optional)
     *     phase: String(running/polling/complete) (Optional)
     *     reason: String (Optional)
     *     metadata: Object (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param taskId The taskId parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return taskResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> tasksGetWithResponseAsync(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String taskId,
            RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.tasksGet(
                                this.getRegion(),
                                subscriptionId,
                                resourceGroupName,
                                workspaceName,
                                taskId,
                                this.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Retrieve a task by taskId.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     startedAt: OffsetDateTime (Optional)
     *     completedAt: OffsetDateTime (Optional)
     *     lastPolledAt: OffsetDateTime (Optional)
     *     state: String(pending/running/paused/complete/incomplete/failed/warning) (Optional)
     *     phase: String(running/polling/complete) (Optional)
     *     reason: String (Optional)
     *     metadata: Object (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param taskId The taskId parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return taskResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> tasksGetWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String taskId,
            RequestOptions requestOptions) {
        return tasksGetWithResponseAsync(subscriptionId, resourceGroupName, workspaceName, taskId, requestOptions)
                .block();
    }

    /**
     * Cancel a task by taskId.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     startedAt: OffsetDateTime (Optional)
     *     completedAt: OffsetDateTime (Optional)
     *     lastPolledAt: OffsetDateTime (Optional)
     *     state: String(pending/running/paused/complete/incomplete/failed/warning) (Optional)
     *     phase: String(running/polling/complete) (Optional)
     *     reason: String (Optional)
     *     metadata: Object (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param taskId The taskId parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return taskResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> tasksCancelWithResponseAsync(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String taskId,
            RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.tasksCancel(
                                this.getRegion(),
                                subscriptionId,
                                resourceGroupName,
                                workspaceName,
                                taskId,
                                this.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Cancel a task by taskId.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     startedAt: OffsetDateTime (Optional)
     *     completedAt: OffsetDateTime (Optional)
     *     lastPolledAt: OffsetDateTime (Optional)
     *     state: String(pending/running/paused/complete/incomplete/failed/warning) (Optional)
     *     phase: String(running/polling/complete) (Optional)
     *     reason: String (Optional)
     *     metadata: Object (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param taskId The taskId parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return taskResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> tasksCancelWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String taskId,
            RequestOptions requestOptions) {
        return tasksCancelWithResponseAsync(subscriptionId, resourceGroupName, workspaceName, taskId, requestOptions)
                .block();
    }
}
