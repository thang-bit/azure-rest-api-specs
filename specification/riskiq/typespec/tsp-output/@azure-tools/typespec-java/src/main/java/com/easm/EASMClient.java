// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.easm;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.easm.models.AssetPageResponse;
import com.easm.models.AssetResponse;
import com.easm.models.AssetUpdateRequest;
import com.easm.models.DataConnectionPageResponse;
import com.easm.models.DataConnectionRequest;
import com.easm.models.DataConnectionResponse;
import com.easm.models.DiscoGroupPageResponse;
import com.easm.models.DiscoGroupRequest;
import com.easm.models.DiscoGroupResponse;
import com.easm.models.DiscoRunPageResponse;
import com.easm.models.DiscoTemplatePageResponse;
import com.easm.models.DiscoTemplateResponse;
import com.easm.models.ReportAssetSnapshotExportRequest;
import com.easm.models.ReportAssetSnapshotRequest;
import com.easm.models.ReportAssetSnapshotResponse;
import com.easm.models.ReportAssetSummaryRequest;
import com.easm.models.ReportAssetSummaryResponse;
import com.easm.models.ReportBillableAssetSummaryResponse;
import com.easm.models.SavedFilterPageResponse;
import com.easm.models.SavedFilterRequest;
import com.easm.models.SavedFilterResponse;
import com.easm.models.TaskPageResponse;
import com.easm.models.TaskResponse;
import com.easm.models.ValidateResponse;

/** Initializes a new instance of the synchronous EASMClient type. */
@ServiceClient(builder = EASMClientBuilder.class)
public final class EASMClient {
    @Generated private final EASMAsyncClient client;

    /**
     * Initializes an instance of EASMClient class.
     *
     * @param client the async client.
     */
    @Generated
    EASMClient(EASMAsyncClient client) {
        this.client = client;
    }

    /**
     * Retrieve a list of assets for the provided search parameters.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter parameter</td></tr>
     *     <tr><td>orderby</td><td>String</td><td>No</td><td>The orderBy parameter</td></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>The skip parameter</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maxPageSize parameter</td></tr>
     *     <tr><td>mark</td><td>String</td><td>No</td><td>The mark parameter</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalElements: Long (Optional)
     *     mark: String (Optional)
     *     nextLink: String (Optional)
     *     value (Required): [
     *          (Required){
     *             id: String (Optional)
     *             name: String (Optional)
     *             displayName: String (Optional)
     *             uuid: String (Optional)
     *             asset: Object (Required)
     *             createdDate: OffsetDateTime (Optional)
     *             updatedDate: OffsetDateTime (Optional)
     *             state: String(candidate/confirmed/dismissed/candidateInvestigate/associatedPartner/associatedThirdparty/archived) (Optional)
     *             externalId: String (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             wildcard: Boolean (Optional)
     *             discoGroupName: String (Optional)
     *             auditTrail (Optional): [
     *                  (Optional){
     *                     id: String (Optional)
     *                     name: String (Optional)
     *                     displayName: String (Optional)
     *                     kind: String(as/contact/domain/host/ipAddress/ipBlock/page/sslCert) (Optional)
     *                     reason: String (Optional)
     *                 }
     *             ]
     *             reason: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return assetPageResponse along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> assetsListWithResponse(
            String subscriptionId, String resourceGroupName, String workspaceName, RequestOptions requestOptions) {
        return this.client
                .assetsListWithResponse(subscriptionId, resourceGroupName, workspaceName, requestOptions)
                .block();
    }

    /**
     * Update labels on assets matching the provided filter.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter parameter</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     state: String(candidate/confirmed/dismissed/candidateInvestigate/associatedPartner/associatedThirdparty) (Optional)
     *     externalId: String (Optional)
     *     labels: Object (Optional)
     *     transfers: String(as/contact/domain/host/ipAddress/ipBlock/page/sslCert) (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     startedAt: OffsetDateTime (Optional)
     *     completedAt: OffsetDateTime (Optional)
     *     lastPolledAt: OffsetDateTime (Optional)
     *     state: String(pending/running/paused/complete/incomplete/failed/warning) (Optional)
     *     phase: String(running/polling/complete) (Optional)
     *     reason: String (Optional)
     *     metadata: Object (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param assetUpdateRequest AssetUpdateRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return taskResponse along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> assetsUpdateWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            BinaryData assetUpdateRequest,
            RequestOptions requestOptions) {
        return this.client
                .assetsUpdateWithResponse(
                        subscriptionId, resourceGroupName, workspaceName, assetUpdateRequest, requestOptions)
                .block();
    }

    /**
     * Retrieve an asset by assetId.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     displayName: String (Optional)
     *     uuid: String (Optional)
     *     asset: Object (Required)
     *     createdDate: OffsetDateTime (Optional)
     *     updatedDate: OffsetDateTime (Optional)
     *     state: String(candidate/confirmed/dismissed/candidateInvestigate/associatedPartner/associatedThirdparty/archived) (Optional)
     *     externalId: String (Optional)
     *     labels (Optional): [
     *         String (Optional)
     *     ]
     *     wildcard: Boolean (Optional)
     *     discoGroupName: String (Optional)
     *     auditTrail (Optional): [
     *          (Optional){
     *             id: String (Optional)
     *             name: String (Optional)
     *             displayName: String (Optional)
     *             kind: String(as/contact/domain/host/ipAddress/ipBlock/page/sslCert) (Optional)
     *             reason: String (Optional)
     *         }
     *     ]
     *     reason: String (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param assetId The assetId parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return assetResponse along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> assetsGetWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String assetId,
            RequestOptions requestOptions) {
        return this.client
                .assetsGetWithResponse(subscriptionId, resourceGroupName, workspaceName, assetId, requestOptions)
                .block();
    }

    /**
     * Retrieve a list of data connections.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>The skip parameter</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maxPageSize parameter</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalElements: Long (Optional)
     *     nextLink: String (Optional)
     *     value (Required): [
     *          (Required){
     *             id: String (Optional)
     *             name: String (Optional)
     *             displayName: String (Optional)
     *             content: String(assets/attackSurfaceInsights) (Optional)
     *             properties: Object (Required)
     *             createdDate: OffsetDateTime (Optional)
     *             frequency: String(daily/weekly/monthly) (Optional)
     *             frequencyOffset: Integer (Optional)
     *             updatedDate: OffsetDateTime (Optional)
     *             userUpdatedAt: OffsetDateTime (Optional)
     *             active: Boolean (Optional)
     *             inactiveMessage: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return dataConnectionPageResponse along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> dataConnectionsListWithResponse(
            String subscriptionId, String resourceGroupName, String workspaceName, RequestOptions requestOptions) {
        return this.client
                .dataConnectionsListWithResponse(subscriptionId, resourceGroupName, workspaceName, requestOptions)
                .block();
    }

    /**
     * Validate a data connection with a given dataConnectionName.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     content: String(assets/attackSurfaceInsights) (Optional)
     *     properties: Object (Required)
     *     frequency: String(daily/weekly/monthly) (Optional)
     *     frequencyOffset: Integer (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     error (Required): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Required): {
     *             code: String (Optional)
     *             value: Object (Optional)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param dataConnectionRequest DataConnectionRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return validateResponse along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> dataConnectionsValidateWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            BinaryData dataConnectionRequest,
            RequestOptions requestOptions) {
        return this.client
                .dataConnectionsValidateWithResponse(
                        subscriptionId, resourceGroupName, workspaceName, dataConnectionRequest, requestOptions)
                .block();
    }

    /**
     * Retrieve a data connection with a given dataConnectionName.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     displayName: String (Optional)
     *     content: String(assets/attackSurfaceInsights) (Optional)
     *     properties: Object (Required)
     *     createdDate: OffsetDateTime (Optional)
     *     frequency: String(daily/weekly/monthly) (Optional)
     *     frequencyOffset: Integer (Optional)
     *     updatedDate: OffsetDateTime (Optional)
     *     userUpdatedAt: OffsetDateTime (Optional)
     *     active: Boolean (Optional)
     *     inactiveMessage: String (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param dataConnectionName The dataConnectionName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return dataConnectionResponse along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> dataConnectionsGetWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String dataConnectionName,
            RequestOptions requestOptions) {
        return this.client
                .dataConnectionsGetWithResponse(
                        subscriptionId, resourceGroupName, workspaceName, dataConnectionName, requestOptions)
                .block();
    }

    /**
     * Create or update a data connection with a given dataConnectionName.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     content: String(assets/attackSurfaceInsights) (Optional)
     *     properties: Object (Required)
     *     frequency: String(daily/weekly/monthly) (Optional)
     *     frequencyOffset: Integer (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     displayName: String (Optional)
     *     content: String(assets/attackSurfaceInsights) (Optional)
     *     properties: Object (Required)
     *     createdDate: OffsetDateTime (Optional)
     *     frequency: String(daily/weekly/monthly) (Optional)
     *     frequencyOffset: Integer (Optional)
     *     updatedDate: OffsetDateTime (Optional)
     *     userUpdatedAt: OffsetDateTime (Optional)
     *     active: Boolean (Optional)
     *     inactiveMessage: String (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param dataConnectionName The dataConnectionName parameter.
     * @param dataConnectionRequest DataConnectionRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return dataConnectionResponse along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> dataConnectionsPutWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String dataConnectionName,
            BinaryData dataConnectionRequest,
            RequestOptions requestOptions) {
        return this.client
                .dataConnectionsPutWithResponse(
                        subscriptionId,
                        resourceGroupName,
                        workspaceName,
                        dataConnectionName,
                        dataConnectionRequest,
                        requestOptions)
                .block();
    }

    /**
     * Delete a data connection with a given dataConnectionName.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param dataConnectionName The dataConnectionName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> dataConnectionsDeleteWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String dataConnectionName,
            RequestOptions requestOptions) {
        return this.client
                .dataConnectionsDeleteWithResponse(
                        subscriptionId, resourceGroupName, workspaceName, dataConnectionName, requestOptions)
                .block();
    }

    /**
     * Retrieve a list of discovery group for the provided search parameters.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter parameter</td></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>The skip parameter</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maxPageSize parameter</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalElements: Long (Optional)
     *     nextLink: String (Optional)
     *     value (Required): [
     *          (Required){
     *             id: String (Optional)
     *             name: String (Optional)
     *             displayName: String (Optional)
     *             description: String (Optional)
     *             tier: String (Optional)
     *             frequencyMilliseconds: Long (Optional)
     *             seeds (Optional): [
     *                  (Optional){
     *                     kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *                     name: String (Optional)
     *                 }
     *             ]
     *             names (Optional): [
     *                 String (Optional)
     *             ]
     *             excludes (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             latestRun (Required): {
     *                 submittedDate: OffsetDateTime (Optional)
     *                 startedDate: OffsetDateTime (Optional)
     *                 completedDate: OffsetDateTime (Optional)
     *                 tier: String (Optional)
     *                 state: String(pending/running/completed/failed) (Optional)
     *                 totalAssetsFoundCount: Long (Optional)
     *                 seeds (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *                 excludes (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *                 names (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *             createdDate: OffsetDateTime (Optional)
     *             templateId: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return discoGroupPageResponse along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> discoveryGroupsListWithResponse(
            String subscriptionId, String resourceGroupName, String workspaceName, RequestOptions requestOptions) {
        return this.client
                .discoveryGroupsListWithResponse(subscriptionId, resourceGroupName, workspaceName, requestOptions)
                .block();
    }

    /**
     * Validate a discovery group with a given groupName.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     description: String (Optional)
     *     tier: String (Optional)
     *     frequencyMilliseconds: Long (Optional)
     *     seeds (Optional): [
     *          (Optional){
     *             kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *             name: String (Optional)
     *         }
     *     ]
     *     names (Optional): [
     *         String (Optional)
     *     ]
     *     excludes (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     templateId: String (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     error (Required): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Required): {
     *             code: String (Optional)
     *             value: Object (Optional)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param groupName The groupName parameter.
     * @param discoGroupRequest DiscoGroupRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return validateResponse along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> discoveryGroupsValidateWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String groupName,
            BinaryData discoGroupRequest,
            RequestOptions requestOptions) {
        return this.client
                .discoveryGroupsValidateWithResponse(
                        subscriptionId, resourceGroupName, workspaceName, groupName, discoGroupRequest, requestOptions)
                .block();
    }

    /**
     * Retrieve a discovery group with a given groupName.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     tier: String (Optional)
     *     frequencyMilliseconds: Long (Optional)
     *     seeds (Optional): [
     *          (Optional){
     *             kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *             name: String (Optional)
     *         }
     *     ]
     *     names (Optional): [
     *         String (Optional)
     *     ]
     *     excludes (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     latestRun (Required): {
     *         submittedDate: OffsetDateTime (Optional)
     *         startedDate: OffsetDateTime (Optional)
     *         completedDate: OffsetDateTime (Optional)
     *         tier: String (Optional)
     *         state: String(pending/running/completed/failed) (Optional)
     *         totalAssetsFoundCount: Long (Optional)
     *         seeds (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         excludes (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         names (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     createdDate: OffsetDateTime (Optional)
     *     templateId: String (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param groupName The groupName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return discoGroupResponse along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> discoveryGroupsGetWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String groupName,
            RequestOptions requestOptions) {
        return this.client
                .discoveryGroupsGetWithResponse(
                        subscriptionId, resourceGroupName, workspaceName, groupName, requestOptions)
                .block();
    }

    /**
     * Create a discovery group with a given groupName.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     description: String (Optional)
     *     tier: String (Optional)
     *     frequencyMilliseconds: Long (Optional)
     *     seeds (Optional): [
     *          (Optional){
     *             kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *             name: String (Optional)
     *         }
     *     ]
     *     names (Optional): [
     *         String (Optional)
     *     ]
     *     excludes (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     templateId: String (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     displayName: String (Optional)
     *     description: String (Optional)
     *     tier: String (Optional)
     *     frequencyMilliseconds: Long (Optional)
     *     seeds (Optional): [
     *          (Optional){
     *             kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *             name: String (Optional)
     *         }
     *     ]
     *     names (Optional): [
     *         String (Optional)
     *     ]
     *     excludes (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     latestRun (Required): {
     *         submittedDate: OffsetDateTime (Optional)
     *         startedDate: OffsetDateTime (Optional)
     *         completedDate: OffsetDateTime (Optional)
     *         tier: String (Optional)
     *         state: String(pending/running/completed/failed) (Optional)
     *         totalAssetsFoundCount: Long (Optional)
     *         seeds (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         excludes (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         names (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     createdDate: OffsetDateTime (Optional)
     *     templateId: String (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param groupName The groupName parameter.
     * @param discoGroupRequest DiscoGroupRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return discoGroupResponse along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> discoveryGroupsPutWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String groupName,
            BinaryData discoGroupRequest,
            RequestOptions requestOptions) {
        return this.client
                .discoveryGroupsPutWithResponse(
                        subscriptionId, resourceGroupName, workspaceName, groupName, discoGroupRequest, requestOptions)
                .block();
    }

    /**
     * Run a discovery group with a given groupName.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param groupName The groupName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> discoveryGroupsRunWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String groupName,
            RequestOptions requestOptions) {
        return this.client
                .discoveryGroupsRunWithResponse(
                        subscriptionId, resourceGroupName, workspaceName, groupName, requestOptions)
                .block();
    }

    /**
     * Retrieve a collection of discovery run results for a discovery group with a given groupName.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter parameter</td></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>The skip parameter</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maxPageSize parameter</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalElements: Long (Optional)
     *     nextLink: String (Optional)
     *     value (Required): [
     *          (Required){
     *             submittedDate: OffsetDateTime (Optional)
     *             startedDate: OffsetDateTime (Optional)
     *             completedDate: OffsetDateTime (Optional)
     *             tier: String (Optional)
     *             state: String(pending/running/completed/failed) (Optional)
     *             totalAssetsFoundCount: Long (Optional)
     *             seeds (Optional): [
     *                  (Optional){
     *                     kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *                     name: String (Optional)
     *                 }
     *             ]
     *             excludes (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             names (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param groupName The groupName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return discoRunPageResponse along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> discoveryGroupsListRunsWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String groupName,
            RequestOptions requestOptions) {
        return this.client
                .discoveryGroupsListRunsWithResponse(
                        subscriptionId, resourceGroupName, workspaceName, groupName, requestOptions)
                .block();
    }

    /**
     * Retrieve a list of disco templates for the provided search parameters.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter parameter</td></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>The skip parameter</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maxPageSize parameter</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalElements: Long (Optional)
     *     nextLink: String (Optional)
     *     value (Required): [
     *          (Required){
     *             id: String (Optional)
     *             name: String (Optional)
     *             displayName: String (Optional)
     *             industry: String (Optional)
     *             region: String (Optional)
     *             countryCode: String (Optional)
     *             stateCode: String (Optional)
     *             city: String (Optional)
     *             seeds (Optional): [
     *                  (Optional){
     *                     kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *                     name: String (Optional)
     *                 }
     *             ]
     *             names (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return discoTemplatePageResponse along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> discoveryTemplatesListWithResponse(
            String subscriptionId, String resourceGroupName, String workspaceName, RequestOptions requestOptions) {
        return this.client
                .discoveryTemplatesListWithResponse(subscriptionId, resourceGroupName, workspaceName, requestOptions)
                .block();
    }

    /**
     * Retrieve a disco template with a given templateId.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     displayName: String (Optional)
     *     industry: String (Optional)
     *     region: String (Optional)
     *     countryCode: String (Optional)
     *     stateCode: String (Optional)
     *     city: String (Optional)
     *     seeds (Optional): [
     *          (Optional){
     *             kind: String(as/attribute/contact/domain/host/ipBlock) (Optional)
     *             name: String (Optional)
     *         }
     *     ]
     *     names (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param templateId The templateId parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return discoTemplateResponse along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> discoveryTemplatesGetWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String templateId,
            RequestOptions requestOptions) {
        return this.client
                .discoveryTemplatesGetWithResponse(
                        subscriptionId, resourceGroupName, workspaceName, templateId, requestOptions)
                .block();
    }

    /**
     * Get billable assets summary for the workspace.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     assetSummaries (Optional): [
     *          (Optional){
     *             date: LocalDate (Optional)
     *             total: Long (Optional)
     *             assetBreakdown (Optional): [
     *                  (Optional){
     *                     kind: String(domain/host/ipAddress) (Optional)
     *                     count: Long (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return billable assets summary for the workspace along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> reportsBillableWithResponse(
            String subscriptionId, String resourceGroupName, String workspaceName, RequestOptions requestOptions) {
        return this.client
                .reportsBillableWithResponse(subscriptionId, resourceGroupName, workspaceName, requestOptions)
                .block();
    }

    /**
     * Get the most recent snapshot of asset summary values for the snapshot request.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     metric: String (Optional)
     *     labelName: String (Optional)
     *     size: Integer (Optional)
     *     page: Integer (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     displayName: String (Optional)
     *     metric: String (Optional)
     *     labelName: String (Optional)
     *     updatedAt: OffsetDateTime (Optional)
     *     description: String (Optional)
     *     assets (Required): {
     *         totalElements: Long (Optional)
     *         mark: String (Optional)
     *         nextLink: String (Optional)
     *         value (Required): [
     *              (Required){
     *                 id: String (Optional)
     *                 name: String (Optional)
     *                 displayName: String (Optional)
     *                 uuid: String (Optional)
     *                 asset: Object (Required)
     *                 createdDate: OffsetDateTime (Optional)
     *                 updatedDate: OffsetDateTime (Optional)
     *                 state: String(candidate/confirmed/dismissed/candidateInvestigate/associatedPartner/associatedThirdparty/archived) (Optional)
     *                 externalId: String (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 wildcard: Boolean (Optional)
     *                 discoGroupName: String (Optional)
     *                 auditTrail (Optional): [
     *                      (Optional){
     *                         id: String (Optional)
     *                         name: String (Optional)
     *                         displayName: String (Optional)
     *                         kind: String(as/contact/domain/host/ipAddress/ipBlock/page/sslCert) (Optional)
     *                         reason: String (Optional)
     *                     }
     *                 ]
     *                 reason: String (Optional)
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param reportAssetSnapshotRequest ReportAssetSnapshotRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the most recent snapshot of asset summary values for the snapshot request along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> reportsSnapshotWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            BinaryData reportAssetSnapshotRequest,
            RequestOptions requestOptions) {
        return this.client
                .reportsSnapshotWithResponse(
                        subscriptionId, resourceGroupName, workspaceName, reportAssetSnapshotRequest, requestOptions)
                .block();
    }

    /**
     * Queue an export of the most recent snapshot of asset summary values to a file.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     metric: String (Optional)
     *     fileName: String (Optional)
     *     columns (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     startedAt: OffsetDateTime (Optional)
     *     completedAt: OffsetDateTime (Optional)
     *     lastPolledAt: OffsetDateTime (Optional)
     *     state: String(pending/running/paused/complete/incomplete/failed/warning) (Optional)
     *     phase: String(running/polling/complete) (Optional)
     *     reason: String (Optional)
     *     metadata: Object (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param reportAssetSnapshotExportRequest ReportAssetSnapshotExportRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return taskResponse along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> reportsSnapshotExportWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            BinaryData reportAssetSnapshotExportRequest,
            RequestOptions requestOptions) {
        return this.client
                .reportsSnapshotExportWithResponse(
                        subscriptionId,
                        resourceGroupName,
                        workspaceName,
                        reportAssetSnapshotExportRequest,
                        requestOptions)
                .block();
    }

    /**
     * Get asset summary details for the summary request.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     metricCategories (Optional): [
     *         String (Optional)
     *     ]
     *     metrics (Optional): [
     *         String (Optional)
     *     ]
     *     filters (Optional): [
     *         String (Optional)
     *     ]
     *     groupBy: String (Optional)
     *     segmentBy: String (Optional)
     *     labelName: String (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     assetSummaries (Optional): [
     *          (Optional){
     *             displayName: String (Optional)
     *             description: String (Optional)
     *             updatedAt: OffsetDateTime (Optional)
     *             metricCategory: String (Optional)
     *             metric: String (Optional)
     *             filter: String (Optional)
     *             labelName: String (Optional)
     *             count: Long (Optional)
     *             link: String (Optional)
     *             children (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param reportAssetSummaryRequest ReportAssetSummaryRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return asset summary details for the summary request along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> reportsSummaryWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            BinaryData reportAssetSummaryRequest,
            RequestOptions requestOptions) {
        return this.client
                .reportsSummaryWithResponse(
                        subscriptionId, resourceGroupName, workspaceName, reportAssetSummaryRequest, requestOptions)
                .block();
    }

    /**
     * Retrieve a list of saved filters for the provided search parameters.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter parameter</td></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>The skip parameter</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maxPageSize parameter</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalElements: Long (Optional)
     *     nextLink: String (Optional)
     *     value (Required): [
     *          (Required){
     *             id: String (Optional)
     *             name: String (Optional)
     *             displayName: String (Optional)
     *             filter: String (Optional)
     *             description: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return savedFilterPageResponse along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> savedFiltersListWithResponse(
            String subscriptionId, String resourceGroupName, String workspaceName, RequestOptions requestOptions) {
        return this.client
                .savedFiltersListWithResponse(subscriptionId, resourceGroupName, workspaceName, requestOptions)
                .block();
    }

    /**
     * Retrieve a saved filter by filterName.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     displayName: String (Optional)
     *     filter: String (Optional)
     *     description: String (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param filterName The filterName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return savedFilterResponse along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> savedFiltersGetWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String filterName,
            RequestOptions requestOptions) {
        return this.client
                .savedFiltersGetWithResponse(
                        subscriptionId, resourceGroupName, workspaceName, filterName, requestOptions)
                .block();
    }

    /**
     * Create or update a saved filter with a given filterName.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     filter: String (Required)
     *     description: String (Required)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     displayName: String (Optional)
     *     filter: String (Optional)
     *     description: String (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param filterName The filterName parameter.
     * @param savedFilterRequest SavedFilterRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return savedFilterResponse along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> savedFiltersPutWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String filterName,
            BinaryData savedFilterRequest,
            RequestOptions requestOptions) {
        return this.client
                .savedFiltersPutWithResponse(
                        subscriptionId,
                        resourceGroupName,
                        workspaceName,
                        filterName,
                        savedFilterRequest,
                        requestOptions)
                .block();
    }

    /**
     * Delete a saved filter with a given filterName.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param filterName The filterName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> savedFiltersDeleteWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String filterName,
            RequestOptions requestOptions) {
        return this.client
                .savedFiltersDeleteWithResponse(
                        subscriptionId, resourceGroupName, workspaceName, filterName, requestOptions)
                .block();
    }

    /**
     * Retrieve a list of tasks for the provided search parameters.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter parameter</td></tr>
     *     <tr><td>orderby</td><td>String</td><td>No</td><td>The orderBy parameter</td></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>The skip parameter</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maxPageSize parameter</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalElements: Long (Optional)
     *     nextLink: String (Optional)
     *     value (Required): [
     *          (Required){
     *             id: String (Optional)
     *             startedAt: OffsetDateTime (Optional)
     *             completedAt: OffsetDateTime (Optional)
     *             lastPolledAt: OffsetDateTime (Optional)
     *             state: String(pending/running/paused/complete/incomplete/failed/warning) (Optional)
     *             phase: String(running/polling/complete) (Optional)
     *             reason: String (Optional)
     *             metadata: Object (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return taskPageResponse along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> tasksListWithResponse(
            String subscriptionId, String resourceGroupName, String workspaceName, RequestOptions requestOptions) {
        return this.client
                .tasksListWithResponse(subscriptionId, resourceGroupName, workspaceName, requestOptions)
                .block();
    }

    /**
     * Retrieve a task by taskId.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     startedAt: OffsetDateTime (Optional)
     *     completedAt: OffsetDateTime (Optional)
     *     lastPolledAt: OffsetDateTime (Optional)
     *     state: String(pending/running/paused/complete/incomplete/failed/warning) (Optional)
     *     phase: String(running/polling/complete) (Optional)
     *     reason: String (Optional)
     *     metadata: Object (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param taskId The taskId parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return taskResponse along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> tasksGetWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String taskId,
            RequestOptions requestOptions) {
        return this.client
                .tasksGetWithResponse(subscriptionId, resourceGroupName, workspaceName, taskId, requestOptions)
                .block();
    }

    /**
     * Cancel a task by taskId.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     startedAt: OffsetDateTime (Optional)
     *     completedAt: OffsetDateTime (Optional)
     *     lastPolledAt: OffsetDateTime (Optional)
     *     state: String(pending/running/paused/complete/incomplete/failed/warning) (Optional)
     *     phase: String(running/polling/complete) (Optional)
     *     reason: String (Optional)
     *     metadata: Object (Optional)
     * }
     * }</pre>
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param taskId The taskId parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return taskResponse along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> tasksCancelWithResponse(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String taskId,
            RequestOptions requestOptions) {
        return this.client
                .tasksCancelWithResponse(subscriptionId, resourceGroupName, workspaceName, taskId, requestOptions)
                .block();
    }

    /**
     * Retrieve a list of assets for the provided search parameters.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param filter The filter parameter.
     * @param orderBy The orderBy parameter.
     * @param skip The skip parameter.
     * @param maxPageSize The maxPageSize parameter.
     * @param mark The mark parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return assetPageResponse.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssetPageResponse assetsList(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String filter,
            String orderBy,
            Integer skip,
            Integer maxPageSize,
            String mark) {
        // Generated convenience method for assetsListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        if (orderBy != null) {
            requestOptions.addQueryParam("orderby", orderBy, false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxpagesize", String.valueOf(maxPageSize), false);
        }
        if (mark != null) {
            requestOptions.addQueryParam("mark", mark, false);
        }
        return assetsListWithResponse(subscriptionId, resourceGroupName, workspaceName, requestOptions)
                .getValue()
                .toObject(AssetPageResponse.class);
    }

    /**
     * Retrieve a list of assets for the provided search parameters.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return assetPageResponse.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssetPageResponse assetsList(String subscriptionId, String resourceGroupName, String workspaceName) {
        // Generated convenience method for assetsListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return assetsListWithResponse(subscriptionId, resourceGroupName, workspaceName, requestOptions)
                .getValue()
                .toObject(AssetPageResponse.class);
    }

    /**
     * Update labels on assets matching the provided filter.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param assetUpdateRequest AssetUpdateRequest.
     * @param filter The filter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return taskResponse.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TaskResponse assetsUpdate(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            AssetUpdateRequest assetUpdateRequest,
            String filter) {
        // Generated convenience method for assetsUpdateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        return assetsUpdateWithResponse(
                        subscriptionId,
                        resourceGroupName,
                        workspaceName,
                        BinaryData.fromObject(assetUpdateRequest),
                        requestOptions)
                .getValue()
                .toObject(TaskResponse.class);
    }

    /**
     * Update labels on assets matching the provided filter.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param assetUpdateRequest AssetUpdateRequest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return taskResponse.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TaskResponse assetsUpdate(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            AssetUpdateRequest assetUpdateRequest) {
        // Generated convenience method for assetsUpdateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return assetsUpdateWithResponse(
                        subscriptionId,
                        resourceGroupName,
                        workspaceName,
                        BinaryData.fromObject(assetUpdateRequest),
                        requestOptions)
                .getValue()
                .toObject(TaskResponse.class);
    }

    /**
     * Retrieve an asset by assetId.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param assetId The assetId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return assetResponse.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssetResponse assetsGet(
            String subscriptionId, String resourceGroupName, String workspaceName, String assetId) {
        // Generated convenience method for assetsGetWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return assetsGetWithResponse(subscriptionId, resourceGroupName, workspaceName, assetId, requestOptions)
                .getValue()
                .toObject(AssetResponse.class);
    }

    /**
     * Retrieve a list of data connections.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param skip The skip parameter.
     * @param maxPageSize The maxPageSize parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dataConnectionPageResponse.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DataConnectionPageResponse dataConnectionsList(
            String subscriptionId, String resourceGroupName, String workspaceName, Integer skip, Integer maxPageSize) {
        // Generated convenience method for dataConnectionsListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxpagesize", String.valueOf(maxPageSize), false);
        }
        return dataConnectionsListWithResponse(subscriptionId, resourceGroupName, workspaceName, requestOptions)
                .getValue()
                .toObject(DataConnectionPageResponse.class);
    }

    /**
     * Retrieve a list of data connections.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dataConnectionPageResponse.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DataConnectionPageResponse dataConnectionsList(
            String subscriptionId, String resourceGroupName, String workspaceName) {
        // Generated convenience method for dataConnectionsListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return dataConnectionsListWithResponse(subscriptionId, resourceGroupName, workspaceName, requestOptions)
                .getValue()
                .toObject(DataConnectionPageResponse.class);
    }

    /**
     * Validate a data connection with a given dataConnectionName.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param dataConnectionRequest DataConnectionRequest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return validateResponse.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ValidateResponse dataConnectionsValidate(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            DataConnectionRequest dataConnectionRequest) {
        // Generated convenience method for dataConnectionsValidateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return dataConnectionsValidateWithResponse(
                        subscriptionId,
                        resourceGroupName,
                        workspaceName,
                        BinaryData.fromObject(dataConnectionRequest),
                        requestOptions)
                .getValue()
                .toObject(ValidateResponse.class);
    }

    /**
     * Retrieve a data connection with a given dataConnectionName.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param dataConnectionName The dataConnectionName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dataConnectionResponse.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DataConnectionResponse dataConnectionsGet(
            String subscriptionId, String resourceGroupName, String workspaceName, String dataConnectionName) {
        // Generated convenience method for dataConnectionsGetWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return dataConnectionsGetWithResponse(
                        subscriptionId, resourceGroupName, workspaceName, dataConnectionName, requestOptions)
                .getValue()
                .toObject(DataConnectionResponse.class);
    }

    /**
     * Create or update a data connection with a given dataConnectionName.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param dataConnectionName The dataConnectionName parameter.
     * @param dataConnectionRequest DataConnectionRequest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dataConnectionResponse.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DataConnectionResponse dataConnectionsPut(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String dataConnectionName,
            DataConnectionRequest dataConnectionRequest) {
        // Generated convenience method for dataConnectionsPutWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return dataConnectionsPutWithResponse(
                        subscriptionId,
                        resourceGroupName,
                        workspaceName,
                        dataConnectionName,
                        BinaryData.fromObject(dataConnectionRequest),
                        requestOptions)
                .getValue()
                .toObject(DataConnectionResponse.class);
    }

    /**
     * Delete a data connection with a given dataConnectionName.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param dataConnectionName The dataConnectionName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void dataConnectionsDelete(
            String subscriptionId, String resourceGroupName, String workspaceName, String dataConnectionName) {
        // Generated convenience method for dataConnectionsDeleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        dataConnectionsDeleteWithResponse(
                        subscriptionId, resourceGroupName, workspaceName, dataConnectionName, requestOptions)
                .getValue();
    }

    /**
     * Retrieve a list of discovery group for the provided search parameters.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param filter The filter parameter.
     * @param skip The skip parameter.
     * @param maxPageSize The maxPageSize parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discoGroupPageResponse.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiscoGroupPageResponse discoveryGroupsList(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String filter,
            Integer skip,
            Integer maxPageSize) {
        // Generated convenience method for discoveryGroupsListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxpagesize", String.valueOf(maxPageSize), false);
        }
        return discoveryGroupsListWithResponse(subscriptionId, resourceGroupName, workspaceName, requestOptions)
                .getValue()
                .toObject(DiscoGroupPageResponse.class);
    }

    /**
     * Retrieve a list of discovery group for the provided search parameters.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discoGroupPageResponse.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiscoGroupPageResponse discoveryGroupsList(
            String subscriptionId, String resourceGroupName, String workspaceName) {
        // Generated convenience method for discoveryGroupsListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return discoveryGroupsListWithResponse(subscriptionId, resourceGroupName, workspaceName, requestOptions)
                .getValue()
                .toObject(DiscoGroupPageResponse.class);
    }

    /**
     * Validate a discovery group with a given groupName.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param groupName The groupName parameter.
     * @param discoGroupRequest DiscoGroupRequest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return validateResponse.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ValidateResponse discoveryGroupsValidate(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String groupName,
            DiscoGroupRequest discoGroupRequest) {
        // Generated convenience method for discoveryGroupsValidateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return discoveryGroupsValidateWithResponse(
                        subscriptionId,
                        resourceGroupName,
                        workspaceName,
                        groupName,
                        BinaryData.fromObject(discoGroupRequest),
                        requestOptions)
                .getValue()
                .toObject(ValidateResponse.class);
    }

    /**
     * Retrieve a discovery group with a given groupName.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param groupName The groupName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discoGroupResponse.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiscoGroupResponse discoveryGroupsGet(
            String subscriptionId, String resourceGroupName, String workspaceName, String groupName) {
        // Generated convenience method for discoveryGroupsGetWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return discoveryGroupsGetWithResponse(
                        subscriptionId, resourceGroupName, workspaceName, groupName, requestOptions)
                .getValue()
                .toObject(DiscoGroupResponse.class);
    }

    /**
     * Create a discovery group with a given groupName.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param groupName The groupName parameter.
     * @param discoGroupRequest DiscoGroupRequest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discoGroupResponse.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiscoGroupResponse discoveryGroupsPut(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String groupName,
            DiscoGroupRequest discoGroupRequest) {
        // Generated convenience method for discoveryGroupsPutWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return discoveryGroupsPutWithResponse(
                        subscriptionId,
                        resourceGroupName,
                        workspaceName,
                        groupName,
                        BinaryData.fromObject(discoGroupRequest),
                        requestOptions)
                .getValue()
                .toObject(DiscoGroupResponse.class);
    }

    /**
     * Run a discovery group with a given groupName.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param groupName The groupName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void discoveryGroupsRun(
            String subscriptionId, String resourceGroupName, String workspaceName, String groupName) {
        // Generated convenience method for discoveryGroupsRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        discoveryGroupsRunWithResponse(subscriptionId, resourceGroupName, workspaceName, groupName, requestOptions)
                .getValue();
    }

    /**
     * Retrieve a collection of discovery run results for a discovery group with a given groupName.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param groupName The groupName parameter.
     * @param filter The filter parameter.
     * @param skip The skip parameter.
     * @param maxPageSize The maxPageSize parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discoRunPageResponse.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiscoRunPageResponse discoveryGroupsListRuns(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String groupName,
            String filter,
            Integer skip,
            Integer maxPageSize) {
        // Generated convenience method for discoveryGroupsListRunsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxpagesize", String.valueOf(maxPageSize), false);
        }
        return discoveryGroupsListRunsWithResponse(
                        subscriptionId, resourceGroupName, workspaceName, groupName, requestOptions)
                .getValue()
                .toObject(DiscoRunPageResponse.class);
    }

    /**
     * Retrieve a collection of discovery run results for a discovery group with a given groupName.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param groupName The groupName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discoRunPageResponse.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiscoRunPageResponse discoveryGroupsListRuns(
            String subscriptionId, String resourceGroupName, String workspaceName, String groupName) {
        // Generated convenience method for discoveryGroupsListRunsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return discoveryGroupsListRunsWithResponse(
                        subscriptionId, resourceGroupName, workspaceName, groupName, requestOptions)
                .getValue()
                .toObject(DiscoRunPageResponse.class);
    }

    /**
     * Retrieve a list of disco templates for the provided search parameters.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param filter The filter parameter.
     * @param skip The skip parameter.
     * @param maxPageSize The maxPageSize parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discoTemplatePageResponse.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiscoTemplatePageResponse discoveryTemplatesList(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String filter,
            Integer skip,
            Integer maxPageSize) {
        // Generated convenience method for discoveryTemplatesListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxpagesize", String.valueOf(maxPageSize), false);
        }
        return discoveryTemplatesListWithResponse(subscriptionId, resourceGroupName, workspaceName, requestOptions)
                .getValue()
                .toObject(DiscoTemplatePageResponse.class);
    }

    /**
     * Retrieve a list of disco templates for the provided search parameters.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discoTemplatePageResponse.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiscoTemplatePageResponse discoveryTemplatesList(
            String subscriptionId, String resourceGroupName, String workspaceName) {
        // Generated convenience method for discoveryTemplatesListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return discoveryTemplatesListWithResponse(subscriptionId, resourceGroupName, workspaceName, requestOptions)
                .getValue()
                .toObject(DiscoTemplatePageResponse.class);
    }

    /**
     * Retrieve a disco template with a given templateId.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param templateId The templateId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discoTemplateResponse.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiscoTemplateResponse discoveryTemplatesGet(
            String subscriptionId, String resourceGroupName, String workspaceName, String templateId) {
        // Generated convenience method for discoveryTemplatesGetWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return discoveryTemplatesGetWithResponse(
                        subscriptionId, resourceGroupName, workspaceName, templateId, requestOptions)
                .getValue()
                .toObject(DiscoTemplateResponse.class);
    }

    /**
     * Get billable assets summary for the workspace.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return billable assets summary for the workspace.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReportBillableAssetSummaryResponse reportsBillable(
            String subscriptionId, String resourceGroupName, String workspaceName) {
        // Generated convenience method for reportsBillableWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return reportsBillableWithResponse(subscriptionId, resourceGroupName, workspaceName, requestOptions)
                .getValue()
                .toObject(ReportBillableAssetSummaryResponse.class);
    }

    /**
     * Get the most recent snapshot of asset summary values for the snapshot request.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param reportAssetSnapshotRequest ReportAssetSnapshotRequest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the most recent snapshot of asset summary values for the snapshot request.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReportAssetSnapshotResponse reportsSnapshot(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            ReportAssetSnapshotRequest reportAssetSnapshotRequest) {
        // Generated convenience method for reportsSnapshotWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return reportsSnapshotWithResponse(
                        subscriptionId,
                        resourceGroupName,
                        workspaceName,
                        BinaryData.fromObject(reportAssetSnapshotRequest),
                        requestOptions)
                .getValue()
                .toObject(ReportAssetSnapshotResponse.class);
    }

    /**
     * Queue an export of the most recent snapshot of asset summary values to a file.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param reportAssetSnapshotExportRequest ReportAssetSnapshotExportRequest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return taskResponse.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TaskResponse reportsSnapshotExport(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            ReportAssetSnapshotExportRequest reportAssetSnapshotExportRequest) {
        // Generated convenience method for reportsSnapshotExportWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return reportsSnapshotExportWithResponse(
                        subscriptionId,
                        resourceGroupName,
                        workspaceName,
                        BinaryData.fromObject(reportAssetSnapshotExportRequest),
                        requestOptions)
                .getValue()
                .toObject(TaskResponse.class);
    }

    /**
     * Get asset summary details for the summary request.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param reportAssetSummaryRequest ReportAssetSummaryRequest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return asset summary details for the summary request.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReportAssetSummaryResponse reportsSummary(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            ReportAssetSummaryRequest reportAssetSummaryRequest) {
        // Generated convenience method for reportsSummaryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return reportsSummaryWithResponse(
                        subscriptionId,
                        resourceGroupName,
                        workspaceName,
                        BinaryData.fromObject(reportAssetSummaryRequest),
                        requestOptions)
                .getValue()
                .toObject(ReportAssetSummaryResponse.class);
    }

    /**
     * Retrieve a list of saved filters for the provided search parameters.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param filter The filter parameter.
     * @param skip The skip parameter.
     * @param maxPageSize The maxPageSize parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return savedFilterPageResponse.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SavedFilterPageResponse savedFiltersList(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String filter,
            Integer skip,
            Integer maxPageSize) {
        // Generated convenience method for savedFiltersListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxpagesize", String.valueOf(maxPageSize), false);
        }
        return savedFiltersListWithResponse(subscriptionId, resourceGroupName, workspaceName, requestOptions)
                .getValue()
                .toObject(SavedFilterPageResponse.class);
    }

    /**
     * Retrieve a list of saved filters for the provided search parameters.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return savedFilterPageResponse.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SavedFilterPageResponse savedFiltersList(
            String subscriptionId, String resourceGroupName, String workspaceName) {
        // Generated convenience method for savedFiltersListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return savedFiltersListWithResponse(subscriptionId, resourceGroupName, workspaceName, requestOptions)
                .getValue()
                .toObject(SavedFilterPageResponse.class);
    }

    /**
     * Retrieve a saved filter by filterName.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param filterName The filterName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return savedFilterResponse.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SavedFilterResponse savedFiltersGet(
            String subscriptionId, String resourceGroupName, String workspaceName, String filterName) {
        // Generated convenience method for savedFiltersGetWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return savedFiltersGetWithResponse(subscriptionId, resourceGroupName, workspaceName, filterName, requestOptions)
                .getValue()
                .toObject(SavedFilterResponse.class);
    }

    /**
     * Create or update a saved filter with a given filterName.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param filterName The filterName parameter.
     * @param savedFilterRequest SavedFilterRequest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return savedFilterResponse.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SavedFilterResponse savedFiltersPut(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String filterName,
            SavedFilterRequest savedFilterRequest) {
        // Generated convenience method for savedFiltersPutWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return savedFiltersPutWithResponse(
                        subscriptionId,
                        resourceGroupName,
                        workspaceName,
                        filterName,
                        BinaryData.fromObject(savedFilterRequest),
                        requestOptions)
                .getValue()
                .toObject(SavedFilterResponse.class);
    }

    /**
     * Delete a saved filter with a given filterName.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param filterName The filterName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void savedFiltersDelete(
            String subscriptionId, String resourceGroupName, String workspaceName, String filterName) {
        // Generated convenience method for savedFiltersDeleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        savedFiltersDeleteWithResponse(subscriptionId, resourceGroupName, workspaceName, filterName, requestOptions)
                .getValue();
    }

    /**
     * Retrieve a list of tasks for the provided search parameters.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param filter The filter parameter.
     * @param orderBy The orderBy parameter.
     * @param skip The skip parameter.
     * @param maxPageSize The maxPageSize parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return taskPageResponse.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TaskPageResponse tasksList(
            String subscriptionId,
            String resourceGroupName,
            String workspaceName,
            String filter,
            String orderBy,
            Integer skip,
            Integer maxPageSize) {
        // Generated convenience method for tasksListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        if (orderBy != null) {
            requestOptions.addQueryParam("orderby", orderBy, false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxpagesize", String.valueOf(maxPageSize), false);
        }
        return tasksListWithResponse(subscriptionId, resourceGroupName, workspaceName, requestOptions)
                .getValue()
                .toObject(TaskPageResponse.class);
    }

    /**
     * Retrieve a list of tasks for the provided search parameters.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return taskPageResponse.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TaskPageResponse tasksList(String subscriptionId, String resourceGroupName, String workspaceName) {
        // Generated convenience method for tasksListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return tasksListWithResponse(subscriptionId, resourceGroupName, workspaceName, requestOptions)
                .getValue()
                .toObject(TaskPageResponse.class);
    }

    /**
     * Retrieve a task by taskId.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param taskId The taskId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return taskResponse.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TaskResponse tasksGet(String subscriptionId, String resourceGroupName, String workspaceName, String taskId) {
        // Generated convenience method for tasksGetWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return tasksGetWithResponse(subscriptionId, resourceGroupName, workspaceName, taskId, requestOptions)
                .getValue()
                .toObject(TaskResponse.class);
    }

    /**
     * Cancel a task by taskId.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param resourceGroupName The resourceGroupName parameter.
     * @param workspaceName The workspaceName parameter.
     * @param taskId The taskId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return taskResponse.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TaskResponse tasksCancel(
            String subscriptionId, String resourceGroupName, String workspaceName, String taskId) {
        // Generated convenience method for tasksCancelWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return tasksCancelWithResponse(subscriptionId, resourceGroupName, workspaceName, taskId, requestOptions)
                .getValue()
                .toObject(TaskResponse.class);
    }
}
